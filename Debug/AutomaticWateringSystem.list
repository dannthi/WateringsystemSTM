
AutomaticWateringSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009420  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08009560  08009560  00019560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bac  08009bac  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb4  08009bb4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001e4  08009da0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08009da0  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa33  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002653  00000000  00000000  0002fc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00032298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00033140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001887a  00000000  00000000  00033f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001179f  00000000  00000000  0004c782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095539  00000000  00000000  0005df21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f345a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe4  00000000  00000000  000f34ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08009548 	.word	0x08009548

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08009548 	.word	0x08009548

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_uldivmod>:
 8001060:	b953      	cbnz	r3, 8001078 <__aeabi_uldivmod+0x18>
 8001062:	b94a      	cbnz	r2, 8001078 <__aeabi_uldivmod+0x18>
 8001064:	2900      	cmp	r1, #0
 8001066:	bf08      	it	eq
 8001068:	2800      	cmpeq	r0, #0
 800106a:	bf1c      	itt	ne
 800106c:	f04f 31ff 	movne.w	r1, #4294967295
 8001070:	f04f 30ff 	movne.w	r0, #4294967295
 8001074:	f000 b976 	b.w	8001364 <__aeabi_idiv0>
 8001078:	f1ad 0c08 	sub.w	ip, sp, #8
 800107c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001080:	f000 f806 	bl	8001090 <__udivmoddi4>
 8001084:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr

08001090 <__udivmoddi4>:
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001094:	9e08      	ldr	r6, [sp, #32]
 8001096:	460d      	mov	r5, r1
 8001098:	4604      	mov	r4, r0
 800109a:	4688      	mov	r8, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d14d      	bne.n	800113c <__udivmoddi4+0xac>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	4694      	mov	ip, r2
 80010a4:	d968      	bls.n	8001178 <__udivmoddi4+0xe8>
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b152      	cbz	r2, 80010c2 <__udivmoddi4+0x32>
 80010ac:	fa01 f302 	lsl.w	r3, r1, r2
 80010b0:	f1c2 0120 	rsb	r1, r2, #32
 80010b4:	fa20 f101 	lsr.w	r1, r0, r1
 80010b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010bc:	ea41 0803 	orr.w	r8, r1, r3
 80010c0:	4094      	lsls	r4, r2
 80010c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80010c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80010ca:	fa1f fe8c 	uxth.w	lr, ip
 80010ce:	fb01 8817 	mls	r8, r1, r7, r8
 80010d2:	fb07 f00e 	mul.w	r0, r7, lr
 80010d6:	0c23      	lsrs	r3, r4, #16
 80010d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010dc:	4298      	cmp	r0, r3
 80010de:	d90a      	bls.n	80010f6 <__udivmoddi4+0x66>
 80010e0:	eb1c 0303 	adds.w	r3, ip, r3
 80010e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80010e8:	f080 811e 	bcs.w	8001328 <__udivmoddi4+0x298>
 80010ec:	4298      	cmp	r0, r3
 80010ee:	f240 811b 	bls.w	8001328 <__udivmoddi4+0x298>
 80010f2:	3f02      	subs	r7, #2
 80010f4:	4463      	add	r3, ip
 80010f6:	1a1b      	subs	r3, r3, r0
 80010f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80010fc:	fb01 3310 	mls	r3, r1, r0, r3
 8001100:	fb00 fe0e 	mul.w	lr, r0, lr
 8001104:	b2a4      	uxth	r4, r4
 8001106:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800110a:	45a6      	cmp	lr, r4
 800110c:	d90a      	bls.n	8001124 <__udivmoddi4+0x94>
 800110e:	eb1c 0404 	adds.w	r4, ip, r4
 8001112:	f100 33ff 	add.w	r3, r0, #4294967295
 8001116:	f080 8109 	bcs.w	800132c <__udivmoddi4+0x29c>
 800111a:	45a6      	cmp	lr, r4
 800111c:	f240 8106 	bls.w	800132c <__udivmoddi4+0x29c>
 8001120:	4464      	add	r4, ip
 8001122:	3802      	subs	r0, #2
 8001124:	2100      	movs	r1, #0
 8001126:	eba4 040e 	sub.w	r4, r4, lr
 800112a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800112e:	b11e      	cbz	r6, 8001138 <__udivmoddi4+0xa8>
 8001130:	2300      	movs	r3, #0
 8001132:	40d4      	lsrs	r4, r2
 8001134:	e9c6 4300 	strd	r4, r3, [r6]
 8001138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113c:	428b      	cmp	r3, r1
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0xc2>
 8001140:	2e00      	cmp	r6, #0
 8001142:	f000 80ee 	beq.w	8001322 <__udivmoddi4+0x292>
 8001146:	2100      	movs	r1, #0
 8001148:	e9c6 0500 	strd	r0, r5, [r6]
 800114c:	4608      	mov	r0, r1
 800114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001152:	fab3 f183 	clz	r1, r3
 8001156:	2900      	cmp	r1, #0
 8001158:	d14a      	bne.n	80011f0 <__udivmoddi4+0x160>
 800115a:	42ab      	cmp	r3, r5
 800115c:	d302      	bcc.n	8001164 <__udivmoddi4+0xd4>
 800115e:	4282      	cmp	r2, r0
 8001160:	f200 80fc 	bhi.w	800135c <__udivmoddi4+0x2cc>
 8001164:	1a84      	subs	r4, r0, r2
 8001166:	eb65 0303 	sbc.w	r3, r5, r3
 800116a:	2001      	movs	r0, #1
 800116c:	4698      	mov	r8, r3
 800116e:	2e00      	cmp	r6, #0
 8001170:	d0e2      	beq.n	8001138 <__udivmoddi4+0xa8>
 8001172:	e9c6 4800 	strd	r4, r8, [r6]
 8001176:	e7df      	b.n	8001138 <__udivmoddi4+0xa8>
 8001178:	b902      	cbnz	r2, 800117c <__udivmoddi4+0xec>
 800117a:	deff      	udf	#255	; 0xff
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	2a00      	cmp	r2, #0
 8001182:	f040 8091 	bne.w	80012a8 <__udivmoddi4+0x218>
 8001186:	eba1 000c 	sub.w	r0, r1, ip
 800118a:	2101      	movs	r1, #1
 800118c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001190:	fa1f fe8c 	uxth.w	lr, ip
 8001194:	fbb0 f3f7 	udiv	r3, r0, r7
 8001198:	fb07 0013 	mls	r0, r7, r3, r0
 800119c:	0c25      	lsrs	r5, r4, #16
 800119e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011a2:	fb0e f003 	mul.w	r0, lr, r3
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x12c>
 80011aa:	eb1c 0505 	adds.w	r5, ip, r5
 80011ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80011b2:	d202      	bcs.n	80011ba <__udivmoddi4+0x12a>
 80011b4:	42a8      	cmp	r0, r5
 80011b6:	f200 80ce 	bhi.w	8001356 <__udivmoddi4+0x2c6>
 80011ba:	4643      	mov	r3, r8
 80011bc:	1a2d      	subs	r5, r5, r0
 80011be:	fbb5 f0f7 	udiv	r0, r5, r7
 80011c2:	fb07 5510 	mls	r5, r7, r0, r5
 80011c6:	fb0e fe00 	mul.w	lr, lr, r0
 80011ca:	b2a4      	uxth	r4, r4
 80011cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011d0:	45a6      	cmp	lr, r4
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x156>
 80011d4:	eb1c 0404 	adds.w	r4, ip, r4
 80011d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011dc:	d202      	bcs.n	80011e4 <__udivmoddi4+0x154>
 80011de:	45a6      	cmp	lr, r4
 80011e0:	f200 80b6 	bhi.w	8001350 <__udivmoddi4+0x2c0>
 80011e4:	4628      	mov	r0, r5
 80011e6:	eba4 040e 	sub.w	r4, r4, lr
 80011ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011ee:	e79e      	b.n	800112e <__udivmoddi4+0x9e>
 80011f0:	f1c1 0720 	rsb	r7, r1, #32
 80011f4:	408b      	lsls	r3, r1
 80011f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8001202:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001206:	fbba f8f9 	udiv	r8, sl, r9
 800120a:	fa20 f307 	lsr.w	r3, r0, r7
 800120e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001212:	408d      	lsls	r5, r1
 8001214:	fa1f fe8c 	uxth.w	lr, ip
 8001218:	431d      	orrs	r5, r3
 800121a:	fa00 f301 	lsl.w	r3, r0, r1
 800121e:	fb08 f00e 	mul.w	r0, r8, lr
 8001222:	0c2c      	lsrs	r4, r5, #16
 8001224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001228:	42a0      	cmp	r0, r4
 800122a:	fa02 f201 	lsl.w	r2, r2, r1
 800122e:	d90b      	bls.n	8001248 <__udivmoddi4+0x1b8>
 8001230:	eb1c 0404 	adds.w	r4, ip, r4
 8001234:	f108 3aff 	add.w	sl, r8, #4294967295
 8001238:	f080 8088 	bcs.w	800134c <__udivmoddi4+0x2bc>
 800123c:	42a0      	cmp	r0, r4
 800123e:	f240 8085 	bls.w	800134c <__udivmoddi4+0x2bc>
 8001242:	f1a8 0802 	sub.w	r8, r8, #2
 8001246:	4464      	add	r4, ip
 8001248:	1a24      	subs	r4, r4, r0
 800124a:	fbb4 f0f9 	udiv	r0, r4, r9
 800124e:	fb09 4410 	mls	r4, r9, r0, r4
 8001252:	fb00 fe0e 	mul.w	lr, r0, lr
 8001256:	b2ad      	uxth	r5, r5
 8001258:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800125c:	45a6      	cmp	lr, r4
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x1e2>
 8001260:	eb1c 0404 	adds.w	r4, ip, r4
 8001264:	f100 35ff 	add.w	r5, r0, #4294967295
 8001268:	d26c      	bcs.n	8001344 <__udivmoddi4+0x2b4>
 800126a:	45a6      	cmp	lr, r4
 800126c:	d96a      	bls.n	8001344 <__udivmoddi4+0x2b4>
 800126e:	3802      	subs	r0, #2
 8001270:	4464      	add	r4, ip
 8001272:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001276:	fba0 9502 	umull	r9, r5, r0, r2
 800127a:	eba4 040e 	sub.w	r4, r4, lr
 800127e:	42ac      	cmp	r4, r5
 8001280:	46c8      	mov	r8, r9
 8001282:	46ae      	mov	lr, r5
 8001284:	d356      	bcc.n	8001334 <__udivmoddi4+0x2a4>
 8001286:	d053      	beq.n	8001330 <__udivmoddi4+0x2a0>
 8001288:	2e00      	cmp	r6, #0
 800128a:	d069      	beq.n	8001360 <__udivmoddi4+0x2d0>
 800128c:	ebb3 0208 	subs.w	r2, r3, r8
 8001290:	eb64 040e 	sbc.w	r4, r4, lr
 8001294:	fa22 f301 	lsr.w	r3, r2, r1
 8001298:	fa04 f707 	lsl.w	r7, r4, r7
 800129c:	431f      	orrs	r7, r3
 800129e:	40cc      	lsrs	r4, r1
 80012a0:	e9c6 7400 	strd	r7, r4, [r6]
 80012a4:	2100      	movs	r1, #0
 80012a6:	e747      	b.n	8001138 <__udivmoddi4+0xa8>
 80012a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ac:	f1c2 0120 	rsb	r1, r2, #32
 80012b0:	fa25 f301 	lsr.w	r3, r5, r1
 80012b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012b8:	fa20 f101 	lsr.w	r1, r0, r1
 80012bc:	4095      	lsls	r5, r2
 80012be:	430d      	orrs	r5, r1
 80012c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80012c4:	fb07 3311 	mls	r3, r7, r1, r3
 80012c8:	fa1f fe8c 	uxth.w	lr, ip
 80012cc:	0c28      	lsrs	r0, r5, #16
 80012ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012d2:	fb01 f30e 	mul.w	r3, r1, lr
 80012d6:	4283      	cmp	r3, r0
 80012d8:	fa04 f402 	lsl.w	r4, r4, r2
 80012dc:	d908      	bls.n	80012f0 <__udivmoddi4+0x260>
 80012de:	eb1c 0000 	adds.w	r0, ip, r0
 80012e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80012e6:	d22f      	bcs.n	8001348 <__udivmoddi4+0x2b8>
 80012e8:	4283      	cmp	r3, r0
 80012ea:	d92d      	bls.n	8001348 <__udivmoddi4+0x2b8>
 80012ec:	3902      	subs	r1, #2
 80012ee:	4460      	add	r0, ip
 80012f0:	1ac0      	subs	r0, r0, r3
 80012f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80012f6:	fb07 0013 	mls	r0, r7, r3, r0
 80012fa:	b2ad      	uxth	r5, r5
 80012fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001300:	fb03 f00e 	mul.w	r0, r3, lr
 8001304:	42a8      	cmp	r0, r5
 8001306:	d908      	bls.n	800131a <__udivmoddi4+0x28a>
 8001308:	eb1c 0505 	adds.w	r5, ip, r5
 800130c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001310:	d216      	bcs.n	8001340 <__udivmoddi4+0x2b0>
 8001312:	42a8      	cmp	r0, r5
 8001314:	d914      	bls.n	8001340 <__udivmoddi4+0x2b0>
 8001316:	3b02      	subs	r3, #2
 8001318:	4465      	add	r5, ip
 800131a:	1a28      	subs	r0, r5, r0
 800131c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001320:	e738      	b.n	8001194 <__udivmoddi4+0x104>
 8001322:	4631      	mov	r1, r6
 8001324:	4630      	mov	r0, r6
 8001326:	e707      	b.n	8001138 <__udivmoddi4+0xa8>
 8001328:	462f      	mov	r7, r5
 800132a:	e6e4      	b.n	80010f6 <__udivmoddi4+0x66>
 800132c:	4618      	mov	r0, r3
 800132e:	e6f9      	b.n	8001124 <__udivmoddi4+0x94>
 8001330:	454b      	cmp	r3, r9
 8001332:	d2a9      	bcs.n	8001288 <__udivmoddi4+0x1f8>
 8001334:	ebb9 0802 	subs.w	r8, r9, r2
 8001338:	eb65 0e0c 	sbc.w	lr, r5, ip
 800133c:	3801      	subs	r0, #1
 800133e:	e7a3      	b.n	8001288 <__udivmoddi4+0x1f8>
 8001340:	4643      	mov	r3, r8
 8001342:	e7ea      	b.n	800131a <__udivmoddi4+0x28a>
 8001344:	4628      	mov	r0, r5
 8001346:	e794      	b.n	8001272 <__udivmoddi4+0x1e2>
 8001348:	4641      	mov	r1, r8
 800134a:	e7d1      	b.n	80012f0 <__udivmoddi4+0x260>
 800134c:	46d0      	mov	r8, sl
 800134e:	e77b      	b.n	8001248 <__udivmoddi4+0x1b8>
 8001350:	4464      	add	r4, ip
 8001352:	3802      	subs	r0, #2
 8001354:	e747      	b.n	80011e6 <__udivmoddi4+0x156>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	e72f      	b.n	80011bc <__udivmoddi4+0x12c>
 800135c:	4608      	mov	r0, r1
 800135e:	e706      	b.n	800116e <__udivmoddi4+0xde>
 8001360:	4631      	mov	r1, r6
 8001362:	e6e9      	b.n	8001138 <__udivmoddi4+0xa8>

08001364 <__aeabi_idiv0>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <send_to_display>:


#include "main.h"


HAL_StatusTypeDef send_to_display(I2C_HandleTypeDef *hi2c, char* input_string, uint8_t numchar, uint16_t address){
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	4611      	mov	r1, r2
 8001374:	461a      	mov	r2, r3
 8001376:	460b      	mov	r3, r1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	4613      	mov	r3, r2
 800137c:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef returnmessage = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint8_t send_message[ARRAYSIZE] = {0};
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	2229      	movs	r2, #41	; 0x29
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f005 f9f7 	bl	8006784 <memset>
	uint8_t upordown = 1;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t offset = 16;
 800139c:	2310      	movs	r3, #16
 800139e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	clear_screen(hi2c, address);
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	4619      	mov	r1, r3
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fafb 	bl	80019a2 <clear_screen>

	send_message[0] = LCD_WR;
 80013ac:	2361      	movs	r3, #97	; 0x61
 80013ae:	753b      	strb	r3, [r7, #20]

	for(uint8_t i=0; i<numchar; i++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80013b6:	e063      	b.n	8001480 <send_to_display+0x118>
		if((input_string[i] == '\r') || (input_string[i] == '\n')){
 80013b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b0d      	cmp	r3, #13
 80013c4:	d006      	beq.n	80013d4 <send_to_display+0x6c>
 80013c6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b0a      	cmp	r3, #10
 80013d2:	d10c      	bne.n	80013ee <send_to_display+0x86>
			offset = i;
 80013d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			i++;
 80013dc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013e0:	3301      	adds	r3, #1
 80013e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			upordown = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013ec:	e043      	b.n	8001476 <send_to_display+0x10e>
		}
		else{
			if(i <= 15){
 80013ee:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	d812      	bhi.n	800141c <send_to_display+0xb4>
				send_message[1] = upordown;
 80013f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013fa:	757b      	strb	r3, [r7, #21]
				if(upordown) send_message[2] = i;
 80013fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <send_to_display+0xa4>
 8001404:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001408:	75bb      	strb	r3, [r7, #22]
 800140a:	e017      	b.n	800143c <send_to_display+0xd4>
				else send_message[2] = i-offset;
 800140c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001410:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	75bb      	strb	r3, [r7, #22]
 800141a:	e00f      	b.n	800143c <send_to_display+0xd4>
			}
			else if(i <= 30){
 800141c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001420:	2b1e      	cmp	r3, #30
 8001422:	d809      	bhi.n	8001438 <send_to_display+0xd0>
				send_message[1] = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	757b      	strb	r3, [r7, #21]
				send_message[2] = i-offset;
 8001428:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800142c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	75bb      	strb	r3, [r7, #22]
 8001436:	e001      	b.n	800143c <send_to_display+0xd4>
			}
			else return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e02b      	b.n	8001494 <send_to_display+0x12c>

			send_message[3]=input_string[i];
 800143c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	75fb      	strb	r3, [r7, #23]
			returnmessage = HAL_I2C_Master_Transmit(hi2c, address , send_message, 4, HAL_MAX_DELAY);
 8001448:	f107 0214 	add.w	r2, r7, #20
 800144c:	88b9      	ldrh	r1, [r7, #4]
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2304      	movs	r3, #4
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f002 fa8a 	bl	8003970 <HAL_I2C_Master_Transmit>
 800145c:	4603      	mov	r3, r0
 800145e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			if(returnmessage != HAL_OK){
 8001462:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <send_to_display+0x108>
				return returnmessage;
 800146a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800146e:	e011      	b.n	8001494 <send_to_display+0x12c>
			}
			HAL_Delay(50);
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f001 f9cb 	bl	800280c <HAL_Delay>
	for(uint8_t i=0; i<numchar; i++){
 8001476:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800147a:	3301      	adds	r3, #1
 800147c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001480:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	429a      	cmp	r2, r3
 8001488:	d396      	bcc.n	80013b8 <send_to_display+0x50>
		}
	}
	HAL_Delay(5000);
 800148a:	f241 3088 	movw	r0, #5000	; 0x1388
 800148e:	f001 f9bd 	bl	800280c <HAL_Delay>
	return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3748      	adds	r7, #72	; 0x48
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <timer_interrupt_handler>:


HAL_StatusTypeDef timer_interrupt_handler(	UART_HandleTypeDef* huart, ADC_HandleTypeDef* hadc, I2C_HandleTypeDef *hi2c,
											uint16_t waittime, uint16_t* last_time_watered,
											uint16_t LCD16x2_ADDR, RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate){
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b098      	sub	sp, #96	; 0x60
 80014a0:	af06      	add	r7, sp, #24
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	807b      	strh	r3, [r7, #2]
	uint8_t send_message[ARRAYSIZE] = {0};
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2229      	movs	r2, #41	; 0x29
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 f964 	bl	8006784 <memset>
	uint16_t adc_value = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	HAL_StatusTypeDef returnmessage = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	float voltage;

//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	sprintf((char *) send_message, "Leaving Stop-Mode!\r\n");
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4987      	ldr	r1, [pc, #540]	; (80016ec <timer_interrupt_handler+0x250>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fdc0 	bl	8007054 <siprintf>
	HAL_UART_Transmit(huart, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe fe51 	bl	8000180 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f107 0114 	add.w	r1, r7, #20
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f004 fbdf 	bl	8005cae <HAL_UART_Transmit>


	  //Get Voltage from Moisture Sensor
	  if(HAL_ADC_Start(hadc) != HAL_OK){
 80014f0:	68b8      	ldr	r0, [r7, #8]
 80014f2:	f001 fb01 	bl	8002af8 <HAL_ADC_Start>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <timer_interrupt_handler+0x8c>
		  sprintf((char *) send_message, "ADC not OK!\r\n");
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	497b      	ldr	r1, [pc, #492]	; (80016f0 <timer_interrupt_handler+0x254>)
 8001502:	4618      	mov	r0, r3
 8001504:	f005 fda6 	bl	8007054 <siprintf>
		  HAL_UART_Transmit(huart, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fe37 	bl	8000180 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 0114 	add.w	r1, r7, #20
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f004 fbc5 	bl	8005cae <HAL_UART_Transmit>
		  return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0dd      	b.n	80016e4 <timer_interrupt_handler+0x248>
	  }
	  else{
		  returnmessage = HAL_ADC_PollForConversion(hadc, 2*1000);
 8001528:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800152c:	68b8      	ldr	r0, [r7, #8]
 800152e:	f001 fb43 	bl	8002bb8 <HAL_ADC_PollForConversion>
 8001532:	4603      	mov	r3, r0
 8001534:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		  if (returnmessage == HAL_OK){
 8001538:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800153c:	2b00      	cmp	r3, #0
 800153e:	d140      	bne.n	80015c2 <timer_interrupt_handler+0x126>
			  adc_value = HAL_ADC_GetValue(hadc);
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	f001 fbc9 	bl	8002cd8 <HAL_ADC_GetValue>
 8001546:	4603      	mov	r3, r0
 8001548:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			  voltage = (adc_value / 4096.0f) * 3.3f;
 800154c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fb6b 	bl	8000c2c <__aeabi_i2f>
 8001556:	4603      	mov	r3, r0
 8001558:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fc6d 	bl	8000e3c <__aeabi_fdiv>
 8001562:	4603      	mov	r3, r0
 8001564:	4963      	ldr	r1, [pc, #396]	; (80016f4 <timer_interrupt_handler+0x258>)
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbb4 	bl	8000cd4 <__aeabi_fmul>
 800156c:	4603      	mov	r3, r0
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
			  sprintf((char *)send_message, "Voltage:\t\r\n%lfV\r\n", voltage);
 8001570:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001572:	f7fe ff71 	bl	8000458 <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	f107 0014 	add.w	r0, r7, #20
 800157e:	495e      	ldr	r1, [pc, #376]	; (80016f8 <timer_interrupt_handler+0x25c>)
 8001580:	f005 fd68 	bl	8007054 <siprintf>
			  HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fdf9 	bl	8000180 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	f107 0114 	add.w	r1, r7, #20
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f004 fb87 	bl	8005cae <HAL_UART_Transmit>
			  send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fdeb 	bl	8000180 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3b02      	subs	r3, #2
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015b6:	f107 0114 	add.w	r1, r7, #20
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fed4 	bl	8001368 <send_to_display>
 80015c0:	e015      	b.n	80015ee <timer_interrupt_handler+0x152>
		  }
		  else{
			  sprintf((char *)send_message,"Error! ADC returned: 0x%x\r\n", returnmessage);
 80015c2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	494c      	ldr	r1, [pc, #304]	; (80016fc <timer_interrupt_handler+0x260>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 fd41 	bl	8007054 <siprintf>
			  HAL_UART_Transmit(huart, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe fdd2 	bl	8000180 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 0114 	add.w	r1, r7, #20
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f004 fb60 	bl	8005cae <HAL_UART_Transmit>

	  /* Logic to power pump on low moisture voltage. Also don't water to often :)
	   *
	   * Moisture ~ 1/U
	   */
	  if(voltage > MIN_MOISTURE_VOLTAGE && !should_water((uint16_t*) last_time_watered, (uint16_t) waittime, hrtc, sTime, sDate)){
 80015ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015f4:	f7ff fd2a 	bl	800104c <__aeabi_fcmpgt>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d071      	beq.n	80016e2 <timer_interrupt_handler+0x246>
 80015fe:	887d      	ldrh	r5, [r7, #2]
 8001600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001602:	9304      	str	r3, [sp, #16]
 8001604:	466c      	mov	r4, sp
 8001606:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800160a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001612:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001614:	4629      	mov	r1, r5
 8001616:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001618:	f000 f977 	bl	800190a <should_water>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d15f      	bne.n	80016e2 <timer_interrupt_handler+0x246>
		  //start pump, also led for debugging reasons
		  HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	4836      	ldr	r0, [pc, #216]	; (8001700 <timer_interrupt_handler+0x264>)
 8001628:	f002 f846 	bl	80036b8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2120      	movs	r1, #32
 8001630:	4833      	ldr	r0, [pc, #204]	; (8001700 <timer_interrupt_handler+0x264>)
 8001632:	f002 f841 	bl	80036b8 <HAL_GPIO_WritePin>

		  sprintf((char *)send_message, "Pump: ON\r\n\n");
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4932      	ldr	r1, [pc, #200]	; (8001704 <timer_interrupt_handler+0x268>)
 800163c:	4618      	mov	r0, r3
 800163e:	f005 fd09 	bl	8007054 <siprintf>
		  HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fd9a 	bl	8000180 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	f107 0114 	add.w	r1, r7, #20
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f004 fb28 	bl	8005cae <HAL_UART_Transmit>
		  send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-3, LCD16x2_ADDR);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fd8c 	bl	8000180 <strlen>
 8001668:	4603      	mov	r3, r0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3b03      	subs	r3, #3
 800166e:	b2da      	uxtb	r2, r3
 8001670:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001674:	f107 0114 	add.w	r1, r7, #20
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fe75 	bl	8001368 <send_to_display>

		  HAL_Delay(1000 * TIMEPUMPISRUNNING_IN_S);
 800167e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001682:	f001 f8c3 	bl	800280c <HAL_Delay>

		  //stop pump
		  HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2140      	movs	r1, #64	; 0x40
 800168a:	481d      	ldr	r0, [pc, #116]	; (8001700 <timer_interrupt_handler+0x264>)
 800168c:	f002 f814 	bl	80036b8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2120      	movs	r1, #32
 8001694:	481a      	ldr	r0, [pc, #104]	; (8001700 <timer_interrupt_handler+0x264>)
 8001696:	f002 f80f 	bl	80036b8 <HAL_GPIO_WritePin>

		  sprintf((char *)send_message, "Pump: OFF\r\n\n");
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	491a      	ldr	r1, [pc, #104]	; (8001708 <timer_interrupt_handler+0x26c>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 fcd7 	bl	8007054 <siprintf>
		  HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fd68 	bl	8000180 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	f107 0114 	add.w	r1, r7, #20
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f004 faf6 	bl	8005cae <HAL_UART_Transmit>
		  send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-3, LCD16x2_ADDR);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fd5a 	bl	8000180 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	3b03      	subs	r3, #3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80016d8:	f107 0114 	add.w	r1, r7, #20
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fe43 	bl	8001368 <send_to_display>
	  }

	  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3748      	adds	r7, #72	; 0x48
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdb0      	pop	{r4, r5, r7, pc}
 80016ec:	08009560 	.word	0x08009560
 80016f0:	08009578 	.word	0x08009578
 80016f4:	40533333 	.word	0x40533333
 80016f8:	08009588 	.word	0x08009588
 80016fc:	0800959c 	.word	0x0800959c
 8001700:	40020000 	.word	0x40020000
 8001704:	080095b8 	.word	0x080095b8
 8001708:	080095c4 	.word	0x080095c4

0800170c <uart_interrupt_handler>:

HAL_StatusTypeDef uart_interrupt_handler(char uart_message, UART_HandleTypeDef* huart, I2C_HandleTypeDef* hi2c, uint16_t LCD16x2_ADDR){
 800170c:	b580      	push	{r7, lr}
 800170e:	b090      	sub	sp, #64	; 0x40
 8001710:	af00      	add	r7, sp, #0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	4613      	mov	r3, r2
 800171e:	81bb      	strh	r3, [r7, #12]
	uint8_t send_message[ARRAYSIZE] = {0};
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2229      	movs	r2, #41	; 0x29
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f005 f829 	bl	8006784 <memset>

	if(uart_message == 'y'){
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b79      	cmp	r3, #121	; 0x79
 8001736:	d12d      	bne.n	8001794 <uart_interrupt_handler+0x88>
		HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_SET);
 8001738:	2201      	movs	r2, #1
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	4852      	ldr	r0, [pc, #328]	; (8001888 <uart_interrupt_handler+0x17c>)
 800173e:	f001 ffbb 	bl	80036b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2120      	movs	r1, #32
 8001746:	4850      	ldr	r0, [pc, #320]	; (8001888 <uart_interrupt_handler+0x17c>)
 8001748:	f001 ffb6 	bl	80036b8 <HAL_GPIO_WritePin>
		sprintf((char *) send_message, "Pump: on\r\n");
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	494e      	ldr	r1, [pc, #312]	; (800188c <uart_interrupt_handler+0x180>)
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fc7e 	bl	8007054 <siprintf>
		HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fd0f 	bl	8000180 <strlen>
 8001762:	4603      	mov	r3, r0
 8001764:	b29a      	uxth	r2, r3
 8001766:	f107 0110 	add.w	r1, r7, #16
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f004 fa9d 	bl	8005cae <HAL_UART_Transmit>
		send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd01 	bl	8000180 <strlen>
 800177e:	4603      	mov	r3, r0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3b02      	subs	r3, #2
 8001784:	b2da      	uxtb	r2, r3
 8001786:	89bb      	ldrh	r3, [r7, #12]
 8001788:	f107 0110 	add.w	r1, r7, #16
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fdeb 	bl	8001368 <send_to_display>
 8001792:	e074      	b.n	800187e <uart_interrupt_handler+0x172>
	}
	else if (uart_message == 'n'){
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b6e      	cmp	r3, #110	; 0x6e
 8001798:	d12d      	bne.n	80017f6 <uart_interrupt_handler+0xea>
		HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2140      	movs	r1, #64	; 0x40
 800179e:	483a      	ldr	r0, [pc, #232]	; (8001888 <uart_interrupt_handler+0x17c>)
 80017a0:	f001 ff8a 	bl	80036b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2120      	movs	r1, #32
 80017a8:	4837      	ldr	r0, [pc, #220]	; (8001888 <uart_interrupt_handler+0x17c>)
 80017aa:	f001 ff85 	bl	80036b8 <HAL_GPIO_WritePin>
		sprintf((char *)send_message, "Pump: off\r\n");
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4937      	ldr	r1, [pc, #220]	; (8001890 <uart_interrupt_handler+0x184>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 fc4d 	bl	8007054 <siprintf>
		HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fcde 	bl	8000180 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f107 0110 	add.w	r1, r7, #16
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	68b8      	ldr	r0, [r7, #8]
 80017d2:	f004 fa6c 	bl	8005cae <HAL_UART_Transmit>
		send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fcd0 	bl	8000180 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3b02      	subs	r3, #2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	89bb      	ldrh	r3, [r7, #12]
 80017ea:	f107 0110 	add.w	r1, r7, #16
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fdba 	bl	8001368 <send_to_display>
 80017f4:	e043      	b.n	800187e <uart_interrupt_handler+0x172>
	}
	else{
		HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4823      	ldr	r0, [pc, #140]	; (8001888 <uart_interrupt_handler+0x17c>)
 80017fc:	f001 ff5c 	bl	80036b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2120      	movs	r1, #32
 8001804:	4820      	ldr	r0, [pc, #128]	; (8001888 <uart_interrupt_handler+0x17c>)
 8001806:	f001 ff57 	bl	80036b8 <HAL_GPIO_WritePin>
		sprintf((char *)send_message, "Couldn't recognize command.\r\n");
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4921      	ldr	r1, [pc, #132]	; (8001894 <uart_interrupt_handler+0x188>)
 8001810:	4618      	mov	r0, r3
 8001812:	f005 fc1f 	bl	8007054 <siprintf>
		HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fcb0 	bl	8000180 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	f107 0110 	add.w	r1, r7, #16
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	68b8      	ldr	r0, [r7, #8]
 800182e:	f004 fa3e 	bl	8005cae <HAL_UART_Transmit>
		sprintf((char *)send_message, "Received: %d, Pump: off\r\n", uart_message);
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4917      	ldr	r1, [pc, #92]	; (8001898 <uart_interrupt_handler+0x18c>)
 800183a:	4618      	mov	r0, r3
 800183c:	f005 fc0a 	bl	8007054 <siprintf>
		HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fc9b 	bl	8000180 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	f107 0110 	add.w	r1, r7, #16
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	68b8      	ldr	r0, [r7, #8]
 8001858:	f004 fa29 	bl	8005cae <HAL_UART_Transmit>
		send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fc8d 	bl	8000180 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	3b02      	subs	r3, #2
 800186c:	b2da      	uxtb	r2, r3
 800186e:	89bb      	ldrh	r3, [r7, #12]
 8001870:	f107 0110 	add.w	r1, r7, #16
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fd77 	bl	8001368 <send_to_display>
		return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <uart_interrupt_handler+0x174>
	}

	  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3740      	adds	r7, #64	; 0x40
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40020000 	.word	0x40020000
 800188c:	080095d4 	.word	0x080095d4
 8001890:	080095e0 	.word	0x080095e0
 8001894:	080095ec 	.word	0x080095ec
 8001898:	0800960c 	.word	0x0800960c

0800189c <get_time_in_int>:
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
	sprintf(string, "%02d:%02d:%02d:%02d", sDate.WeekDay, sTime.Hours, sTime.Minutes, sTime.Seconds);	//without milliseconds
}

void get_time_in_int(uint16_t* time, RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate){
 800189c:	b082      	sub	sp, #8
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
 80018a8:	f107 0110 	add.w	r1, r7, #16
 80018ac:	e881 000c 	stmia.w	r1, {r2, r3}
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f107 0110 	add.w	r1, r7, #16
 80018b6:	6838      	ldr	r0, [r7, #0]
 80018b8:	f003 fefd 	bl	80056b6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	6838      	ldr	r0, [r7, #0]
 80018c6:	f003 fff1 	bl	80058ac <HAL_RTC_GetDate>
	*time = sTime.Seconds + sTime.Minutes*60 + sTime.Hours*60*60;
 80018ca:	7cbb      	ldrb	r3, [r7, #18]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	7c3b      	ldrb	r3, [r7, #16]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4619      	mov	r1, r3
 80018d4:	0109      	lsls	r1, r1, #4
 80018d6:	1acb      	subs	r3, r1, r3
 80018d8:	4619      	mov	r1, r3
 80018da:	0109      	lsls	r1, r1, #4
 80018dc:	1acb      	subs	r3, r1, r3
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	b299      	uxth	r1, r3
 80018e2:	7c7b      	ldrb	r3, [r7, #17]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	0100      	lsls	r0, r0, #4
 80018ea:	1ac3      	subs	r3, r0, r3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	440b      	add	r3, r1
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	801a      	strh	r2, [r3, #0]
	// maybe weekday and month have also be added or rtc reset after some time
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001906:	b002      	add	sp, #8
 8001908:	4770      	bx	lr

0800190a <should_water>:

int should_water(uint16_t* previous_time, uint16_t waittime, RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate){
 800190a:	b082      	sub	sp, #8
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af04      	add	r7, sp, #16
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001918:	460b      	mov	r3, r1
 800191a:	817b      	strh	r3, [r7, #10]
	uint16_t* currenttime=0;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f003 fec4 	bl	80056b6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 800192e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f003 ffb8 	bl	80058ac <HAL_RTC_GetDate>

	get_time_in_int((uint16_t*) currenttime, hrtc, sTime, sDate);
 800193c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193e:	9303      	str	r3, [sp, #12]
 8001940:	466c      	mov	r4, sp
 8001942:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001946:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800194a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	cb0c      	ldmia	r3, {r2, r3}
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ffa0 	bl	800189c <get_time_in_int>

	if(*previous_time + waittime > *currenttime) return 1;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	4413      	add	r3, r2
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	4293      	cmp	r3, r2
 800196c:	dd01      	ble.n	8001972 <should_water+0x68>
 800196e:	2301      	movs	r3, #1
 8001970:	e010      	b.n	8001994 <should_water+0x8a>
//	else if(sTime.Hours>20) return 0; //dont't water after 20:00. Real time has to be initialized
	else {
		get_time_in_int(previous_time, hrtc, sTime, sDate); // write current time in variable previous_time
 8001972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001974:	9303      	str	r3, [sp, #12]
 8001976:	466c      	mov	r4, sp
 8001978:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800197c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	cb0c      	ldmia	r3, {r2, r3}
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff ff85 	bl	800189c <get_time_in_int>
		return 0;
 8001992:	2300      	movs	r3, #0
	}
}
 8001994:	4618      	mov	r0, r3
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800199e:	b002      	add	sp, #8
 80019a0:	4770      	bx	lr

080019a2 <clear_screen>:

HAL_StatusTypeDef clear_screen(I2C_HandleTypeDef *hi2c, uint16_t LCD16x2_ADDR){
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af02      	add	r7, sp, #8
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	807b      	strh	r3, [r7, #2]
	  uint8_t send_message[] = {LCD_CLR};
 80019ae:	2360      	movs	r3, #96	; 0x60
 80019b0:	733b      	strb	r3, [r7, #12]
	  if(HAL_I2C_Master_Transmit(hi2c, LCD16x2_ADDR , send_message, 1, HAL_MAX_DELAY) != HAL_OK) return HAL_ERROR;
 80019b2:	f107 020c 	add.w	r2, r7, #12
 80019b6:	8879      	ldrh	r1, [r7, #2]
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f001 ffd5 	bl	8003970 <HAL_I2C_Master_Transmit>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <clear_screen+0x2e>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <clear_screen+0x30>
	  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Interrupt Handler for serial Connection with PC for manually control pump, can't trigger exti-interrupt to wake up currently. Only nvic
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08e      	sub	sp, #56	; 0x38
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	uint8_t send_message[ARRAYSIZE] = {0};
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2229      	movs	r2, #41	; 0x29
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 fec7 	bl	8006784 <memset>
	SystemClock_Config ();
 80019f6:	f000 fa3b 	bl	8001e70 <SystemClock_Config>
	HAL_ResumeTick();
 80019fa:	f000 ff29 	bl	8002850 <HAL_ResumeTick>
	if(mode==UNKNOWN){
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_UART_RxCpltCallback+0x6c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b07      	cmp	r3, #7
 8001a04:	d103      	bne.n	8001a0e <HAL_UART_RxCpltCallback+0x32>
		mode=KEYBOARD_INTERRUPT;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_UART_RxCpltCallback+0x6c>)
 8001a08:	2205      	movs	r2, #5
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e013      	b.n	8001a36 <HAL_UART_RxCpltCallback+0x5a>
	}
	else{
		sprintf((char *) send_message, "Try again!\r\n");
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	490e      	ldr	r1, [pc, #56]	; (8001a4c <HAL_UART_RxCpltCallback+0x70>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f005 fb1d 	bl	8007054 <siprintf>
		HAL_UART_Transmit(&huart2, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fbae 	bl	8000180 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0108 	add.w	r1, r7, #8
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <HAL_UART_RxCpltCallback+0x74>)
 8001a32:	f004 f93c 	bl	8005cae <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart2, receive_message_buf, sizeof(receive_message_buf));
 8001a36:	2201      	movs	r2, #1
 8001a38:	4906      	ldr	r1, [pc, #24]	; (8001a54 <HAL_UART_RxCpltCallback+0x78>)
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_UART_RxCpltCallback+0x74>)
 8001a3c:	f004 f9c9 	bl	8005dd2 <HAL_UART_Receive_IT>
}
 8001a40:	bf00      	nop
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	0800963c 	.word	0x0800963c
 8001a50:	200002cc 	.word	0x200002cc
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RTCEx_WakeUpTimerEventCallback>:


//Interrupt Handler for RTC WakeUp
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8001a60:	f000 fa06 	bl	8001e70 <SystemClock_Config>
	HAL_ResumeTick();
 8001a64:	f000 fef4 	bl	8002850 <HAL_ResumeTick>
	if(mode==UNKNOWN) mode=TIMER_INTERRUPT;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d102      	bne.n	8001a76 <HAL_RTCEx_WakeUpTimerEventCallback+0x1e>
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	b0a7      	sub	sp, #156	; 0x9c
 8001a88:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	uint8_t send_message[ARRAYSIZE] = {0};
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a92:	2229      	movs	r2, #41	; 0x29
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 fe74 	bl	8006784 <memset>
	HAL_StatusTypeDef returnmessage = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint16_t waittime = TIMEAFTERWATERING_IN_MIN * 1000 * 60;
 8001aa2:	f247 5330 	movw	r3, #30000	; 0x7530
 8001aa6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aaa:	f000 fe40 	bl	800272e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aae:	f000 f9df 	bl	8001e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab2:	f000 fb57 	bl	8002164 <MX_GPIO_Init>
  MX_ADC_Init();
 8001ab6:	f000 fa3f 	bl	8001f38 <MX_ADC_Init>
  MX_I2C1_Init();
 8001aba:	f000 fa95 	bl	8001fe8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001abe:	f000 fb27 	bl	8002110 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001ac2:	f000 fabf 	bl	8002044 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_UART_Receive_IT(&huart2, receive_message_buf, sizeof(receive_message_buf)) != HAL_OK) {
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	49a0      	ldr	r1, [pc, #640]	; (8001d4c <main+0x2c8>)
 8001aca:	48a1      	ldr	r0, [pc, #644]	; (8001d50 <main+0x2cc>)
 8001acc:	f004 f981 	bl	8005dd2 <HAL_UART_Receive_IT>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d013      	beq.n	8001afe <main+0x7a>
    	sprintf((char *) send_message, "Error UART IT!\r\n");
 8001ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ada:	499e      	ldr	r1, [pc, #632]	; (8001d54 <main+0x2d0>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f005 fab9 	bl	8007054 <siprintf>
    	HAL_UART_Transmit(&huart2, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 8001ae2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fb4a 	bl	8000180 <strlen>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	4895      	ldr	r0, [pc, #596]	; (8001d50 <main+0x2cc>)
 8001afa:	f004 f8d8 	bl	8005cae <HAL_UART_Transmit>
//	  }
//
//	  HAL_Delay(100);
//
//	  //LCD_Write test message
	  char* test = "uC is running!";
 8001afe:	4b96      	ldr	r3, [pc, #600]	; (8001d58 <main+0x2d4>)
 8001b00:	66bb      	str	r3, [r7, #104]	; 0x68
	  returnmessage = send_to_display(&hi2c1, test, strlen((char *) test), LCD16x2_ADDR);
 8001b02:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001b04:	f7fe fb3c 	bl	8000180 <strlen>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	2360      	movs	r3, #96	; 0x60
 8001b0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b10:	4892      	ldr	r0, [pc, #584]	; (8001d5c <main+0x2d8>)
 8001b12:	f7ff fc29 	bl	8001368 <send_to_display>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if(returnmessage != HAL_OK){
 8001b1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <main+0xcc>
		  sprintf((char *)send_message,"Error write: 0x%x\r\n", returnmessage);
 8001b24:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001b28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b2c:	498c      	ldr	r1, [pc, #560]	; (8001d60 <main+0x2dc>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f005 fa90 	bl	8007054 <siprintf>
		  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8001b34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fb21 	bl	8000180 <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	4881      	ldr	r0, [pc, #516]	; (8001d50 <main+0x2cc>)
 8001b4c:	f004 f8af 	bl	8005cae <HAL_UART_Transmit>
//		sprintf((char*) send_message, "%02d:%02d:%02d:%02d", sDate.WeekDay, sTime.Hours, sTime.Minutes, sTime.Seconds);
//		send_to_display(&hi2c1, send_message, strlen((char *) send_message), LCD16x2_ADDR);
//		HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
//		HAL_Delay(100);

	  if(!should_water(&last_time_watered, (uint16_t) waittime, &hrtc, sTime, sDate)){
 8001b50:	4d84      	ldr	r5, [pc, #528]	; (8001d64 <main+0x2e0>)
 8001b52:	f8b7 606c 	ldrh.w	r6, [r7, #108]	; 0x6c
 8001b56:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <main+0x2e4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	9304      	str	r3, [sp, #16]
 8001b5c:	466c      	mov	r4, sp
 8001b5e:	1d2b      	adds	r3, r5, #4
 8001b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b66:	682b      	ldr	r3, [r5, #0]
 8001b68:	4a80      	ldr	r2, [pc, #512]	; (8001d6c <main+0x2e8>)
 8001b6a:	4631      	mov	r1, r6
 8001b6c:	4880      	ldr	r0, [pc, #512]	; (8001d70 <main+0x2ec>)
 8001b6e:	f7ff fecc 	bl	800190a <should_water>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d114      	bne.n	8001ba2 <main+0x11e>
		  sprintf((char *)send_message,"Watering!!!!\r\n");
 8001b78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b7c:	497d      	ldr	r1, [pc, #500]	; (8001d74 <main+0x2f0>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 fa68 	bl	8007054 <siprintf>
		  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8001b84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe faf9 	bl	8000180 <strlen>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	486d      	ldr	r0, [pc, #436]	; (8001d50 <main+0x2cc>)
 8001b9c:	f004 f887 	bl	8005cae <HAL_UART_Transmit>
 8001ba0:	e016      	b.n	8001bd0 <main+0x14c>
	  }
	  else{
		  sprintf((char *)send_message,"Water time: %d\r\n", last_time_watered);
 8001ba2:	4b73      	ldr	r3, [pc, #460]	; (8001d70 <main+0x2ec>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bac:	4972      	ldr	r1, [pc, #456]	; (8001d78 <main+0x2f4>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 fa50 	bl	8007054 <siprintf>
		  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8001bb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fae1 	bl	8000180 <strlen>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	4861      	ldr	r0, [pc, #388]	; (8001d50 <main+0x2cc>)
 8001bcc:	f004 f86f 	bl	8005cae <HAL_UART_Transmit>
	  }

	  //Check if Flag was set and which one
	  // On first run this sequence is run, to ensure connection to display
	  if(mode==FIRST_BOOT){
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <main+0x2f8>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b06      	cmp	r3, #6
 8001bd6:	d16f      	bne.n	8001cb8 <main+0x234>
		  sprintf((char *) send_message, "Controller was restarted or firstly booted\r\n");
 8001bd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bdc:	4968      	ldr	r1, [pc, #416]	; (8001d80 <main+0x2fc>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fa38 	bl	8007054 <siprintf>
		  HAL_UART_Transmit(&huart2, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 8001be4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fac9 	bl	8000180 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	4855      	ldr	r0, [pc, #340]	; (8001d50 <main+0x2cc>)
 8001bfc:	f004 f857 	bl	8005cae <HAL_UART_Transmit>

		  ////LCD16x2 get ID to ensure that display is connected correctly, doesn't work on first run??
		  send_message[0] = GET_ID;
 8001c00:	2320      	movs	r3, #32
 8001c02:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

		  returnmessage = HAL_I2C_Master_Transmit(&hi2c1, LCD16x2_ADDR , send_message, 1, HAL_MAX_DELAY);
 8001c06:	2160      	movs	r1, #96	; 0x60
 8001c08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	4851      	ldr	r0, [pc, #324]	; (8001d5c <main+0x2d8>)
 8001c16:	f001 feab 	bl	8003970 <HAL_I2C_Master_Transmit>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		  if(returnmessage != HAL_OK){
 8001c20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <main+0x1b6>
			  sprintf((char *)send_message,"Error ID Tx: 0x%x\r\n", returnmessage);
 8001c28:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c30:	4954      	ldr	r1, [pc, #336]	; (8001d84 <main+0x300>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f005 fa0e 	bl	8007054 <siprintf>
 8001c38:	e02f      	b.n	8001c9a <main+0x216>
		  }
		  else{
			  returnmessage = HAL_I2C_Master_Receive(&hi2c1, LCD16x2_ADDR, send_message, 1, HAL_MAX_DELAY);
 8001c3a:	2160      	movs	r1, #96	; 0x60
 8001c3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	4844      	ldr	r0, [pc, #272]	; (8001d5c <main+0x2d8>)
 8001c4a:	f001 ff8f 	bl	8003b6c <HAL_I2C_Master_Receive>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			  if(returnmessage != HAL_OK) sprintf((char *)send_message,"Error ID Rx: 0x%x\r\n", returnmessage);
 8001c54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <main+0x1e8>
 8001c5c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001c60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c64:	4948      	ldr	r1, [pc, #288]	; (8001d88 <main+0x304>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 f9f4 	bl	8007054 <siprintf>
			  if(send_message[0]==0x65) sprintf((char *)send_message,"Display connected correct. LCD-ID: 0x%x\r\n", send_message[0]);
 8001c6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c70:	2b65      	cmp	r3, #101	; 0x65
 8001c72:	d109      	bne.n	8001c88 <main+0x204>
 8001c74:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c7e:	4943      	ldr	r1, [pc, #268]	; (8001d8c <main+0x308>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f005 f9e7 	bl	8007054 <siprintf>
 8001c86:	e008      	b.n	8001c9a <main+0x216>
			  else sprintf((char *)send_message,"Display connected incorrect. LCD-ID: 0x%x\r\n", send_message[0]);
 8001c88:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c92:	493f      	ldr	r1, [pc, #252]	; (8001d90 <main+0x30c>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f005 f9dd 	bl	8007054 <siprintf>
		  }
		  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8001c9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fa6e 	bl	8000180 <strlen>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	4827      	ldr	r0, [pc, #156]	; (8001d50 <main+0x2cc>)
 8001cb2:	f003 fffc 	bl	8005cae <HAL_UART_Transmit>
 8001cb6:	e0c3      	b.n	8001e40 <main+0x3bc>

	  }
	  // Sequence for interrupt triggered by rtc-timer
	  else if(mode==TIMER_INTERRUPT){
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <main+0x2f8>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d16d      	bne.n	8001d9c <main+0x318>
		  uint8_t timebuf[ARRAYSIZE] = {0};
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2229      	movs	r2, #41	; 0x29
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 fd59 	bl	8006784 <memset>

		  returnmessage = timer_interrupt_handler(&huart2, &hadc, &hi2c1, waittime, last_time_watered, LCD16x2_ADDR, &hrtc, sTime, sDate);
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <main+0x2ec>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	2260      	movs	r2, #96	; 0x60
 8001cda:	603a      	str	r2, [r7, #0]
 8001cdc:	f8b7 606c 	ldrh.w	r6, [r7, #108]	; 0x6c
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <main+0x2e4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	9308      	str	r3, [sp, #32]
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <main+0x2e0>)
 8001ce8:	ac03      	add	r4, sp, #12
 8001cea:	461d      	mov	r5, r3
 8001cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf0:	682b      	ldr	r3, [r5, #0]
 8001cf2:	6023      	str	r3, [r4, #0]
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <main+0x2e8>)
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	9201      	str	r2, [sp, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4633      	mov	r3, r6
 8001d02:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <main+0x2d8>)
 8001d04:	4923      	ldr	r1, [pc, #140]	; (8001d94 <main+0x310>)
 8001d06:	4812      	ldr	r0, [pc, #72]	; (8001d50 <main+0x2cc>)
 8001d08:	f7ff fbc8 	bl	800149c <timer_interrupt_handler>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		  if(returnmessage != HAL_OK){
 8001d12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8092 	beq.w	8001e40 <main+0x3bc>
			  sprintf((char *)send_message,"Error timinthandl: 0x%x\r\n", returnmessage);
 8001d1c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001d20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d24:	491c      	ldr	r1, [pc, #112]	; (8001d98 <main+0x314>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 f994 	bl	8007054 <siprintf>
			  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8001d2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fa25 	bl	8000180 <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <main+0x2cc>)
 8001d44:	f003 ffb3 	bl	8005cae <HAL_UART_Transmit>
 8001d48:	e07a      	b.n	8001e40 <main+0x3bc>
 8001d4a:	bf00      	nop
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	200002cc 	.word	0x200002cc
 8001d54:	0800964c 	.word	0x0800964c
 8001d58:	08009660 	.word	0x08009660
 8001d5c:	20000258 	.word	0x20000258
 8001d60:	08009670 	.word	0x08009670
 8001d64:	20000310 	.word	0x20000310
 8001d68:	20000324 	.word	0x20000324
 8001d6c:	200002ac 	.word	0x200002ac
 8001d70:	20000200 	.word	0x20000200
 8001d74:	08009684 	.word	0x08009684
 8001d78:	08009694 	.word	0x08009694
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	080096a8 	.word	0x080096a8
 8001d84:	080096d8 	.word	0x080096d8
 8001d88:	080096ec 	.word	0x080096ec
 8001d8c:	08009700 	.word	0x08009700
 8001d90:	0800972c 	.word	0x0800972c
 8001d94:	20000204 	.word	0x20000204
 8001d98:	08009758 	.word	0x08009758
//		  send_to_display(&hi2c1, (uint16_t *) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
//		  HAL_Delay(1000);
	  }
	  // sequence triggered by buttons on lcd-display, i2c slave cannot trigger interrupt at master.
	  // Solder wire from button to gpio pin of uC to trigger interrupt that way
	  else if(mode==BUTTON_0_INTERRUPT || mode==BUTTON_1_INTERRUPT || mode==BUTTON_2_INTERRUPT || mode==BUTTON_3_INTERRUPT){
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <main+0x3d4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d04d      	beq.n	8001e40 <main+0x3bc>
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <main+0x3d4>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d049      	beq.n	8001e40 <main+0x3bc>
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <main+0x3d4>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d045      	beq.n	8001e40 <main+0x3bc>
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <main+0x3d4>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d041      	beq.n	8001e40 <main+0x3bc>
		  /*Not yet implemented*/
	  }
	  // sequence for UART interrupt, cannot wake up uC, because uses nvic not exti line
	  else if(mode==KEYBOARD_INTERRUPT){
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <main+0x3d4>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d129      	bne.n	8001e18 <main+0x394>
		  returnmessage = uart_interrupt_handler(receive_message_buf[0], &huart2, &hi2c1, LCD16x2_ADDR);
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <main+0x3d8>)
 8001dc6:	7818      	ldrb	r0, [r3, #0]
 8001dc8:	2360      	movs	r3, #96	; 0x60
 8001dca:	4a25      	ldr	r2, [pc, #148]	; (8001e60 <main+0x3dc>)
 8001dcc:	4925      	ldr	r1, [pc, #148]	; (8001e64 <main+0x3e0>)
 8001dce:	f7ff fc9d 	bl	800170c <uart_interrupt_handler>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		  if(returnmessage != HAL_OK){
 8001dd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d015      	beq.n	8001e0c <main+0x388>
			  sprintf((char *)send_message,"Error uartinthandl: 0x%x\r\n", returnmessage);
 8001de0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001de4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001de8:	491f      	ldr	r1, [pc, #124]	; (8001e68 <main+0x3e4>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 f932 	bl	8007054 <siprintf>
			  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8001df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe f9c3 	bl	8000180 <strlen>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	4817      	ldr	r0, [pc, #92]	; (8001e64 <main+0x3e0>)
 8001e08:	f003 ff51 	bl	8005cae <HAL_UART_Transmit>
		  }
		  HAL_UART_Receive_IT(&huart2, receive_message_buf, sizeof(receive_message_buf));
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4913      	ldr	r1, [pc, #76]	; (8001e5c <main+0x3d8>)
 8001e10:	4814      	ldr	r0, [pc, #80]	; (8001e64 <main+0x3e0>)
 8001e12:	f003 ffde 	bl	8005dd2 <HAL_UART_Receive_IT>
 8001e16:	e013      	b.n	8001e40 <main+0x3bc>
	  }
	  else{
		  sprintf((char *)send_message, "Something unexpected happend!\r\n");
 8001e18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e1c:	4913      	ldr	r1, [pc, #76]	; (8001e6c <main+0x3e8>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 f918 	bl	8007054 <siprintf>
		  HAL_UART_Transmit(&huart2, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001e24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe f9a9 	bl	8000180 <strlen>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	480a      	ldr	r0, [pc, #40]	; (8001e64 <main+0x3e0>)
 8001e3c:	f003 ff37 	bl	8005cae <HAL_UART_Transmit>
	  }

	  //LCD_Clear Display
	  clear_screen(&hi2c1, LCD16x2_ADDR);
 8001e40:	2360      	movs	r3, #96	; 0x60
 8001e42:	4619      	mov	r1, r3
 8001e44:	4806      	ldr	r0, [pc, #24]	; (8001e60 <main+0x3dc>)
 8001e46:	f7ff fdac 	bl	80019a2 <clear_screen>
	  HAL_Delay(100);
 8001e4a:	2064      	movs	r0, #100	; 0x64
 8001e4c:	f000 fcde 	bl	800280c <HAL_Delay>
//		  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
//	  }
//
//	  HAL_Delay(100);

	  mode=UNKNOWN; //Reset interrupt_mode typedef
 8001e50:	4b01      	ldr	r3, [pc, #4]	; (8001e58 <main+0x3d4>)
 8001e52:	2207      	movs	r2, #7
 8001e54:	701a      	strb	r2, [r3, #0]
  {
 8001e56:	e652      	b.n	8001afe <main+0x7a>
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20000258 	.word	0x20000258
 8001e64:	200002cc 	.word	0x200002cc
 8001e68:	08009774 	.word	0x08009774
 8001e6c:	08009790 	.word	0x08009790

08001e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b096      	sub	sp, #88	; 0x58
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	2234      	movs	r2, #52	; 0x34
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 fc80 	bl	8006784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <SystemClock_Config+0xc4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001ea6:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <SystemClock_Config+0xc4>)
 8001ea8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eac:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001eae:	2306      	movs	r3, #6
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eba:	2310      	movs	r3, #16
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001ec6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001eca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001ecc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001ed0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fba8 	bl	800462c <HAL_RCC_OscConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001ee2:	f000 f9db 	bl	800229c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee6:	230f      	movs	r3, #15
 8001ee8:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eea:	2303      	movs	r3, #3
 8001eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 fec3 	bl	8004c8c <HAL_RCC_ClockConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001f0c:	f000 f9c6 	bl	800229c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f10:	2301      	movs	r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f18:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f97b 	bl	8005218 <HAL_RCCEx_PeriphCLKConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001f28:	f000 f9b8 	bl	800229c <Error_Handler>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3758      	adds	r7, #88	; 0x58
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40007000 	.word	0x40007000

08001f38 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f4a:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <MX_ADC_Init+0xac>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f96:	2210      	movs	r2, #16
 8001f98:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001faa:	f000 fc5f 	bl	800286c <HAL_ADC_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001fb4:	f000 f972 	bl	800229c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_ADC_Init+0xa8>)
 8001fca:	f000 fe91 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001fd4:	f000 f962 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000204 	.word	0x20000204
 8001fe4:	40012400 	.word	0x40012400

08001fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C1_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_I2C1_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_I2C1_Init+0x58>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C1_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 96;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2C1_Init+0x50>)
 8002000:	2260      	movs	r2, #96	; 0x60
 8002002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_I2C1_Init+0x50>)
 8002006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800200a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_I2C1_Init+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_I2C1_Init+0x50>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_I2C1_Init+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_I2C1_Init+0x50>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_I2C1_Init+0x50>)
 8002026:	f001 fb5f 	bl	80036e8 <HAL_I2C_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002030:	f000 f934 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000258 	.word	0x20000258
 800203c:	40005400 	.word	0x40005400
 8002040:	000186a0 	.word	0x000186a0

08002044 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002058:	2300      	movs	r3, #0
 800205a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <MX_RTC_Init+0xc4>)
 800205e:	4a2b      	ldr	r2, [pc, #172]	; (800210c <MX_RTC_Init+0xc8>)
 8002060:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <MX_RTC_Init+0xc4>)
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <MX_RTC_Init+0xc4>)
 800206a:	227f      	movs	r2, #127	; 0x7f
 800206c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <MX_RTC_Init+0xc4>)
 8002070:	22ff      	movs	r2, #255	; 0xff
 8002072:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <MX_RTC_Init+0xc4>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <MX_RTC_Init+0xc4>)
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <MX_RTC_Init+0xc4>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002086:	4820      	ldr	r0, [pc, #128]	; (8002108 <MX_RTC_Init+0xc4>)
 8002088:	f003 f9d0 	bl	800542c <HAL_RTC_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002092:	f000 f903 	bl	800229c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002096:	2300      	movs	r3, #0
 8002098:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800209a:	2300      	movs	r3, #0
 800209c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800209e:	2300      	movs	r3, #0
 80020a0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2201      	movs	r2, #1
 80020ae:	4619      	mov	r1, r3
 80020b0:	4815      	ldr	r0, [pc, #84]	; (8002108 <MX_RTC_Init+0xc4>)
 80020b2:	f003 fa4c 	bl	800554e <HAL_RTC_SetTime>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80020bc:	f000 f8ee 	bl	800229c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020c0:	2301      	movs	r3, #1
 80020c2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80020c4:	2301      	movs	r3, #1
 80020c6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	2201      	movs	r2, #1
 80020d4:	4619      	mov	r1, r3
 80020d6:	480c      	ldr	r0, [pc, #48]	; (8002108 <MX_RTC_Init+0xc4>)
 80020d8:	f003 fb4a 	bl	8005770 <HAL_RTC_SetDate>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80020e2:	f000 f8db 	bl	800229c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, SLEEPTIME, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020e6:	2200      	movs	r2, #0
 80020e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80020ec:	4806      	ldr	r0, [pc, #24]	; (8002108 <MX_RTC_Init+0xc4>)
 80020ee:	f003 fcbb 	bl	8005a68 <HAL_RTCEx_SetWakeUpTimer_IT>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80020f8:	f000 f8d0 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_PWR_DisableSleepOnExit();
 80020fc:	f002 fa88 	bl	8004610 <HAL_PWR_DisableSleepOnExit>

  /* USER CODE END RTC_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200002ac 	.word	0x200002ac
 800210c:	40002800 	.word	0x40002800

08002110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <MX_USART2_UART_Init+0x50>)
 8002118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002148:	f003 fd64 	bl	8005c14 <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002152:	f000 f8a3 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200002cc 	.word	0x200002cc
 8002160:	40004400 	.word	0x40004400

08002164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	4b43      	ldr	r3, [pc, #268]	; (8002288 <MX_GPIO_Init+0x124>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a42      	ldr	r2, [pc, #264]	; (8002288 <MX_GPIO_Init+0x124>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b40      	ldr	r3, [pc, #256]	; (8002288 <MX_GPIO_Init+0x124>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <MX_GPIO_Init+0x124>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a3c      	ldr	r2, [pc, #240]	; (8002288 <MX_GPIO_Init+0x124>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b3a      	ldr	r3, [pc, #232]	; (8002288 <MX_GPIO_Init+0x124>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <MX_GPIO_Init+0x124>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a36      	ldr	r2, [pc, #216]	; (8002288 <MX_GPIO_Init+0x124>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b34      	ldr	r3, [pc, #208]	; (8002288 <MX_GPIO_Init+0x124>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <MX_GPIO_Init+0x124>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <MX_GPIO_Init+0x124>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <MX_GPIO_Init+0x124>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <MX_GPIO_Init+0x124>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <MX_GPIO_Init+0x124>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	61d3      	str	r3, [r2, #28]
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <MX_GPIO_Init+0x124>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Optokoppler_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2160      	movs	r1, #96	; 0x60
 80021f6:	4825      	ldr	r0, [pc, #148]	; (800228c <MX_GPIO_Init+0x128>)
 80021f8:	f001 fa5e 	bl	80036b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80021fc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8002200:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002202:	2303      	movs	r3, #3
 8002204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	481f      	ldr	r0, [pc, #124]	; (8002290 <MX_GPIO_Init+0x12c>)
 8002212:	f001 f8c1 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8
 8002216:	f649 7383 	movw	r3, #40835	; 0x9f83
 800221a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221c:	2303      	movs	r3, #3
 800221e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4818      	ldr	r0, [pc, #96]	; (800228c <MX_GPIO_Init+0x128>)
 800222c:	f001 f8b4 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Optokoppler_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Optokoppler_Pin;
 8002230:	2360      	movs	r3, #96	; 0x60
 8002232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4811      	ldr	r0, [pc, #68]	; (800228c <MX_GPIO_Init+0x128>)
 8002248:	f001 f8a6 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800224c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8002250:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002252:	2303      	movs	r3, #3
 8002254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	480c      	ldr	r0, [pc, #48]	; (8002294 <MX_GPIO_Init+0x130>)
 8002262:	f001 f899 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002266:	2304      	movs	r3, #4
 8002268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800226a:	2303      	movs	r3, #3
 800226c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_GPIO_Init+0x134>)
 800227a:	f001 f88d 	bl	8003398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40020000 	.word	0x40020000
 8002290:	40020800 	.word	0x40020800
 8002294:	40020400 	.word	0x40020400
 8002298:	40020c00 	.word	0x40020c00

0800229c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i
}
 80022a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <Error_Handler+0x8>
	...

080022a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_MspInit+0x5c>)
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_MspInit+0x5c>)
 80022b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022b8:	6253      	str	r3, [r2, #36]	; 0x24
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_MspInit+0x5c>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_MspInit+0x5c>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_MspInit+0x5c>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6213      	str	r3, [r2, #32]
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_MspInit+0x5c>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_MspInit+0x5c>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_MspInit+0x5c>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6253      	str	r3, [r2, #36]	; 0x24
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_MspInit+0x5c>)
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022f6:	2007      	movs	r0, #7
 80022f8:	f000 ff8e 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800

08002308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a15      	ldr	r2, [pc, #84]	; (800237c <HAL_ADC_MspInit+0x74>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d123      	bne.n	8002372 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_ADC_MspInit+0x78>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_ADC_MspInit+0x78>)
 8002330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_ADC_MspInit+0x78>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_ADC_MspInit+0x78>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_ADC_MspInit+0x78>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_ADC_MspInit+0x78>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800235a:	2310      	movs	r3, #16
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235e:	2303      	movs	r3, #3
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <HAL_ADC_MspInit+0x7c>)
 800236e:	f001 f813 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40012400 	.word	0x40012400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000

08002388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_I2C_MspInit+0x7c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d128      	bne.n	80023fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c8:	2312      	movs	r3, #18
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023d4:	2304      	movs	r3, #4
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	480b      	ldr	r0, [pc, #44]	; (800240c <HAL_I2C_MspInit+0x84>)
 80023e0:	f000 ffda 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ee:	6253      	str	r3, [r2, #36]	; 0x24
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_I2C_MspInit+0x80>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40005400 	.word	0x40005400
 8002408:	40023800 	.word	0x40023800
 800240c:	40020400 	.word	0x40020400

08002410 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_RTC_MspInit+0x30>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10a      	bne.n	8002438 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_RTC_MspInit+0x34>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	2003      	movs	r0, #3
 800242e:	f000 fefe 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002432:	2003      	movs	r0, #3
 8002434:	f000 ff17 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40002800 	.word	0x40002800
 8002444:	424706d8 	.word	0x424706d8

08002448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <HAL_UART_MspInit+0x8c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d12f      	bne.n	80024ca <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_UART_MspInit+0x90>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_UART_MspInit+0x90>)
 8002470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002474:	6253      	str	r3, [r2, #36]	; 0x24
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_UART_MspInit+0x90>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_MspInit+0x90>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_UART_MspInit+0x90>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_UART_MspInit+0x90>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800249a:	230c      	movs	r3, #12
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024aa:	2307      	movs	r3, #7
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4809      	ldr	r0, [pc, #36]	; (80024dc <HAL_UART_MspInit+0x94>)
 80024b6:	f000 ff6f 	bl	8003398 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2026      	movs	r0, #38	; 0x26
 80024c0:	f000 feb5 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024c4:	2026      	movs	r0, #38	; 0x26
 80024c6:	f000 fece 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3728      	adds	r7, #40	; 0x28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40004400 	.word	0x40004400
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002526:	f000 f955 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <RTC_WKUP_IRQHandler+0x10>)
 8002536:	f003 fb49 	bl	8005bcc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200002ac 	.word	0x200002ac

08002544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <USART2_IRQHandler+0x10>)
 800254a:	f003 fc73 	bl	8005e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200002cc 	.word	0x200002cc

08002558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return 1;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <_kill>:

int _kill(int pid, int sig)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002570:	f004 f8de 	bl	8006730 <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	2216      	movs	r2, #22
 8002578:	601a      	str	r2, [r3, #0]
  return -1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_exit>:

void _exit (int status)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800258e:	f04f 31ff 	mov.w	r1, #4294967295
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffe7 	bl	8002566 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002598:	e7fe      	b.n	8002598 <_exit+0x12>

0800259a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e00a      	b.n	80025c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ac:	f3af 8000 	nop.w
 80025b0:	4601      	mov	r1, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	60ba      	str	r2, [r7, #8]
 80025b8:	b2ca      	uxtb	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	dbf0      	blt.n	80025ac <_read+0x12>
  }

  return len;
 80025ca:	687b      	ldr	r3, [r7, #4]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e009      	b.n	80025fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	60ba      	str	r2, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	dbf1      	blt.n	80025e6 <_write+0x12>
  }
  return len;
 8002602:	687b      	ldr	r3, [r7, #4]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_close>:

int _close(int file)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002632:	605a      	str	r2, [r3, #4]
  return 0;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <_isatty>:

int _isatty(int file)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002648:	2301      	movs	r3, #1
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <_sbrk+0x5c>)
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <_sbrk+0x60>)
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <_sbrk+0x64>)
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <_sbrk+0x68>)
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	429a      	cmp	r2, r3
 800269a:	d207      	bcs.n	80026ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800269c:	f004 f848 	bl	8006730 <__errno>
 80026a0:	4603      	mov	r3, r0
 80026a2:	220c      	movs	r2, #12
 80026a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e009      	b.n	80026c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <_sbrk+0x64>)
 80026bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20014000 	.word	0x20014000
 80026cc:	00000400 	.word	0x00000400
 80026d0:	20000328 	.word	0x20000328
 80026d4:	20000340 	.word	0x20000340

080026d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026e6:	490d      	ldr	r1, [pc, #52]	; (800271c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026e8:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026fc:	4c0a      	ldr	r4, [pc, #40]	; (8002728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800270a:	f7ff ffe5 	bl	80026d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f004 f815 	bl	800673c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002712:	f7ff f9b7 	bl	8001a84 <main>
  bx lr
 8002716:	4770      	bx	lr
  ldr r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800271c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002720:	08009bbc 	.word	0x08009bbc
  ldr r2, =_sbss
 8002724:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002728:	20000340 	.word	0x20000340

0800272c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC1_IRQHandler>

0800272e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002738:	2003      	movs	r0, #3
 800273a:	f000 fd6d 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800273e:	2000      	movs	r0, #0
 8002740:	f000 f80e 	bl	8002760 <HAL_InitTick>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	71fb      	strb	r3, [r7, #7]
 800274e:	e001      	b.n	8002754 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002750:	f7ff fdaa 	bl	80022a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002754:	79fb      	ldrb	r3, [r7, #7]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_InitTick+0x68>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d022      	beq.n	80027ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_InitTick+0x6c>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_InitTick+0x68>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002780:	fbb1 f3f3 	udiv	r3, r1, r3
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fd7a 	bl	8003282 <HAL_SYSTICK_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10f      	bne.n	80027b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	d809      	bhi.n	80027ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279a:	2200      	movs	r2, #0
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	f04f 30ff 	mov.w	r0, #4294967295
 80027a2:	f000 fd44 	bl	800322e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_InitTick+0x70>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	e007      	b.n	80027be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	e004      	b.n	80027be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e001      	b.n	80027be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000010 	.word	0x20000010
 80027cc:	20000008 	.word	0x20000008
 80027d0:	2000000c 	.word	0x2000000c

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_IncTick+0x1c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_IncTick+0x20>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <HAL_IncTick+0x1c>)
 80027e4:	6013      	str	r3, [r2, #0]
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	2000032c 	.word	0x2000032c
 80027f4:	20000010 	.word	0x20000010

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_GetTick+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	2000032c 	.word	0x2000032c

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff fff0 	bl	80027f8 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d004      	beq.n	8002830 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_Delay+0x40>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002830:	bf00      	nop
 8002832:	f7ff ffe1 	bl	80027f8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	429a      	cmp	r2, r3
 8002840:	d8f7      	bhi.n	8002832 <HAL_Delay+0x26>
  {
  }
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000010 	.word	0x20000010

08002850 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <HAL_ResumeTick+0x18>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a03      	ldr	r2, [pc, #12]	; (8002868 <HAL_ResumeTick+0x18>)
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08e      	sub	sp, #56	; 0x38
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e127      	b.n	8002adc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d115      	bne.n	80028c6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a8:	4b8e      	ldr	r3, [pc, #568]	; (8002ae4 <HAL_ADC_Init+0x278>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4a8d      	ldr	r2, [pc, #564]	; (8002ae4 <HAL_ADC_Init+0x278>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6213      	str	r3, [r2, #32]
 80028b4:	4b8b      	ldr	r3, [pc, #556]	; (8002ae4 <HAL_ADC_Init+0x278>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff fd21 	bl	8002308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 80ff 	bne.w	8002ad2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028dc:	f023 0302 	bic.w	r3, r3, #2
 80028e0:	f043 0202 	orr.w	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80028e8:	4b7f      	ldr	r3, [pc, #508]	; (8002ae8 <HAL_ADC_Init+0x27c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	497c      	ldr	r1, [pc, #496]	; (8002ae8 <HAL_ADC_Init+0x27c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002902:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290a:	4619      	mov	r1, r3
 800290c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002910:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002926:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800292c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	2302      	movs	r3, #2
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800294e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002952:	4313      	orrs	r3, r2
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	2b10      	cmp	r3, #16
 800295c:	d007      	beq.n	800296e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002966:	4313      	orrs	r3, r2
 8002968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296a:	4313      	orrs	r3, r2
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d04f      	beq.n	8002a1c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002982:	4313      	orrs	r3, r2
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800298e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6912      	ldr	r2, [r2, #16]
 8002994:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002998:	d003      	beq.n	80029a2 <HAL_ADC_Init+0x136>
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6912      	ldr	r2, [r2, #16]
 800299e:	2a01      	cmp	r2, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_ADC_Init+0x13c>
 80029a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a6:	e000      	b.n	80029aa <HAL_ADC_Init+0x13e>
 80029a8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80029aa:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80029ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ae:	4313      	orrs	r3, r2
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d125      	bne.n	8002a08 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d114      	bne.n	80029f0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	3b01      	subs	r3, #1
 80029cc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80029d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	fa92 f2a2 	rbit	r2, r2
 80029d8:	617a      	str	r2, [r7, #20]
  return result;
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4093      	lsls	r3, r2
 80029e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ea:	4313      	orrs	r3, r2
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
 80029ee:	e00b      	b.n	8002a08 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_ADC_Init+0x280>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <HAL_ADC_Init+0x284>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d003      	beq.n	8002a42 <HAL_ADC_Init+0x1d6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d119      	bne.n	8002a76 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002a56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	fa92 f2a2 	rbit	r2, r2
 8002a5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	fa03 f202 	lsl.w	r2, r3, r2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
 8002a74:	e007      	b.n	8002a86 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_ADC_Init+0x288>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d10b      	bne.n	8002aae <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	f023 0303 	bic.w	r3, r3, #3
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8002aac:	e014      	b.n	8002ad8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	f023 0312 	bic.w	r3, r3, #18
 8002ab6:	f043 0210 	orr.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ad0:	e002      	b.n	8002ad8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3738      	adds	r7, #56	; 0x38
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40012700 	.word	0x40012700
 8002aec:	fcfc16ff 	.word	0xfcfc16ff
 8002af0:	c0fff189 	.word	0xc0fff189
 8002af4:	bf80fffe 	.word	0xbf80fffe

08002af8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Start+0x1a>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e04e      	b.n	8002bb0 <HAL_ADC_Start+0xb8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa54 	bl	8002fc8 <ADC_Enable>
 8002b20:	4603      	mov	r3, r0
 8002b22:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d141      	bne.n	8002bae <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d106      	bne.n	8002b78 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	f023 0206 	bic.w	r2, r3, #6
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	651a      	str	r2, [r3, #80]	; 0x50
 8002b76:	e002      	b.n	8002b7e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b8e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bac:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd4:	d113      	bne.n	8002bfe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be4:	d10b      	bne.n	8002bfe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	f043 0220 	orr.w	r2, r3, #32
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e068      	b.n	8002cd0 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002bfe:	f7ff fdfb 	bl	80027f8 <HAL_GetTick>
 8002c02:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c04:	e021      	b.n	8002c4a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d01d      	beq.n	8002c4a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <HAL_ADC_PollForConversion+0x6c>
 8002c14:	f7ff fdf0 	bl	80027f8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d212      	bcs.n	8002c4a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10b      	bne.n	8002c4a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	f043 0204 	orr.w	r2, r3, #4
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e042      	b.n	8002cd0 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0d6      	beq.n	8002c06 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0212 	mvn.w	r2, #18
 8002c68:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d124      	bne.n	8002cce <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11f      	bne.n	8002cce <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d111      	bne.n	8002cce <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x20>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e14f      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x2c0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d81c      	bhi.n	8002d5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b05      	subs	r3, #5
 8002d32:	221f      	movs	r2, #31
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	4019      	ands	r1, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b05      	subs	r3, #5
 8002d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
 8002d58:	e07e      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d81c      	bhi.n	8002d9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	3b23      	subs	r3, #35	; 0x23
 8002d74:	221f      	movs	r2, #31
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	4019      	ands	r1, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b23      	subs	r3, #35	; 0x23
 8002d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d9a:	e05d      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b12      	cmp	r3, #18
 8002da2:	d81c      	bhi.n	8002dde <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	3b41      	subs	r3, #65	; 0x41
 8002db6:	221f      	movs	r2, #31
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	4019      	ands	r1, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b41      	subs	r3, #65	; 0x41
 8002dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
 8002ddc:	e03c      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b18      	cmp	r3, #24
 8002de4:	d81c      	bhi.n	8002e20 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	3b5f      	subs	r3, #95	; 0x5f
 8002df8:	221f      	movs	r2, #31
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	4019      	ands	r1, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b5f      	subs	r3, #95	; 0x5f
 8002e12:	fa00 f203 	lsl.w	r2, r0, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1e:	e01b      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	3b7d      	subs	r3, #125	; 0x7d
 8002e32:	221f      	movs	r2, #31
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4019      	ands	r1, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b7d      	subs	r3, #125	; 0x7d
 8002e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	d81a      	bhi.n	8002e96 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6959      	ldr	r1, [r3, #20]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	2207      	movs	r2, #7
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	4019      	ands	r1, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6898      	ldr	r0, [r3, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	615a      	str	r2, [r3, #20]
 8002e94:	e05d      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b13      	cmp	r3, #19
 8002e9c:	d81c      	bhi.n	8002ed8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	3b1e      	subs	r3, #30
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	4019      	ands	r1, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6898      	ldr	r0, [r3, #8]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b1e      	subs	r3, #30
 8002eca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e03c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b1d      	cmp	r3, #29
 8002ede:	d81c      	bhi.n	8002f1a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68d9      	ldr	r1, [r3, #12]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b3c      	subs	r3, #60	; 0x3c
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	4019      	ands	r1, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6898      	ldr	r0, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b3c      	subs	r3, #60	; 0x3c
 8002f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	e01b      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	3b5a      	subs	r3, #90	; 0x5a
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4019      	ands	r1, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6898      	ldr	r0, [r3, #8]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	3b5a      	subs	r3, #90	; 0x5a
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d003      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f5e:	2b11      	cmp	r3, #17
 8002f60:	d121      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_ADC_ConfigChannel+0x2cc>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11b      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_ADC_ConfigChannel+0x2cc>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_ADC_ConfigChannel+0x2cc>)
 8002f74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f78:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d111      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <HAL_ADC_ConfigChannel+0x2d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	0c9a      	lsrs	r2, r3, #18
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002f98:	e002      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f9      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40012700 	.word	0x40012700
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	431bde83 	.word	0x431bde83

08002fc8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d043      	beq.n	800306e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <ADC_Enable+0xb0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a20      	ldr	r2, [pc, #128]	; (800307c <ADC_Enable+0xb4>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	0c9a      	lsrs	r2, r3, #18
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800300a:	e002      	b.n	8003012 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3b01      	subs	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8003018:	f7ff fbee 	bl	80027f8 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800301e:	e01f      	b.n	8003060 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8003020:	f7ff fbea 	bl	80027f8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d918      	bls.n	8003060 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d011      	beq.n	8003060 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003040:	f043 0210 	orr.w	r2, r3, #16
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e007      	b.n	8003070 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d1d8      	bne.n	8003020 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000008 	.word	0x20000008
 800307c:	431bde83 	.word	0x431bde83

08003080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800309c:	4013      	ands	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 0307 	and.w	r3, r3, #7
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	db0b      	blt.n	800310e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	f003 021f 	and.w	r2, r3, #31
 80030fc:	4906      	ldr	r1, [pc, #24]	; (8003118 <__NVIC_EnableIRQ+0x34>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2001      	movs	r0, #1
 8003106:	fa00 f202 	lsl.w	r2, r0, r2
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	; (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e4:	d301      	bcc.n	80031ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00f      	b.n	800320a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <SysTick_Config+0x40>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f2:	210f      	movs	r1, #15
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f7ff ff90 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <SysTick_Config+0x40>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003202:	4b04      	ldr	r3, [pc, #16]	; (8003214 <SysTick_Config+0x40>)
 8003204:	2207      	movs	r2, #7
 8003206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	e000e010 	.word	0xe000e010

08003218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff2d 	bl	8003080 <__NVIC_SetPriorityGrouping>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003240:	f7ff ff42 	bl	80030c8 <__NVIC_GetPriorityGrouping>
 8003244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff ff90 	bl	8003170 <NVIC_EncodePriority>
 8003250:	4602      	mov	r2, r0
 8003252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff5f 	bl	800311c <__NVIC_SetPriority>
}
 800325e:	bf00      	nop
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff35 	bl	80030e4 <__NVIC_EnableIRQ>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ffa2 	bl	80031d4 <SysTick_Config>
 8003290:	4603      	mov	r3, r0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d008      	beq.n	80032c4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2204      	movs	r2, #4
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e022      	b.n	800330a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 020e 	bic.w	r2, r2, #14
 80032d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f003 021c 	and.w	r2, r3, #28
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f202 	lsl.w	r2, r1, r2
 80032f6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d005      	beq.n	8003338 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2204      	movs	r2, #4
 8003330:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	e029      	b.n	800338c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 020e 	bic.w	r2, r2, #14
 8003346:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f003 021c 	and.w	r2, r3, #28
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	2101      	movs	r1, #1
 8003366:	fa01 f202 	lsl.w	r2, r1, r2
 800336a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
    }
  }
  return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80033ae:	e160      	b.n	8003672 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8152 	beq.w	800366c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d005      	beq.n	80033e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0201 	and.w	r2, r3, #1
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b03      	cmp	r3, #3
 800344c:	d017      	beq.n	800347e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d123      	bne.n	80034d2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80ac 	beq.w	800366c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003514:	4b5e      	ldr	r3, [pc, #376]	; (8003690 <HAL_GPIO_Init+0x2f8>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a5d      	ldr	r2, [pc, #372]	; (8003690 <HAL_GPIO_Init+0x2f8>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <HAL_GPIO_Init+0x2f8>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800352c:	4a59      	ldr	r2, [pc, #356]	; (8003694 <HAL_GPIO_Init+0x2fc>)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	3302      	adds	r3, #2
 8003534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003538:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a51      	ldr	r2, [pc, #324]	; (8003698 <HAL_GPIO_Init+0x300>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d025      	beq.n	80035a4 <HAL_GPIO_Init+0x20c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a50      	ldr	r2, [pc, #320]	; (800369c <HAL_GPIO_Init+0x304>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01f      	beq.n	80035a0 <HAL_GPIO_Init+0x208>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a4f      	ldr	r2, [pc, #316]	; (80036a0 <HAL_GPIO_Init+0x308>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d019      	beq.n	800359c <HAL_GPIO_Init+0x204>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a4e      	ldr	r2, [pc, #312]	; (80036a4 <HAL_GPIO_Init+0x30c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_GPIO_Init+0x200>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a4d      	ldr	r2, [pc, #308]	; (80036a8 <HAL_GPIO_Init+0x310>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00d      	beq.n	8003594 <HAL_GPIO_Init+0x1fc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a4c      	ldr	r2, [pc, #304]	; (80036ac <HAL_GPIO_Init+0x314>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <HAL_GPIO_Init+0x1f8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a4b      	ldr	r2, [pc, #300]	; (80036b0 <HAL_GPIO_Init+0x318>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_GPIO_Init+0x1f4>
 8003588:	2306      	movs	r3, #6
 800358a:	e00c      	b.n	80035a6 <HAL_GPIO_Init+0x20e>
 800358c:	2307      	movs	r3, #7
 800358e:	e00a      	b.n	80035a6 <HAL_GPIO_Init+0x20e>
 8003590:	2305      	movs	r3, #5
 8003592:	e008      	b.n	80035a6 <HAL_GPIO_Init+0x20e>
 8003594:	2304      	movs	r3, #4
 8003596:	e006      	b.n	80035a6 <HAL_GPIO_Init+0x20e>
 8003598:	2303      	movs	r3, #3
 800359a:	e004      	b.n	80035a6 <HAL_GPIO_Init+0x20e>
 800359c:	2302      	movs	r3, #2
 800359e:	e002      	b.n	80035a6 <HAL_GPIO_Init+0x20e>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_GPIO_Init+0x20e>
 80035a4:	2300      	movs	r3, #0
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	f002 0203 	and.w	r2, r2, #3
 80035ac:	0092      	lsls	r2, r2, #2
 80035ae:	4093      	lsls	r3, r2
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035b6:	4937      	ldr	r1, [pc, #220]	; (8003694 <HAL_GPIO_Init+0x2fc>)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c4:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035e8:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003612:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003618:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3301      	adds	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f ae97 	bne.w	80033b0 <HAL_GPIO_Init+0x18>
  }
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40010000 	.word	0x40010000
 8003698:	40020000 	.word	0x40020000
 800369c:	40020400 	.word	0x40020400
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020c00 	.word	0x40020c00
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40021400 	.word	0x40021400
 80036b0:	40021800 	.word	0x40021800
 80036b4:	40010400 	.word	0x40010400

080036b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
 80036c4:	4613      	mov	r3, r2
 80036c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036c8:	787b      	ldrb	r3, [r7, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80036d4:	e003      	b.n	80036de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	041a      	lsls	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	619a      	str	r2, [r3, #24]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e12b      	b.n	8003952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe fe3a 	bl	8002388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800374c:	f001 fcdc 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a81      	ldr	r2, [pc, #516]	; (800395c <HAL_I2C_Init+0x274>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d807      	bhi.n	800376c <HAL_I2C_Init+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a80      	ldr	r2, [pc, #512]	; (8003960 <HAL_I2C_Init+0x278>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x92>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a7d      	ldr	r2, [pc, #500]	; (8003964 <HAL_I2C_Init+0x27c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0e7      	b.n	8003952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a78      	ldr	r2, [pc, #480]	; (8003968 <HAL_I2C_Init+0x280>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a6a      	ldr	r2, [pc, #424]	; (800395c <HAL_I2C_Init+0x274>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <HAL_I2C_Init+0xd4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	e009      	b.n	80037d0 <HAL_I2C_Init+0xe8>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a69      	ldr	r2, [pc, #420]	; (800396c <HAL_I2C_Init+0x284>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	3301      	adds	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	495c      	ldr	r1, [pc, #368]	; (800395c <HAL_I2C_Init+0x274>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d819      	bhi.n	8003824 <HAL_I2C_Init+0x13c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e59      	subs	r1, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003804:	400b      	ands	r3, r1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_I2C_Init+0x138>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e59      	subs	r1, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fbb1 f3f3 	udiv	r3, r1, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	e051      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003820:	2304      	movs	r3, #4
 8003822:	e04f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <HAL_I2C_Init+0x168>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e012      	b.n	8003876 <HAL_I2C_Init+0x18e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x196>
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10e      	bne.n	80038a4 <HAL_I2C_Init+0x1bc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e58      	subs	r0, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	440b      	add	r3, r1
 8003894:	fbb0 f3f3 	udiv	r3, r0, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	e00f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	0099      	lsls	r1, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	6809      	ldr	r1, [r1, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6911      	ldr	r1, [r2, #16]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	000186a0 	.word	0x000186a0
 8003960:	001e847f 	.word	0x001e847f
 8003964:	003d08ff 	.word	0x003d08ff
 8003968:	431bde83 	.word	0x431bde83
 800396c:	10624dd3 	.word	0x10624dd3

08003970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	460b      	mov	r3, r1
 800397e:	817b      	strh	r3, [r7, #10]
 8003980:	4613      	mov	r3, r2
 8003982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7fe ff38 	bl	80027f8 <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	f040 80e0 	bne.w	8003b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2319      	movs	r3, #25
 800399e:	2201      	movs	r2, #1
 80039a0:	4970      	ldr	r1, [pc, #448]	; (8003b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fc58 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	e0d3      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2C_Master_Transmit+0x50>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0cc      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d007      	beq.n	80039e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2221      	movs	r2, #33	; 0x21
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2210      	movs	r2, #16
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	893a      	ldrh	r2, [r7, #8]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fac2 	bl	8003fb8 <I2C_MasterRequestWrite>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e08d      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a54:	e066      	b.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fcd2 	bl	8004404 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e06b      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d11b      	bne.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	6a39      	ldr	r1, [r7, #32]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fcc2 	bl	8004486 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d107      	bne.n	8003b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e01a      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d194      	bne.n	8003a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	00100002 	.word	0x00100002
 8003b68:	ffff0000 	.word	0xffff0000

08003b6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	; 0x30
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7fe fe3a 	bl	80027f8 <HAL_GetTick>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	f040 820b 	bne.w	8003faa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	497c      	ldr	r1, [pc, #496]	; (8003d90 <HAL_I2C_Master_Receive+0x224>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fb5a 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
 8003bac:	e1fe      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2C_Master_Receive+0x50>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e1f7      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d007      	beq.n	8003be2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2222      	movs	r2, #34	; 0x22
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	893a      	ldrh	r2, [r7, #8]
 8003c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a5c      	ldr	r2, [pc, #368]	; (8003d94 <HAL_I2C_Master_Receive+0x228>)
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fa46 	bl	80040bc <I2C_MasterRequestRead>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e1b8      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d113      	bne.n	8003c6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e18c      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d11b      	bne.n	8003caa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e16c      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d11b      	bne.n	8003cea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	e14c      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d10:	e138      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	f200 80f1 	bhi.w	8003efe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d123      	bne.n	8003d6c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fbed 	bl	8004508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e139      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d6a:	e10b      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d14e      	bne.n	8003e12 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	4906      	ldr	r1, [pc, #24]	; (8003d98 <HAL_I2C_Master_Receive+0x22c>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa6a 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e10e      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
 8003d8e:	bf00      	nop
 8003d90:	00100002 	.word	0x00100002
 8003d94:	ffff0000 	.word	0xffff0000
 8003d98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e10:	e0b8      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4966      	ldr	r1, [pc, #408]	; (8003fb4 <HAL_I2C_Master_Receive+0x448>)
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fa1b 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0bf      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	2200      	movs	r2, #0
 8003e76:	494f      	ldr	r1, [pc, #316]	; (8003fb4 <HAL_I2C_Master_Receive+0x448>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f9ed 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e091      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003efc:	e042      	b.n	8003f84 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fb00 	bl	8004508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e04c      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d118      	bne.n	8003f84 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f47f aec2 	bne.w	8003d12 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
  }
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3728      	adds	r7, #40	; 0x28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	00010004 	.word	0x00010004

08003fb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d006      	beq.n	8003fe2 <I2C_MasterRequestWrite+0x2a>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d003      	beq.n	8003fe2 <I2C_MasterRequestWrite+0x2a>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe0:	d108      	bne.n	8003ff4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e00b      	b.n	800400c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	2b12      	cmp	r3, #18
 8003ffa:	d107      	bne.n	800400c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800400a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f91d 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d103      	bne.n	800403c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e035      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004048:	d108      	bne.n	800405c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800404a:	897b      	ldrh	r3, [r7, #10]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004058:	611a      	str	r2, [r3, #16]
 800405a:	e01b      	b.n	8004094 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800405c:	897b      	ldrh	r3, [r7, #10]
 800405e:	11db      	asrs	r3, r3, #7
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0306 	and.w	r3, r3, #6
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f063 030f 	orn	r3, r3, #15
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	490e      	ldr	r1, [pc, #56]	; (80040b4 <I2C_MasterRequestWrite+0xfc>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f943 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e010      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4907      	ldr	r1, [pc, #28]	; (80040b8 <I2C_MasterRequestWrite+0x100>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f933 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00010008 	.word	0x00010008
 80040b8:	00010002 	.word	0x00010002

080040bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d006      	beq.n	80040f6 <I2C_MasterRequestRead+0x3a>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d003      	beq.n	80040f6 <I2C_MasterRequestRead+0x3a>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040f4:	d108      	bne.n	8004108 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e00b      	b.n	8004120 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	2b11      	cmp	r3, #17
 800410e:	d107      	bne.n	8004120 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f893 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	d103      	bne.n	8004150 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e079      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800415c:	d108      	bne.n	8004170 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]
 800416e:	e05f      	b.n	8004230 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	11db      	asrs	r3, r3, #7
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0306 	and.w	r3, r3, #6
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f063 030f 	orn	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4930      	ldr	r1, [pc, #192]	; (8004250 <I2C_MasterRequestRead+0x194>)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f8b9 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e054      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4929      	ldr	r1, [pc, #164]	; (8004254 <I2C_MasterRequestRead+0x198>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f8a9 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e044      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f831 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d103      	bne.n	8004214 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e017      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004218:	897b      	ldrh	r3, [r7, #10]
 800421a:	11db      	asrs	r3, r3, #7
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f063 030e 	orn	r3, r3, #14
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4907      	ldr	r1, [pc, #28]	; (8004254 <I2C_MasterRequestRead+0x198>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f865 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	00010008 	.word	0x00010008
 8004254:	00010002 	.word	0x00010002

08004258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004268:	e025      	b.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d021      	beq.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fe fac1 	bl	80027f8 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e023      	b.n	80042fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10d      	bne.n	80042dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	43da      	mvns	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	e00c      	b.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d0b6      	beq.n	800426a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004314:	e051      	b.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d123      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004334:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e046      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d021      	beq.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fe fa3f 	bl	80027f8 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e020      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10c      	bne.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e00b      	b.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d18d      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004410:	e02d      	b.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f8ce 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e02d      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d021      	beq.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe f9e5 	bl	80027f8 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e007      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d1ca      	bne.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004492:	e02d      	b.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f88d 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e02d      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d021      	beq.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fe f9a4 	bl	80027f8 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e007      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d1ca      	bne.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004514:	e042      	b.n	800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d119      	bne.n	8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0210 	mvn.w	r2, #16
 800452c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e029      	b.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fe f94e 	bl	80027f8 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d1b5      	bne.n	8004516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d11b      	bne.n	8004604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_PWR_DisableSleepOnExit+0x18>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4a03      	ldr	r2, [pc, #12]	; (8004628 <HAL_PWR_DisableSleepOnExit+0x18>)
 800461a:	f023 0302 	bic.w	r3, r3, #2
 800461e:	6113      	str	r3, [r2, #16]
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e31d      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463e:	4b94      	ldr	r3, [pc, #592]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004648:	4b91      	ldr	r3, [pc, #580]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004650:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d07b      	beq.n	8004756 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d006      	beq.n	8004672 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d10f      	bne.n	800468a <HAL_RCC_OscConfig+0x5e>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d10b      	bne.n	800468a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004672:	4b87      	ldr	r3, [pc, #540]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d06a      	beq.n	8004754 <HAL_RCC_OscConfig+0x128>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d166      	bne.n	8004754 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e2f7      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x74>
 8004692:	4b7f      	ldr	r3, [pc, #508]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7e      	ldr	r2, [pc, #504]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e02d      	b.n	80046fc <HAL_RCC_OscConfig+0xd0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10c      	bne.n	80046c2 <HAL_RCC_OscConfig+0x96>
 80046a8:	4b79      	ldr	r3, [pc, #484]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a78      	ldr	r2, [pc, #480]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b76      	ldr	r3, [pc, #472]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a75      	ldr	r2, [pc, #468]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e01c      	b.n	80046fc <HAL_RCC_OscConfig+0xd0>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCC_OscConfig+0xb8>
 80046ca:	4b71      	ldr	r3, [pc, #452]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a70      	ldr	r2, [pc, #448]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b6e      	ldr	r3, [pc, #440]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6d      	ldr	r2, [pc, #436]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e00b      	b.n	80046fc <HAL_RCC_OscConfig+0xd0>
 80046e4:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a69      	ldr	r2, [pc, #420]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b67      	ldr	r3, [pc, #412]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a66      	ldr	r2, [pc, #408]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fe f878 	bl	80027f8 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470c:	f7fe f874 	bl	80027f8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e2ad      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800471e:	4b5c      	ldr	r3, [pc, #368]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0xe0>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fe f864 	bl	80027f8 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004734:	f7fe f860 	bl	80027f8 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e299      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004746:	4b52      	ldr	r3, [pc, #328]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x108>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d05a      	beq.n	8004818 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d005      	beq.n	8004774 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d119      	bne.n	80047a2 <HAL_RCC_OscConfig+0x176>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d116      	bne.n	80047a2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004774:	4b46      	ldr	r3, [pc, #280]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_OscConfig+0x160>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d001      	beq.n	800478c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e276      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b40      	ldr	r3, [pc, #256]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	493d      	ldr	r1, [pc, #244]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a0:	e03a      	b.n	8004818 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047aa:	4b3a      	ldr	r3, [pc, #232]	; (8004894 <HAL_RCC_OscConfig+0x268>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fe f822 	bl	80027f8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fe f81e 	bl	80027f8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e257      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d6:	4b2e      	ldr	r3, [pc, #184]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	492a      	ldr	r1, [pc, #168]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
 80047ea:	e015      	b.n	8004818 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ec:	4b29      	ldr	r3, [pc, #164]	; (8004894 <HAL_RCC_OscConfig+0x268>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fe f801 	bl	80027f8 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047fa:	f7fd fffd 	bl	80027f8 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e236      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800480c:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80b8 	beq.w	8004996 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d170      	bne.n	800490e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800482c:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_OscConfig+0x218>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e21a      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004850:	429a      	cmp	r2, r3
 8004852:	d921      	bls.n	8004898 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fc7d 	bl	8005158 <RCC_SetFlashLatencyFromMSIRange>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e208      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	4906      	ldr	r1, [pc, #24]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	061b      	lsls	r3, r3, #24
 8004888:	4901      	ldr	r1, [pc, #4]	; (8004890 <HAL_RCC_OscConfig+0x264>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
 800488e:	e020      	b.n	80048d2 <HAL_RCC_OscConfig+0x2a6>
 8004890:	40023800 	.word	0x40023800
 8004894:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004898:	4b99      	ldr	r3, [pc, #612]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	4996      	ldr	r1, [pc, #600]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048aa:	4b95      	ldr	r3, [pc, #596]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	4991      	ldr	r1, [pc, #580]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fc48 	bl	8005158 <RCC_SetFlashLatencyFromMSIRange>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1d3      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	0b5b      	lsrs	r3, r3, #13
 80048d8:	3301      	adds	r3, #1
 80048da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80048e2:	4a87      	ldr	r2, [pc, #540]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 80048e4:	6892      	ldr	r2, [r2, #8]
 80048e6:	0912      	lsrs	r2, r2, #4
 80048e8:	f002 020f 	and.w	r2, r2, #15
 80048ec:	4985      	ldr	r1, [pc, #532]	; (8004b04 <HAL_RCC_OscConfig+0x4d8>)
 80048ee:	5c8a      	ldrb	r2, [r1, r2]
 80048f0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80048f2:	4a85      	ldr	r2, [pc, #532]	; (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80048f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048f6:	4b85      	ldr	r3, [pc, #532]	; (8004b0c <HAL_RCC_OscConfig+0x4e0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fd ff30 	bl	8002760 <HAL_InitTick>
 8004900:	4603      	mov	r3, r0
 8004902:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d045      	beq.n	8004996 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	e1b5      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d029      	beq.n	800496a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004916:	4b7e      	ldr	r3, [pc, #504]	; (8004b10 <HAL_RCC_OscConfig+0x4e4>)
 8004918:	2201      	movs	r2, #1
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fd ff6c 	bl	80027f8 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004924:	f7fd ff68 	bl	80027f8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1a1      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004936:	4b72      	ldr	r3, [pc, #456]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004942:	4b6f      	ldr	r3, [pc, #444]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	496c      	ldr	r1, [pc, #432]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004954:	4b6a      	ldr	r3, [pc, #424]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	4967      	ldr	r1, [pc, #412]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
 8004968:	e015      	b.n	8004996 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800496a:	4b69      	ldr	r3, [pc, #420]	; (8004b10 <HAL_RCC_OscConfig+0x4e4>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004970:	f7fd ff42 	bl	80027f8 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004978:	f7fd ff3e 	bl	80027f8 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e177      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800498a:	4b5d      	ldr	r3, [pc, #372]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d030      	beq.n	8004a04 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049aa:	4b5a      	ldr	r3, [pc, #360]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b0:	f7fd ff22 	bl	80027f8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b8:	f7fd ff1e 	bl	80027f8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e157      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049ca:	4b4d      	ldr	r3, [pc, #308]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x38c>
 80049d6:	e015      	b.n	8004a04 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d8:	4b4e      	ldr	r3, [pc, #312]	; (8004b14 <HAL_RCC_OscConfig+0x4e8>)
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7fd ff0b 	bl	80027f8 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e6:	f7fd ff07 	bl	80027f8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e140      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049f8:	4b41      	ldr	r3, [pc, #260]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80b5 	beq.w	8004b7c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a12:	2300      	movs	r3, #0
 8004a14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a16:	4b3a      	ldr	r3, [pc, #232]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10d      	bne.n	8004a3e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a22:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	4a36      	ldr	r2, [pc, #216]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6253      	str	r3, [r2, #36]	; 0x24
 8004a2e:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d118      	bne.n	8004a7c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a4a:	4b33      	ldr	r3, [pc, #204]	; (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a32      	ldr	r2, [pc, #200]	; (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a56:	f7fd fecf 	bl	80027f8 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5e:	f7fd fecb 	bl	80027f8 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b64      	cmp	r3, #100	; 0x64
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e104      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a70:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0x466>
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8e:	6353      	str	r3, [r2, #52]	; 0x34
 8004a90:	e02d      	b.n	8004aee <HAL_RCC_OscConfig+0x4c2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x488>
 8004a9a:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa4:	6353      	str	r3, [r2, #52]	; 0x34
 8004aa6:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab0:	6353      	str	r3, [r2, #52]	; 0x34
 8004ab2:	e01c      	b.n	8004aee <HAL_RCC_OscConfig+0x4c2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b05      	cmp	r3, #5
 8004aba:	d10c      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x4aa>
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	4a0f      	ldr	r2, [pc, #60]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac6:	6353      	str	r3, [r2, #52]	; 0x34
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6353      	str	r3, [r2, #52]	; 0x34
 8004ad4:	e00b      	b.n	8004aee <HAL_RCC_OscConfig+0x4c2>
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8004ae2:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <HAL_RCC_OscConfig+0x4d4>)
 8004ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aec:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d024      	beq.n	8004b40 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af6:	f7fd fe7f 	bl	80027f8 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004afc:	e019      	b.n	8004b32 <HAL_RCC_OscConfig+0x506>
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800
 8004b04:	080097bc 	.word	0x080097bc
 8004b08:	20000008 	.word	0x20000008
 8004b0c:	2000000c 	.word	0x2000000c
 8004b10:	42470020 	.word	0x42470020
 8004b14:	42470680 	.word	0x42470680
 8004b18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b1c:	f7fd fe6c 	bl	80027f8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e0a3      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b32:	4b54      	ldr	r3, [pc, #336]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0ee      	beq.n	8004b1c <HAL_RCC_OscConfig+0x4f0>
 8004b3e:	e014      	b.n	8004b6a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b40:	f7fd fe5a 	bl	80027f8 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fd fe56 	bl	80027f8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e08d      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b5e:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1ee      	bne.n	8004b48 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b6a:	7ffb      	ldrb	r3, [r7, #31]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b70:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	4a43      	ldr	r2, [pc, #268]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d079      	beq.n	8004c78 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b0c      	cmp	r3, #12
 8004b88:	d056      	beq.n	8004c38 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d13b      	bne.n	8004c0a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b92:	4b3d      	ldr	r3, [pc, #244]	; (8004c88 <HAL_RCC_OscConfig+0x65c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b98:	f7fd fe2e 	bl	80027f8 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd fe2a 	bl	80027f8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e063      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bb2:	4b34      	ldr	r3, [pc, #208]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4319      	orrs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	492b      	ldr	r1, [pc, #172]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	; (8004c88 <HAL_RCC_OscConfig+0x65c>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be2:	f7fd fe09 	bl	80027f8 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fd fe05 	bl	80027f8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e03e      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x5be>
 8004c08:	e036      	b.n	8004c78 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <HAL_RCC_OscConfig+0x65c>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fd fdf2 	bl	80027f8 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fd fdee 	bl	80027f8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e027      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c2a:	4b16      	ldr	r3, [pc, #88]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5ec>
 8004c36:	e01f      	b.n	8004c78 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e01a      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <HAL_RCC_OscConfig+0x658>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d106      	bne.n	8004c74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40023800 	.word	0x40023800
 8004c88:	42470060 	.word	0x42470060

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e11a      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b8f      	ldr	r3, [pc, #572]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d919      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x34>
 8004cb4:	4b8a      	ldr	r3, [pc, #552]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a89      	ldr	r2, [pc, #548]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004cba:	f043 0304 	orr.w	r3, r3, #4
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4b87      	ldr	r3, [pc, #540]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 0201 	bic.w	r2, r3, #1
 8004cc8:	4985      	ldr	r1, [pc, #532]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd0:	4b83      	ldr	r3, [pc, #524]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d001      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0f9      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cee:	4b7d      	ldr	r3, [pc, #500]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	497a      	ldr	r1, [pc, #488]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 808e 	beq.w	8004e2a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d16:	4b73      	ldr	r3, [pc, #460]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d121      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0d7      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d2e:	4b6d      	ldr	r3, [pc, #436]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d115      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0cb      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d46:	4b67      	ldr	r3, [pc, #412]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0bf      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d56:	4b63      	ldr	r3, [pc, #396]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0b7      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d66:	4b5f      	ldr	r3, [pc, #380]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 0203 	bic.w	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	495c      	ldr	r1, [pc, #368]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d78:	f7fd fd3e 	bl	80027f8 <HAL_GetTick>
 8004d7c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d112      	bne.n	8004dac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fd fd36 	bl	80027f8 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e09b      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d9e:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d1ee      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xfc>
 8004daa:	e03e      	b.n	8004e2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d112      	bne.n	8004dda <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db6:	f7fd fd1f 	bl	80027f8 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e084      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dcc:	4b45      	ldr	r3, [pc, #276]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 030c 	and.w	r3, r3, #12
 8004dd4:	2b0c      	cmp	r3, #12
 8004dd6:	d1ee      	bne.n	8004db6 <HAL_RCC_ClockConfig+0x12a>
 8004dd8:	e027      	b.n	8004e2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d11d      	bne.n	8004e1e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de4:	f7fd fd08 	bl	80027f8 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e06d      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d1ee      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x158>
 8004e06:	e010      	b.n	8004e2a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e08:	f7fd fcf6 	bl	80027f8 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e05b      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ee      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d219      	bcs.n	8004e6c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d105      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x1be>
 8004e3e:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004e44:	f043 0304 	orr.w	r3, r3, #4
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	4923      	ldr	r1, [pc, #140]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <HAL_RCC_ClockConfig+0x254>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e034      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e78:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4917      	ldr	r1, [pc, #92]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	490f      	ldr	r1, [pc, #60]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eaa:	f000 f823 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCC_ClockConfig+0x258>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	490b      	ldr	r1, [pc, #44]	; (8004ee8 <HAL_RCC_ClockConfig+0x25c>)
 8004ebc:	5ccb      	ldrb	r3, [r1, r3]
 8004ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <HAL_RCC_ClockConfig+0x260>)
 8004ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fd fc48 	bl	8002760 <HAL_InitTick>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023c00 	.word	0x40023c00
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	080097bc 	.word	0x080097bc
 8004eec:	20000008 	.word	0x20000008
 8004ef0:	2000000c 	.word	0x2000000c

08004ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef8:	b092      	sub	sp, #72	; 0x48
 8004efa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004efc:	4b79      	ldr	r3, [pc, #484]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	d00d      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x34>
 8004f0c:	2b0c      	cmp	r3, #12
 8004f0e:	f200 80d5 	bhi.w	80050bc <HAL_RCC_GetSysClockFreq+0x1c8>
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x28>
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x2e>
 8004f1a:	e0cf      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f1c:	4b72      	ldr	r3, [pc, #456]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004f1e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004f20:	e0da      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f22:	4b72      	ldr	r3, [pc, #456]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004f24:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004f26:	e0d7      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2a:	0c9b      	lsrs	r3, r3, #18
 8004f2c:	f003 020f 	and.w	r2, r3, #15
 8004f30:	4b6f      	ldr	r3, [pc, #444]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004f32:	5c9b      	ldrb	r3, [r3, r2]
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f38:	0d9b      	lsrs	r3, r3, #22
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f42:	4b68      	ldr	r3, [pc, #416]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d05d      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2200      	movs	r2, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	4611      	mov	r1, r2
 8004f56:	4604      	mov	r4, r0
 8004f58:	460d      	mov	r5, r1
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	f04f 0000 	mov.w	r0, #0
 8004f62:	f04f 0100 	mov.w	r1, #0
 8004f66:	0159      	lsls	r1, r3, #5
 8004f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f6c:	0150      	lsls	r0, r2, #5
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4621      	mov	r1, r4
 8004f74:	1a51      	subs	r1, r2, r1
 8004f76:	6139      	str	r1, [r7, #16]
 8004f78:	4629      	mov	r1, r5
 8004f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	018b      	lsls	r3, r1, #6
 8004f90:	4651      	mov	r1, sl
 8004f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f96:	4651      	mov	r1, sl
 8004f98:	018a      	lsls	r2, r1, #6
 8004f9a:	46d4      	mov	ip, sl
 8004f9c:	ebb2 080c 	subs.w	r8, r2, ip
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	eb63 0901 	sbc.w	r9, r3, r1
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fba:	4690      	mov	r8, r2
 8004fbc:	4699      	mov	r9, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	eb18 0303 	adds.w	r3, r8, r3
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	462b      	mov	r3, r5
 8004fc8:	eb49 0303 	adc.w	r3, r9, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fda:	4629      	mov	r1, r5
 8004fdc:	024b      	lsls	r3, r1, #9
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004fe8:	4601      	mov	r1, r0
 8004fea:	024a      	lsls	r2, r1, #9
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ffc:	f7fc f830 	bl	8001060 <__aeabi_uldivmod>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4613      	mov	r3, r2
 8005006:	647b      	str	r3, [r7, #68]	; 0x44
 8005008:	e055      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	2200      	movs	r2, #0
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	627a      	str	r2, [r7, #36]	; 0x24
 8005012:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005016:	4642      	mov	r2, r8
 8005018:	464b      	mov	r3, r9
 800501a:	f04f 0000 	mov.w	r0, #0
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	0159      	lsls	r1, r3, #5
 8005024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005028:	0150      	lsls	r0, r2, #5
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	46c4      	mov	ip, r8
 8005030:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005034:	4640      	mov	r0, r8
 8005036:	4649      	mov	r1, r9
 8005038:	468c      	mov	ip, r1
 800503a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800504a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800504e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005052:	ebb2 040a 	subs.w	r4, r2, sl
 8005056:	eb63 050b 	sbc.w	r5, r3, fp
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	00eb      	lsls	r3, r5, #3
 8005064:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005068:	00e2      	lsls	r2, r4, #3
 800506a:	4614      	mov	r4, r2
 800506c:	461d      	mov	r5, r3
 800506e:	4603      	mov	r3, r0
 8005070:	18e3      	adds	r3, r4, r3
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	460b      	mov	r3, r1
 8005076:	eb45 0303 	adc.w	r3, r5, r3
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005088:	4629      	mov	r1, r5
 800508a:	028b      	lsls	r3, r1, #10
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	4604      	mov	r4, r0
 8005092:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005096:	4601      	mov	r1, r0
 8005098:	028a      	lsls	r2, r1, #10
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	2200      	movs	r2, #0
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	61fa      	str	r2, [r7, #28]
 80050a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050aa:	f7fb ffd9 	bl	8001060 <__aeabi_uldivmod>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4613      	mov	r3, r2
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80050b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80050ba:	e00d      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0b5b      	lsrs	r3, r3, #13
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	3301      	adds	r3, #1
 80050cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80050d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3748      	adds	r7, #72	; 0x48
 80050de:	46bd      	mov	sp, r7
 80050e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e4:	40023800 	.word	0x40023800
 80050e8:	00f42400 	.word	0x00f42400
 80050ec:	007a1200 	.word	0x007a1200
 80050f0:	080097b0 	.word	0x080097b0

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b02      	ldr	r3, [pc, #8]	; (8005104 <HAL_RCC_GetHCLKFreq+0x10>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	20000008 	.word	0x20000008

08005108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800510c:	f7ff fff2 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4903      	ldr	r1, [pc, #12]	; (800512c <HAL_RCC_GetPCLK1Freq+0x24>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40023800 	.word	0x40023800
 800512c:	080097cc 	.word	0x080097cc

08005130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005134:	f7ff ffde 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	0adb      	lsrs	r3, r3, #11
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	4903      	ldr	r1, [pc, #12]	; (8005154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40023800 	.word	0x40023800
 8005154:	080097cc 	.word	0x080097cc

08005158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005164:	4b29      	ldr	r3, [pc, #164]	; (800520c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d12c      	bne.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005170:	4b26      	ldr	r3, [pc, #152]	; (800520c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800517c:	4b24      	ldr	r3, [pc, #144]	; (8005210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e016      	b.n	80051b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005188:	4b20      	ldr	r3, [pc, #128]	; (800520c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	4a1f      	ldr	r2, [pc, #124]	; (800520c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800518e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005192:	6253      	str	r3, [r2, #36]	; 0x24
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80051a8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80051aa:	4b18      	ldr	r3, [pc, #96]	; (800520c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	4a17      	ldr	r2, [pc, #92]	; (800520c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80051b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80051bc:	d105      	bne.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0x72>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051c4:	d101      	bne.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80051c6:	2301      	movs	r3, #1
 80051c8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80051d0:	4b10      	ldr	r3, [pc, #64]	; (8005214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0f      	ldr	r2, [pc, #60]	; (8005214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051d6:	f043 0304 	orr.w	r3, r3, #4
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f023 0201 	bic.w	r2, r3, #1
 80051e4:	490b      	ldr	r1, [pc, #44]	; (8005214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d001      	beq.n	80051fe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800
 8005210:	40007000 	.word	0x40007000
 8005214:	40023c00 	.word	0x40023c00

08005218 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80ed 	beq.w	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523e:	4b78      	ldr	r3, [pc, #480]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524a:	4b75      	ldr	r3, [pc, #468]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	4a74      	ldr	r2, [pc, #464]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005254:	6253      	str	r3, [r2, #36]	; 0x24
 8005256:	4b72      	ldr	r3, [pc, #456]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005266:	4b6f      	ldr	r3, [pc, #444]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d118      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005272:	4b6c      	ldr	r3, [pc, #432]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6b      	ldr	r2, [pc, #428]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527e:	f7fd fabb 	bl	80027f8 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005284:	e008      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005286:	f7fd fab7 	bl	80027f8 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b64      	cmp	r3, #100	; 0x64
 8005292:	d901      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e0be      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005298:	4b62      	ldr	r3, [pc, #392]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80052a4:	4b5e      	ldr	r3, [pc, #376]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80052ac:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d106      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d00f      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052d6:	d108      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052d8:	4b51      	ldr	r3, [pc, #324]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e4:	d101      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e095      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80052ea:	4b4d      	ldr	r3, [pc, #308]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052f2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d041      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d005      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10c      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	429a      	cmp	r2, r3
 8005320:	d02d      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d027      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800532e:	4b3c      	ldr	r3, [pc, #240]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005332:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005336:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005338:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800533a:	2201      	movs	r2, #1
 800533c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800533e:	4b3a      	ldr	r3, [pc, #232]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005344:	4a36      	ldr	r2, [pc, #216]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d014      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005354:	f7fd fa50 	bl	80027f8 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800535a:	e00a      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fd fa4c 	bl	80027f8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	; 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e051      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005372:	4b2b      	ldr	r3, [pc, #172]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0ee      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005396:	d10a      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005398:	4b21      	ldr	r3, [pc, #132]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80053a8:	491d      	ldr	r1, [pc, #116]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
 80053ae:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ba:	4919      	ldr	r1, [pc, #100]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053d8:	d10a      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80053da:	4b11      	ldr	r3, [pc, #68]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80053ea:	490d      	ldr	r1, [pc, #52]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053fc:	4908      	ldr	r1, [pc, #32]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d105      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	4a04      	ldr	r2, [pc, #16]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800540e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005412:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800
 8005424:	40007000 	.word	0x40007000
 8005428:	424706dc 	.word	0x424706dc

0800542c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e083      	b.n	8005546 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	7f5b      	ldrb	r3, [r3, #29]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc ffde 	bl	8002410 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	22ca      	movs	r2, #202	; 0xca
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2253      	movs	r2, #83	; 0x53
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa98 	bl	80059a0 <RTC_EnterInitMode>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	22ff      	movs	r2, #255	; 0xff
 800547c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2204      	movs	r2, #4
 8005482:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e05e      	b.n	8005546 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6899      	ldr	r1, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68d2      	ldr	r2, [r2, #12]
 80054c2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6919      	ldr	r1, [r3, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	041a      	lsls	r2, r3, #16
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054e6:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10e      	bne.n	8005514 <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa25 	bl	8005946 <HAL_RTC_WaitForSynchro>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	22ff      	movs	r2, #255	; 0xff
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2204      	movs	r2, #4
 800550e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e018      	b.n	8005546 <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005522:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	22ff      	movs	r2, #255	; 0xff
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005544:	2300      	movs	r3, #0
  }
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800554e:	b590      	push	{r4, r7, lr}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	7f1b      	ldrb	r3, [r3, #28]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_RTC_SetTime+0x18>
 8005562:	2302      	movs	r3, #2
 8005564:	e0a3      	b.n	80056ae <HAL_RTC_SetTime+0x160>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2202      	movs	r2, #2
 8005570:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d126      	bne.n	80055c6 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fa2f 	bl	80059f4 <RTC_ByteToBcd2>
 8005596:	4603      	mov	r3, r0
 8005598:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fa28 	bl	80059f4 <RTC_ByteToBcd2>
 80055a4:	4603      	mov	r3, r0
 80055a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80055a8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	789b      	ldrb	r3, [r3, #2]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fa20 	bl	80059f4 <RTC_ByteToBcd2>
 80055b4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80055b6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	78db      	ldrb	r3, [r3, #3]
 80055be:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e018      	b.n	80055f8 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d102      	bne.n	80055da <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055e6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80055ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	78db      	ldrb	r3, [r3, #3]
 80055f2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	22ca      	movs	r2, #202	; 0xca
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2253      	movs	r2, #83	; 0x53
 8005606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f9c9 	bl	80059a0 <RTC_EnterInitMode>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00b      	beq.n	800562c <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	22ff      	movs	r2, #255	; 0xff
 800561a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2204      	movs	r2, #4
 8005620:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e040      	b.n	80056ae <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005636:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800563a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800564a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6899      	ldr	r1, [r3, #8]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	431a      	orrs	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005672:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f966 	bl	8005946 <HAL_RTC_WaitForSynchro>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	22ff      	movs	r2, #255	; 0xff
 8005686:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2204      	movs	r2, #4
 800568c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e00a      	b.n	80056ae <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	22ff      	movs	r2, #255	; 0xff
 800569e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd90      	pop	{r4, r7, pc}

080056b6 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d11a      	bne.n	8005766 <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f97c 	bl	8005a32 <RTC_Bcd2ToByte>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f973 	bl	8005a32 <RTC_Bcd2ToByte>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	789b      	ldrb	r3, [r3, #2]
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f96a 	bl	8005a32 <RTC_Bcd2ToByte>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	7f1b      	ldrb	r3, [r3, #28]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_RTC_SetDate+0x18>
 8005784:	2302      	movs	r3, #2
 8005786:	e08d      	b.n	80058a4 <HAL_RTC_SetDate+0x134>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2202      	movs	r2, #2
 8005792:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10e      	bne.n	80057b8 <HAL_RTC_SetDate+0x48>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	f023 0310 	bic.w	r3, r3, #16
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	330a      	adds	r3, #10
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11c      	bne.n	80057f8 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	78db      	ldrb	r3, [r3, #3]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f916 	bl	80059f4 <RTC_ByteToBcd2>
 80057c8:	4603      	mov	r3, r0
 80057ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f90f 	bl	80059f4 <RTC_ByteToBcd2>
 80057d6:	4603      	mov	r3, r0
 80057d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80057da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	789b      	ldrb	r3, [r3, #2]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f907 	bl	80059f4 <RTC_ByteToBcd2>
 80057e6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80057e8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e00e      	b.n	8005816 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	78db      	ldrb	r3, [r3, #3]
 80057fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005804:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800580a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	22ca      	movs	r2, #202	; 0xca
 800581c:	625a      	str	r2, [r3, #36]	; 0x24
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2253      	movs	r2, #83	; 0x53
 8005824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f8ba 	bl	80059a0 <RTC_EnterInitMode>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	22ff      	movs	r2, #255	; 0xff
 8005838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2204      	movs	r2, #4
 800583e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e02c      	b.n	80058a4 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005854:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005858:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005868:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f86b 	bl	8005946 <HAL_RTC_WaitForSynchro>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	22ff      	movs	r2, #255	; 0xff
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2204      	movs	r2, #4
 8005882:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e00a      	b.n	80058a4 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80058a2:	2300      	movs	r3, #0
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}

080058ac <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	0c1b      	lsrs	r3, r3, #16
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	0b5b      	lsrs	r3, r3, #13
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d11a      	bne.n	800593c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	78db      	ldrb	r3, [r3, #3]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f891 	bl	8005a32 <RTC_Bcd2ToByte>
 8005910:	4603      	mov	r3, r0
 8005912:	461a      	mov	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f888 	bl	8005a32 <RTC_Bcd2ToByte>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	789b      	ldrb	r3, [r3, #2]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f87f 	bl	8005a32 <RTC_Bcd2ToByte>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11c      	bne.n	8005996 <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800596a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800596c:	f7fc ff44 	bl	80027f8 <HAL_GetTick>
 8005970:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005972:	e009      	b.n	8005988 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005974:	f7fc ff40 	bl	80027f8 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005982:	d901      	bls.n	8005988 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e007      	b.n	8005998 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0ee      	beq.n	8005974 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d119      	bne.n	80059ea <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295
 80059be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80059c0:	f7fc ff1a 	bl	80027f8 <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059c6:	e009      	b.n	80059dc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059c8:	f7fc ff16 	bl	80027f8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059d6:	d901      	bls.n	80059dc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e007      	b.n	80059ec <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0ee      	beq.n	80059c8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8005a06:	e005      	b.n	8005a14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	3b0a      	subs	r3, #10
 8005a12:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	2b09      	cmp	r3, #9
 8005a18:	d8f6      	bhi.n	8005a08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	7afb      	ldrb	r3, [r7, #11]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	b2db      	uxtb	r3, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	4603      	mov	r3, r0
 8005a3a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	b2db      	uxtb	r3, r3
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr

08005a68 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	7f1b      	ldrb	r3, [r3, #28]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e09e      	b.n	8005bbe <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	22ca      	movs	r2, #202	; 0xca
 8005a92:	625a      	str	r2, [r3, #36]	; 0x24
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2253      	movs	r2, #83	; 0x53
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01e      	beq.n	8005ae8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
  {
    tickstart = HAL_GetTick();
 8005aaa:	f7fc fea5 	bl	80027f8 <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005ab0:	e013      	b.n	8005ada <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ab2:	f7fc fea1 	bl	80027f8 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac0:	d90b      	bls.n	8005ada <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2203      	movs	r2, #3
 8005ace:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e071      	b.n	8005bbe <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e4      	bne.n	8005ab2 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af6:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005b08:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005b0a:	f7fc fe75 	bl	80027f8 <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005b10:	e013      	b.n	8005b3a <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b12:	f7fc fe71 	bl	80027f8 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b20:	d90b      	bls.n	8005b3a <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	22ff      	movs	r2, #255	; 0xff
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e041      	b.n	8005bbe <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0e4      	beq.n	8005b12 <HAL_RTCEx_SetWakeUpTimer_IT+0xaa>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0207 	bic.w	r2, r2, #7
 8005b5e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6899      	ldr	r1, [r3, #8]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005b70:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8005b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b7a:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005b7c:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8005b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b86:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b96:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	22ff      	movs	r2, #255	; 0xff
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40010400 	.word	0x40010400

08005bcc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fb ff38 	bl	8001a58 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005bf8:	60da      	str	r2, [r3, #12]
  }


  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8005bfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c00:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	775a      	strb	r2, [r3, #29]
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40010400 	.word	0x40010400

08005c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e03f      	b.n	8005ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fc fc04 	bl	8002448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2224      	movs	r2, #36	; 0x24
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fc85 	bl	8006568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b08a      	sub	sp, #40	; 0x28
 8005cb2:	af02      	add	r7, sp, #8
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	603b      	str	r3, [r7, #0]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d17c      	bne.n	8005dc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_UART_Transmit+0x2c>
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e075      	b.n	8005dca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_UART_Transmit+0x3e>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e06e      	b.n	8005dca <HAL_UART_Transmit+0x11c>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2221      	movs	r2, #33	; 0x21
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d02:	f7fc fd79 	bl	80027f8 <HAL_GetTick>
 8005d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	88fa      	ldrh	r2, [r7, #6]
 8005d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1c:	d108      	bne.n	8005d30 <HAL_UART_Transmit+0x82>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	e003      	b.n	8005d38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d40:	e02a      	b.n	8005d98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2180      	movs	r1, #128	; 0x80
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fa38 	bl	80061c2 <UART_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e036      	b.n	8005dca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10b      	bne.n	8005d7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	3302      	adds	r3, #2
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	e007      	b.n	8005d8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	781a      	ldrb	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	3301      	adds	r3, #1
 8005d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1cf      	bne.n	8005d42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2200      	movs	r2, #0
 8005daa:	2140      	movs	r1, #64	; 0x40
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 fa08 	bl	80061c2 <UART_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e006      	b.n	8005dca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e000      	b.n	8005dca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d11d      	bne.n	8005e28 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Receive_IT+0x26>
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e016      	b.n	8005e2a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Receive_IT+0x38>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e00f      	b.n	8005e2a <HAL_UART_Receive_IT+0x58>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fa19 	bl	8006256 <UART_Start_Receive_IT>
 8005e24:	4603      	mov	r3, r0
 8005e26:	e000      	b.n	8005e2a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
  }
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	; 0x28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_UART_IRQHandler+0x52>
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fac9 	bl	8006416 <UART_Receive_IT>
      return;
 8005e84:	e17b      	b.n	800617e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80b1 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x1bc>
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_UART_IRQHandler+0x70>
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80a6 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x90>
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	f043 0201 	orr.w	r2, r3, #1
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_UART_IRQHandler+0xb0>
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	f043 0202 	orr.w	r2, r3, #2
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <HAL_UART_IRQHandler+0xd0>
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	f043 0204 	orr.w	r2, r3, #4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00f      	beq.n	8005f2e <HAL_UART_IRQHandler+0xfa>
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_UART_IRQHandler+0xee>
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f043 0208 	orr.w	r2, r3, #8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 811e 	beq.w	8006174 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d007      	beq.n	8005f52 <HAL_UART_IRQHandler+0x11e>
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fa62 	bl	8006416 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <HAL_UART_IRQHandler+0x146>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d031      	beq.n	8005fde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f9a4 	bl	80062c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d123      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	4a76      	ldr	r2, [pc, #472]	; (8006184 <HAL_UART_IRQHandler+0x350>)
 8005fac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fd f9ae 	bl	8003314 <HAL_DMA_Abort_IT>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d016      	beq.n	8005fec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	e00e      	b.n	8005fec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8e3 	bl	800619a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00a      	b.n	8005fec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f8df 	bl	800619a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e006      	b.n	8005fec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8db 	bl	800619a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fea:	e0c3      	b.n	8006174 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	bf00      	nop
    return;
 8005fee:	e0c1      	b.n	8006174 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	f040 80a1 	bne.w	800613c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 809b 	beq.w	800613c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8095 	beq.w	800613c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d14e      	bne.n	80060d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006040:	8a3b      	ldrh	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8098 	beq.w	8006178 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800604c:	8a3a      	ldrh	r2, [r7, #16]
 800604e:	429a      	cmp	r2, r3
 8006050:	f080 8092 	bcs.w	8006178 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8a3a      	ldrh	r2, [r7, #16]
 8006058:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b20      	cmp	r3, #32
 8006062:	d02b      	beq.n	80060bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006072:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006092:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0210 	bic.w	r2, r2, #16
 80060b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fd f8ef 	bl	800329a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f86d 	bl	80061ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060d2:	e051      	b.n	8006178 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d047      	beq.n	800617c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80060ec:	8a7b      	ldrh	r3, [r7, #18]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d044      	beq.n	800617c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006100:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695a      	ldr	r2, [r3, #20]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0210 	bic.w	r2, r2, #16
 800612e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006130:	8a7b      	ldrh	r3, [r7, #18]
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f839 	bl	80061ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800613a:	e01f      	b.n	800617c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_UART_IRQHandler+0x324>
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f8f9 	bl	8006348 <UART_Transmit_IT>
    return;
 8006156:	e012      	b.n	800617e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00d      	beq.n	800617e <HAL_UART_IRQHandler+0x34a>
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d008      	beq.n	800617e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f93a 	bl	80063e6 <UART_EndTransmit_IT>
    return;
 8006172:	e004      	b.n	800617e <HAL_UART_IRQHandler+0x34a>
    return;
 8006174:	bf00      	nop
 8006176:	e002      	b.n	800617e <HAL_UART_IRQHandler+0x34a>
      return;
 8006178:	bf00      	nop
 800617a:	e000      	b.n	800617e <HAL_UART_IRQHandler+0x34a>
      return;
 800617c:	bf00      	nop
  }
}
 800617e:	3728      	adds	r7, #40	; 0x28
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	08006321 	.word	0x08006321

08006188 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr

0800619a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	603b      	str	r3, [r7, #0]
 80061ce:	4613      	mov	r3, r2
 80061d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d2:	e02c      	b.n	800622e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d028      	beq.n	800622e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80061e2:	f7fc fb09 	bl	80027f8 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d21d      	bcs.n	800622e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006200:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e00f      	b.n	800624e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4013      	ands	r3, r2
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	bf0c      	ite	eq
 800623e:	2301      	moveq	r3, #1
 8006240:	2300      	movne	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	429a      	cmp	r2, r3
 800624a:	d0c3      	beq.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	4613      	mov	r3, r2
 8006262:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2222      	movs	r2, #34	; 0x22
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0220 	orr.w	r2, r2, #32
 80062ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0201 	bic.w	r2, r2, #1
 80062ee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d107      	bne.n	8006308 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0210 	bic.w	r2, r2, #16
 8006306:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff ff2d 	bl	800619a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b21      	cmp	r3, #33	; 0x21
 800635a:	d13e      	bne.n	80063da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006364:	d114      	bne.n	8006390 <UART_Transmit_IT+0x48>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d110      	bne.n	8006390 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006382:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	1c9a      	adds	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	621a      	str	r2, [r3, #32]
 800638e:	e008      	b.n	80063a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	1c59      	adds	r1, r3, #1
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6211      	str	r1, [r2, #32]
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4619      	mov	r1, r3
 80063b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10f      	bne.n	80063d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	e000      	b.n	80063dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063da:	2302      	movs	r3, #2
  }
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr

080063e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff febe 	bl	8006188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b22      	cmp	r3, #34	; 0x22
 8006428:	f040 8099 	bne.w	800655e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006434:	d117      	bne.n	8006466 <UART_Receive_IT+0x50>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d113      	bne.n	8006466 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006454:	b29a      	uxth	r2, r3
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	1c9a      	adds	r2, r3, #2
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	629a      	str	r2, [r3, #40]	; 0x28
 8006464:	e026      	b.n	80064b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006478:	d007      	beq.n	800648a <UART_Receive_IT+0x74>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <UART_Receive_IT+0x82>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e008      	b.n	80064aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	4619      	mov	r1, r3
 80064c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d148      	bne.n	800655a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0220 	bic.w	r2, r2, #32
 80064d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	2b01      	cmp	r3, #1
 8006506:	d123      	bne.n	8006550 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0210 	bic.w	r2, r2, #16
 800651c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b10      	cmp	r3, #16
 800652a:	d10a      	bne.n	8006542 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fe2f 	bl	80061ac <HAL_UARTEx_RxEventCallback>
 800654e:	e002      	b.n	8006556 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fb fa43 	bl	80019dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e002      	b.n	8006560 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	e000      	b.n	8006560 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800655e:	2302      	movs	r3, #2
  }
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	4313      	orrs	r3, r2
 800659c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80065a8:	f023 030c 	bic.w	r3, r3, #12
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	430b      	orrs	r3, r1
 80065b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699a      	ldr	r2, [r3, #24]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a55      	ldr	r2, [pc, #340]	; (8006728 <UART_SetConfig+0x1c0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d103      	bne.n	80065de <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065d6:	f7fe fdab 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	e002      	b.n	80065e4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065de:	f7fe fd93 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 80065e2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ec:	d14c      	bne.n	8006688 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009a      	lsls	r2, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	fbb2 f3f3 	udiv	r3, r2, r3
 8006604:	4a49      	ldr	r2, [pc, #292]	; (800672c <UART_SetConfig+0x1c4>)
 8006606:	fba2 2303 	umull	r2, r3, r2, r3
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	0119      	lsls	r1, r3, #4
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009a      	lsls	r2, r3, #2
 8006618:	441a      	add	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	fbb2 f2f3 	udiv	r2, r2, r3
 8006624:	4b41      	ldr	r3, [pc, #260]	; (800672c <UART_SetConfig+0x1c4>)
 8006626:	fba3 0302 	umull	r0, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2064      	movs	r0, #100	; 0x64
 800662e:	fb00 f303 	mul.w	r3, r0, r3
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	3332      	adds	r3, #50	; 0x32
 8006638:	4a3c      	ldr	r2, [pc, #240]	; (800672c <UART_SetConfig+0x1c4>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006646:	4419      	add	r1, r3
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009a      	lsls	r2, r3, #2
 8006652:	441a      	add	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	fbb2 f2f3 	udiv	r2, r2, r3
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <UART_SetConfig+0x1c4>)
 8006660:	fba3 0302 	umull	r0, r3, r3, r2
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	2064      	movs	r0, #100	; 0x64
 8006668:	fb00 f303 	mul.w	r3, r0, r3
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	3332      	adds	r3, #50	; 0x32
 8006672:	4a2e      	ldr	r2, [pc, #184]	; (800672c <UART_SetConfig+0x1c4>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	f003 0207 	and.w	r2, r3, #7
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	440a      	add	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006686:	e04a      	b.n	800671e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009a      	lsls	r2, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	fbb2 f3f3 	udiv	r3, r2, r3
 800669e:	4a23      	ldr	r2, [pc, #140]	; (800672c <UART_SetConfig+0x1c4>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	0119      	lsls	r1, r3, #4
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009a      	lsls	r2, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80066be:	4b1b      	ldr	r3, [pc, #108]	; (800672c <UART_SetConfig+0x1c4>)
 80066c0:	fba3 0302 	umull	r0, r3, r3, r2
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	2064      	movs	r0, #100	; 0x64
 80066c8:	fb00 f303 	mul.w	r3, r0, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	3332      	adds	r3, #50	; 0x32
 80066d2:	4a16      	ldr	r2, [pc, #88]	; (800672c <UART_SetConfig+0x1c4>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066de:	4419      	add	r1, r3
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009a      	lsls	r2, r3, #2
 80066ea:	441a      	add	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <UART_SetConfig+0x1c4>)
 80066f8:	fba3 0302 	umull	r0, r3, r3, r2
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	2064      	movs	r0, #100	; 0x64
 8006700:	fb00 f303 	mul.w	r3, r0, r3
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	3332      	adds	r3, #50	; 0x32
 800670a:	4a08      	ldr	r2, [pc, #32]	; (800672c <UART_SetConfig+0x1c4>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	f003 020f 	and.w	r2, r3, #15
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	440a      	add	r2, r1
 800671c:	609a      	str	r2, [r3, #8]
}
 800671e:	bf00      	nop
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40013800 	.word	0x40013800
 800672c:	51eb851f 	.word	0x51eb851f

08006730 <__errno>:
 8006730:	4b01      	ldr	r3, [pc, #4]	; (8006738 <__errno+0x8>)
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000014 	.word	0x20000014

0800673c <__libc_init_array>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	2600      	movs	r6, #0
 8006740:	4d0c      	ldr	r5, [pc, #48]	; (8006774 <__libc_init_array+0x38>)
 8006742:	4c0d      	ldr	r4, [pc, #52]	; (8006778 <__libc_init_array+0x3c>)
 8006744:	1b64      	subs	r4, r4, r5
 8006746:	10a4      	asrs	r4, r4, #2
 8006748:	42a6      	cmp	r6, r4
 800674a:	d109      	bne.n	8006760 <__libc_init_array+0x24>
 800674c:	f002 fefc 	bl	8009548 <_init>
 8006750:	2600      	movs	r6, #0
 8006752:	4d0a      	ldr	r5, [pc, #40]	; (800677c <__libc_init_array+0x40>)
 8006754:	4c0a      	ldr	r4, [pc, #40]	; (8006780 <__libc_init_array+0x44>)
 8006756:	1b64      	subs	r4, r4, r5
 8006758:	10a4      	asrs	r4, r4, #2
 800675a:	42a6      	cmp	r6, r4
 800675c:	d105      	bne.n	800676a <__libc_init_array+0x2e>
 800675e:	bd70      	pop	{r4, r5, r6, pc}
 8006760:	f855 3b04 	ldr.w	r3, [r5], #4
 8006764:	4798      	blx	r3
 8006766:	3601      	adds	r6, #1
 8006768:	e7ee      	b.n	8006748 <__libc_init_array+0xc>
 800676a:	f855 3b04 	ldr.w	r3, [r5], #4
 800676e:	4798      	blx	r3
 8006770:	3601      	adds	r6, #1
 8006772:	e7f2      	b.n	800675a <__libc_init_array+0x1e>
 8006774:	08009bb4 	.word	0x08009bb4
 8006778:	08009bb4 	.word	0x08009bb4
 800677c:	08009bb4 	.word	0x08009bb4
 8006780:	08009bb8 	.word	0x08009bb8

08006784 <memset>:
 8006784:	4603      	mov	r3, r0
 8006786:	4402      	add	r2, r0
 8006788:	4293      	cmp	r3, r2
 800678a:	d100      	bne.n	800678e <memset+0xa>
 800678c:	4770      	bx	lr
 800678e:	f803 1b01 	strb.w	r1, [r3], #1
 8006792:	e7f9      	b.n	8006788 <memset+0x4>

08006794 <__cvt>:
 8006794:	2b00      	cmp	r3, #0
 8006796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800679a:	461f      	mov	r7, r3
 800679c:	bfbb      	ittet	lt
 800679e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80067a2:	461f      	movlt	r7, r3
 80067a4:	2300      	movge	r3, #0
 80067a6:	232d      	movlt	r3, #45	; 0x2d
 80067a8:	b088      	sub	sp, #32
 80067aa:	4614      	mov	r4, r2
 80067ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80067b0:	7013      	strb	r3, [r2, #0]
 80067b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80067b8:	f023 0820 	bic.w	r8, r3, #32
 80067bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067c0:	d005      	beq.n	80067ce <__cvt+0x3a>
 80067c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067c6:	d100      	bne.n	80067ca <__cvt+0x36>
 80067c8:	3501      	adds	r5, #1
 80067ca:	2302      	movs	r3, #2
 80067cc:	e000      	b.n	80067d0 <__cvt+0x3c>
 80067ce:	2303      	movs	r3, #3
 80067d0:	aa07      	add	r2, sp, #28
 80067d2:	9204      	str	r2, [sp, #16]
 80067d4:	aa06      	add	r2, sp, #24
 80067d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80067da:	e9cd 3500 	strd	r3, r5, [sp]
 80067de:	4622      	mov	r2, r4
 80067e0:	463b      	mov	r3, r7
 80067e2:	f000 fce5 	bl	80071b0 <_dtoa_r>
 80067e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067ea:	4606      	mov	r6, r0
 80067ec:	d102      	bne.n	80067f4 <__cvt+0x60>
 80067ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067f0:	07db      	lsls	r3, r3, #31
 80067f2:	d522      	bpl.n	800683a <__cvt+0xa6>
 80067f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067f8:	eb06 0905 	add.w	r9, r6, r5
 80067fc:	d110      	bne.n	8006820 <__cvt+0x8c>
 80067fe:	7833      	ldrb	r3, [r6, #0]
 8006800:	2b30      	cmp	r3, #48	; 0x30
 8006802:	d10a      	bne.n	800681a <__cvt+0x86>
 8006804:	2200      	movs	r2, #0
 8006806:	2300      	movs	r3, #0
 8006808:	4620      	mov	r0, r4
 800680a:	4639      	mov	r1, r7
 800680c:	f7fa f8e4 	bl	80009d8 <__aeabi_dcmpeq>
 8006810:	b918      	cbnz	r0, 800681a <__cvt+0x86>
 8006812:	f1c5 0501 	rsb	r5, r5, #1
 8006816:	f8ca 5000 	str.w	r5, [sl]
 800681a:	f8da 3000 	ldr.w	r3, [sl]
 800681e:	4499      	add	r9, r3
 8006820:	2200      	movs	r2, #0
 8006822:	2300      	movs	r3, #0
 8006824:	4620      	mov	r0, r4
 8006826:	4639      	mov	r1, r7
 8006828:	f7fa f8d6 	bl	80009d8 <__aeabi_dcmpeq>
 800682c:	b108      	cbz	r0, 8006832 <__cvt+0x9e>
 800682e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006832:	2230      	movs	r2, #48	; 0x30
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	454b      	cmp	r3, r9
 8006838:	d307      	bcc.n	800684a <__cvt+0xb6>
 800683a:	4630      	mov	r0, r6
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006840:	1b9b      	subs	r3, r3, r6
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	b008      	add	sp, #32
 8006846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	9107      	str	r1, [sp, #28]
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	e7f0      	b.n	8006834 <__cvt+0xa0>

08006852 <__exponent>:
 8006852:	4603      	mov	r3, r0
 8006854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006856:	2900      	cmp	r1, #0
 8006858:	f803 2b02 	strb.w	r2, [r3], #2
 800685c:	bfb6      	itet	lt
 800685e:	222d      	movlt	r2, #45	; 0x2d
 8006860:	222b      	movge	r2, #43	; 0x2b
 8006862:	4249      	neglt	r1, r1
 8006864:	2909      	cmp	r1, #9
 8006866:	7042      	strb	r2, [r0, #1]
 8006868:	dd2b      	ble.n	80068c2 <__exponent+0x70>
 800686a:	f10d 0407 	add.w	r4, sp, #7
 800686e:	46a4      	mov	ip, r4
 8006870:	270a      	movs	r7, #10
 8006872:	fb91 f6f7 	sdiv	r6, r1, r7
 8006876:	460a      	mov	r2, r1
 8006878:	46a6      	mov	lr, r4
 800687a:	fb07 1516 	mls	r5, r7, r6, r1
 800687e:	2a63      	cmp	r2, #99	; 0x63
 8006880:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006884:	4631      	mov	r1, r6
 8006886:	f104 34ff 	add.w	r4, r4, #4294967295
 800688a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800688e:	dcf0      	bgt.n	8006872 <__exponent+0x20>
 8006890:	3130      	adds	r1, #48	; 0x30
 8006892:	f1ae 0502 	sub.w	r5, lr, #2
 8006896:	f804 1c01 	strb.w	r1, [r4, #-1]
 800689a:	4629      	mov	r1, r5
 800689c:	1c44      	adds	r4, r0, #1
 800689e:	4561      	cmp	r1, ip
 80068a0:	d30a      	bcc.n	80068b8 <__exponent+0x66>
 80068a2:	f10d 0209 	add.w	r2, sp, #9
 80068a6:	eba2 020e 	sub.w	r2, r2, lr
 80068aa:	4565      	cmp	r5, ip
 80068ac:	bf88      	it	hi
 80068ae:	2200      	movhi	r2, #0
 80068b0:	4413      	add	r3, r2
 80068b2:	1a18      	subs	r0, r3, r0
 80068b4:	b003      	add	sp, #12
 80068b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068bc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068c0:	e7ed      	b.n	800689e <__exponent+0x4c>
 80068c2:	2330      	movs	r3, #48	; 0x30
 80068c4:	3130      	adds	r1, #48	; 0x30
 80068c6:	7083      	strb	r3, [r0, #2]
 80068c8:	70c1      	strb	r1, [r0, #3]
 80068ca:	1d03      	adds	r3, r0, #4
 80068cc:	e7f1      	b.n	80068b2 <__exponent+0x60>
	...

080068d0 <_printf_float>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	b091      	sub	sp, #68	; 0x44
 80068d6:	460c      	mov	r4, r1
 80068d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80068dc:	4616      	mov	r6, r2
 80068de:	461f      	mov	r7, r3
 80068e0:	4605      	mov	r5, r0
 80068e2:	f001 fa53 	bl	8007d8c <_localeconv_r>
 80068e6:	6803      	ldr	r3, [r0, #0]
 80068e8:	4618      	mov	r0, r3
 80068ea:	9309      	str	r3, [sp, #36]	; 0x24
 80068ec:	f7f9 fc48 	bl	8000180 <strlen>
 80068f0:	2300      	movs	r3, #0
 80068f2:	930e      	str	r3, [sp, #56]	; 0x38
 80068f4:	f8d8 3000 	ldr.w	r3, [r8]
 80068f8:	900a      	str	r0, [sp, #40]	; 0x28
 80068fa:	3307      	adds	r3, #7
 80068fc:	f023 0307 	bic.w	r3, r3, #7
 8006900:	f103 0208 	add.w	r2, r3, #8
 8006904:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006908:	f8d4 b000 	ldr.w	fp, [r4]
 800690c:	f8c8 2000 	str.w	r2, [r8]
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006918:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800691c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006920:	930b      	str	r3, [sp, #44]	; 0x2c
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	4640      	mov	r0, r8
 8006928:	4b9c      	ldr	r3, [pc, #624]	; (8006b9c <_printf_float+0x2cc>)
 800692a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800692c:	f7fa f886 	bl	8000a3c <__aeabi_dcmpun>
 8006930:	bb70      	cbnz	r0, 8006990 <_printf_float+0xc0>
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	4640      	mov	r0, r8
 8006938:	4b98      	ldr	r3, [pc, #608]	; (8006b9c <_printf_float+0x2cc>)
 800693a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800693c:	f7fa f860 	bl	8000a00 <__aeabi_dcmple>
 8006940:	bb30      	cbnz	r0, 8006990 <_printf_float+0xc0>
 8006942:	2200      	movs	r2, #0
 8006944:	2300      	movs	r3, #0
 8006946:	4640      	mov	r0, r8
 8006948:	4651      	mov	r1, sl
 800694a:	f7fa f84f 	bl	80009ec <__aeabi_dcmplt>
 800694e:	b110      	cbz	r0, 8006956 <_printf_float+0x86>
 8006950:	232d      	movs	r3, #45	; 0x2d
 8006952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006956:	4b92      	ldr	r3, [pc, #584]	; (8006ba0 <_printf_float+0x2d0>)
 8006958:	4892      	ldr	r0, [pc, #584]	; (8006ba4 <_printf_float+0x2d4>)
 800695a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800695e:	bf94      	ite	ls
 8006960:	4698      	movls	r8, r3
 8006962:	4680      	movhi	r8, r0
 8006964:	2303      	movs	r3, #3
 8006966:	f04f 0a00 	mov.w	sl, #0
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	f02b 0304 	bic.w	r3, fp, #4
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	4633      	mov	r3, r6
 8006974:	4621      	mov	r1, r4
 8006976:	4628      	mov	r0, r5
 8006978:	9700      	str	r7, [sp, #0]
 800697a:	aa0f      	add	r2, sp, #60	; 0x3c
 800697c:	f000 f9d4 	bl	8006d28 <_printf_common>
 8006980:	3001      	adds	r0, #1
 8006982:	f040 8090 	bne.w	8006aa6 <_printf_float+0x1d6>
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	b011      	add	sp, #68	; 0x44
 800698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006990:	4642      	mov	r2, r8
 8006992:	4653      	mov	r3, sl
 8006994:	4640      	mov	r0, r8
 8006996:	4651      	mov	r1, sl
 8006998:	f7fa f850 	bl	8000a3c <__aeabi_dcmpun>
 800699c:	b148      	cbz	r0, 80069b2 <_printf_float+0xe2>
 800699e:	f1ba 0f00 	cmp.w	sl, #0
 80069a2:	bfb8      	it	lt
 80069a4:	232d      	movlt	r3, #45	; 0x2d
 80069a6:	4880      	ldr	r0, [pc, #512]	; (8006ba8 <_printf_float+0x2d8>)
 80069a8:	bfb8      	it	lt
 80069aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069ae:	4b7f      	ldr	r3, [pc, #508]	; (8006bac <_printf_float+0x2dc>)
 80069b0:	e7d3      	b.n	800695a <_printf_float+0x8a>
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	d142      	bne.n	8006a42 <_printf_float+0x172>
 80069bc:	2306      	movs	r3, #6
 80069be:	6063      	str	r3, [r4, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	9206      	str	r2, [sp, #24]
 80069c4:	aa0e      	add	r2, sp, #56	; 0x38
 80069c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80069ca:	aa0d      	add	r2, sp, #52	; 0x34
 80069cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80069d0:	9203      	str	r2, [sp, #12]
 80069d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80069d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80069da:	6023      	str	r3, [r4, #0]
 80069dc:	6863      	ldr	r3, [r4, #4]
 80069de:	4642      	mov	r2, r8
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	4628      	mov	r0, r5
 80069e4:	4653      	mov	r3, sl
 80069e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80069e8:	f7ff fed4 	bl	8006794 <__cvt>
 80069ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069ee:	4680      	mov	r8, r0
 80069f0:	2947      	cmp	r1, #71	; 0x47
 80069f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069f4:	d108      	bne.n	8006a08 <_printf_float+0x138>
 80069f6:	1cc8      	adds	r0, r1, #3
 80069f8:	db02      	blt.n	8006a00 <_printf_float+0x130>
 80069fa:	6863      	ldr	r3, [r4, #4]
 80069fc:	4299      	cmp	r1, r3
 80069fe:	dd40      	ble.n	8006a82 <_printf_float+0x1b2>
 8006a00:	f1a9 0902 	sub.w	r9, r9, #2
 8006a04:	fa5f f989 	uxtb.w	r9, r9
 8006a08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a0c:	d81f      	bhi.n	8006a4e <_printf_float+0x17e>
 8006a0e:	464a      	mov	r2, r9
 8006a10:	3901      	subs	r1, #1
 8006a12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a16:	910d      	str	r1, [sp, #52]	; 0x34
 8006a18:	f7ff ff1b 	bl	8006852 <__exponent>
 8006a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a1e:	4682      	mov	sl, r0
 8006a20:	1813      	adds	r3, r2, r0
 8006a22:	2a01      	cmp	r2, #1
 8006a24:	6123      	str	r3, [r4, #16]
 8006a26:	dc02      	bgt.n	8006a2e <_printf_float+0x15e>
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	07d2      	lsls	r2, r2, #31
 8006a2c:	d501      	bpl.n	8006a32 <_printf_float+0x162>
 8006a2e:	3301      	adds	r3, #1
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d09b      	beq.n	8006972 <_printf_float+0xa2>
 8006a3a:	232d      	movs	r3, #45	; 0x2d
 8006a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a40:	e797      	b.n	8006972 <_printf_float+0xa2>
 8006a42:	2947      	cmp	r1, #71	; 0x47
 8006a44:	d1bc      	bne.n	80069c0 <_printf_float+0xf0>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ba      	bne.n	80069c0 <_printf_float+0xf0>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7b7      	b.n	80069be <_printf_float+0xee>
 8006a4e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006a52:	d118      	bne.n	8006a86 <_printf_float+0x1b6>
 8006a54:	2900      	cmp	r1, #0
 8006a56:	6863      	ldr	r3, [r4, #4]
 8006a58:	dd0b      	ble.n	8006a72 <_printf_float+0x1a2>
 8006a5a:	6121      	str	r1, [r4, #16]
 8006a5c:	b913      	cbnz	r3, 8006a64 <_printf_float+0x194>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	07d0      	lsls	r0, r2, #31
 8006a62:	d502      	bpl.n	8006a6a <_printf_float+0x19a>
 8006a64:	3301      	adds	r3, #1
 8006a66:	440b      	add	r3, r1
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	f04f 0a00 	mov.w	sl, #0
 8006a6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a70:	e7df      	b.n	8006a32 <_printf_float+0x162>
 8006a72:	b913      	cbnz	r3, 8006a7a <_printf_float+0x1aa>
 8006a74:	6822      	ldr	r2, [r4, #0]
 8006a76:	07d2      	lsls	r2, r2, #31
 8006a78:	d501      	bpl.n	8006a7e <_printf_float+0x1ae>
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	e7f4      	b.n	8006a68 <_printf_float+0x198>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e7f2      	b.n	8006a68 <_printf_float+0x198>
 8006a82:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	db05      	blt.n	8006a98 <_printf_float+0x1c8>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	6121      	str	r1, [r4, #16]
 8006a90:	07d8      	lsls	r0, r3, #31
 8006a92:	d5ea      	bpl.n	8006a6a <_printf_float+0x19a>
 8006a94:	1c4b      	adds	r3, r1, #1
 8006a96:	e7e7      	b.n	8006a68 <_printf_float+0x198>
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	bfcc      	ite	gt
 8006a9c:	2201      	movgt	r2, #1
 8006a9e:	f1c1 0202 	rsble	r2, r1, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	e7e0      	b.n	8006a68 <_printf_float+0x198>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	055a      	lsls	r2, r3, #21
 8006aaa:	d407      	bmi.n	8006abc <_printf_float+0x1ec>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	4642      	mov	r2, r8
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d12b      	bne.n	8006b12 <_printf_float+0x242>
 8006aba:	e764      	b.n	8006986 <_printf_float+0xb6>
 8006abc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ac0:	f240 80dd 	bls.w	8006c7e <_printf_float+0x3ae>
 8006ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	f7f9 ff84 	bl	80009d8 <__aeabi_dcmpeq>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d033      	beq.n	8006b3c <_printf_float+0x26c>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	4a35      	ldr	r2, [pc, #212]	; (8006bb0 <_printf_float+0x2e0>)
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f af51 	beq.w	8006986 <_printf_float+0xb6>
 8006ae4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	db02      	blt.n	8006af2 <_printf_float+0x222>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	07d8      	lsls	r0, r3, #31
 8006af0:	d50f      	bpl.n	8006b12 <_printf_float+0x242>
 8006af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f af42 	beq.w	8006986 <_printf_float+0xb6>
 8006b02:	f04f 0800 	mov.w	r8, #0
 8006b06:	f104 091a 	add.w	r9, r4, #26
 8006b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	4543      	cmp	r3, r8
 8006b10:	dc09      	bgt.n	8006b26 <_printf_float+0x256>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	079b      	lsls	r3, r3, #30
 8006b16:	f100 8102 	bmi.w	8006d1e <_printf_float+0x44e>
 8006b1a:	68e0      	ldr	r0, [r4, #12]
 8006b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b1e:	4298      	cmp	r0, r3
 8006b20:	bfb8      	it	lt
 8006b22:	4618      	movlt	r0, r3
 8006b24:	e731      	b.n	800698a <_printf_float+0xba>
 8006b26:	2301      	movs	r3, #1
 8006b28:	464a      	mov	r2, r9
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	f43f af28 	beq.w	8006986 <_printf_float+0xb6>
 8006b36:	f108 0801 	add.w	r8, r8, #1
 8006b3a:	e7e6      	b.n	8006b0a <_printf_float+0x23a>
 8006b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	dc38      	bgt.n	8006bb4 <_printf_float+0x2e4>
 8006b42:	2301      	movs	r3, #1
 8006b44:	4631      	mov	r1, r6
 8006b46:	4628      	mov	r0, r5
 8006b48:	4a19      	ldr	r2, [pc, #100]	; (8006bb0 <_printf_float+0x2e0>)
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f43f af1a 	beq.w	8006986 <_printf_float+0xb6>
 8006b52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b56:	4313      	orrs	r3, r2
 8006b58:	d102      	bne.n	8006b60 <_printf_float+0x290>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	07d9      	lsls	r1, r3, #31
 8006b5e:	d5d8      	bpl.n	8006b12 <_printf_float+0x242>
 8006b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f af0b 	beq.w	8006986 <_printf_float+0xb6>
 8006b70:	f04f 0900 	mov.w	r9, #0
 8006b74:	f104 0a1a 	add.w	sl, r4, #26
 8006b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b7a:	425b      	negs	r3, r3
 8006b7c:	454b      	cmp	r3, r9
 8006b7e:	dc01      	bgt.n	8006b84 <_printf_float+0x2b4>
 8006b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b82:	e794      	b.n	8006aae <_printf_float+0x1de>
 8006b84:	2301      	movs	r3, #1
 8006b86:	4652      	mov	r2, sl
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	f43f aef9 	beq.w	8006986 <_printf_float+0xb6>
 8006b94:	f109 0901 	add.w	r9, r9, #1
 8006b98:	e7ee      	b.n	8006b78 <_printf_float+0x2a8>
 8006b9a:	bf00      	nop
 8006b9c:	7fefffff 	.word	0x7fefffff
 8006ba0:	080097d8 	.word	0x080097d8
 8006ba4:	080097dc 	.word	0x080097dc
 8006ba8:	080097e4 	.word	0x080097e4
 8006bac:	080097e0 	.word	0x080097e0
 8006bb0:	080097e8 	.word	0x080097e8
 8006bb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	bfa8      	it	ge
 8006bbc:	461a      	movge	r2, r3
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	4691      	mov	r9, r2
 8006bc2:	dc37      	bgt.n	8006c34 <_printf_float+0x364>
 8006bc4:	f04f 0b00 	mov.w	fp, #0
 8006bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bcc:	f104 021a 	add.w	r2, r4, #26
 8006bd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006bd4:	ebaa 0309 	sub.w	r3, sl, r9
 8006bd8:	455b      	cmp	r3, fp
 8006bda:	dc33      	bgt.n	8006c44 <_printf_float+0x374>
 8006bdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006be0:	429a      	cmp	r2, r3
 8006be2:	db3b      	blt.n	8006c5c <_printf_float+0x38c>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	07da      	lsls	r2, r3, #31
 8006be8:	d438      	bmi.n	8006c5c <_printf_float+0x38c>
 8006bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bee:	eba3 020a 	sub.w	r2, r3, sl
 8006bf2:	eba3 0901 	sub.w	r9, r3, r1
 8006bf6:	4591      	cmp	r9, r2
 8006bf8:	bfa8      	it	ge
 8006bfa:	4691      	movge	r9, r2
 8006bfc:	f1b9 0f00 	cmp.w	r9, #0
 8006c00:	dc34      	bgt.n	8006c6c <_printf_float+0x39c>
 8006c02:	f04f 0800 	mov.w	r8, #0
 8006c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c0a:	f104 0a1a 	add.w	sl, r4, #26
 8006c0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	eba3 0309 	sub.w	r3, r3, r9
 8006c18:	4543      	cmp	r3, r8
 8006c1a:	f77f af7a 	ble.w	8006b12 <_printf_float+0x242>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4652      	mov	r2, sl
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b8      	blx	r7
 8006c28:	3001      	adds	r0, #1
 8006c2a:	f43f aeac 	beq.w	8006986 <_printf_float+0xb6>
 8006c2e:	f108 0801 	add.w	r8, r8, #1
 8006c32:	e7ec      	b.n	8006c0e <_printf_float+0x33e>
 8006c34:	4613      	mov	r3, r2
 8006c36:	4631      	mov	r1, r6
 8006c38:	4642      	mov	r2, r8
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d1c0      	bne.n	8006bc4 <_printf_float+0x2f4>
 8006c42:	e6a0      	b.n	8006986 <_printf_float+0xb6>
 8006c44:	2301      	movs	r3, #1
 8006c46:	4631      	mov	r1, r6
 8006c48:	4628      	mov	r0, r5
 8006c4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	f43f ae99 	beq.w	8006986 <_printf_float+0xb6>
 8006c54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c56:	f10b 0b01 	add.w	fp, fp, #1
 8006c5a:	e7b9      	b.n	8006bd0 <_printf_float+0x300>
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	d1bf      	bne.n	8006bea <_printf_float+0x31a>
 8006c6a:	e68c      	b.n	8006986 <_printf_float+0xb6>
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	eb08 020a 	add.w	r2, r8, sl
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d1c2      	bne.n	8006c02 <_printf_float+0x332>
 8006c7c:	e683      	b.n	8006986 <_printf_float+0xb6>
 8006c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c80:	2a01      	cmp	r2, #1
 8006c82:	dc01      	bgt.n	8006c88 <_printf_float+0x3b8>
 8006c84:	07db      	lsls	r3, r3, #31
 8006c86:	d537      	bpl.n	8006cf8 <_printf_float+0x428>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4642      	mov	r2, r8
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f ae77 	beq.w	8006986 <_printf_float+0xb6>
 8006c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f43f ae6f 	beq.w	8006986 <_printf_float+0xb6>
 8006ca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cac:	2200      	movs	r2, #0
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f7f9 fe92 	bl	80009d8 <__aeabi_dcmpeq>
 8006cb4:	b9d8      	cbnz	r0, 8006cee <_printf_float+0x41e>
 8006cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cb8:	f108 0201 	add.w	r2, r8, #1
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	47b8      	blx	r7
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d10e      	bne.n	8006ce6 <_printf_float+0x416>
 8006cc8:	e65d      	b.n	8006986 <_printf_float+0xb6>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	464a      	mov	r2, r9
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	47b8      	blx	r7
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f43f ae56 	beq.w	8006986 <_printf_float+0xb6>
 8006cda:	f108 0801 	add.w	r8, r8, #1
 8006cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	4543      	cmp	r3, r8
 8006ce4:	dcf1      	bgt.n	8006cca <_printf_float+0x3fa>
 8006ce6:	4653      	mov	r3, sl
 8006ce8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cec:	e6e0      	b.n	8006ab0 <_printf_float+0x1e0>
 8006cee:	f04f 0800 	mov.w	r8, #0
 8006cf2:	f104 091a 	add.w	r9, r4, #26
 8006cf6:	e7f2      	b.n	8006cde <_printf_float+0x40e>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4642      	mov	r2, r8
 8006cfc:	e7df      	b.n	8006cbe <_printf_float+0x3ee>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	464a      	mov	r2, r9
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b8      	blx	r7
 8006d08:	3001      	adds	r0, #1
 8006d0a:	f43f ae3c 	beq.w	8006986 <_printf_float+0xb6>
 8006d0e:	f108 0801 	add.w	r8, r8, #1
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d16:	1a5b      	subs	r3, r3, r1
 8006d18:	4543      	cmp	r3, r8
 8006d1a:	dcf0      	bgt.n	8006cfe <_printf_float+0x42e>
 8006d1c:	e6fd      	b.n	8006b1a <_printf_float+0x24a>
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	f104 0919 	add.w	r9, r4, #25
 8006d26:	e7f4      	b.n	8006d12 <_printf_float+0x442>

08006d28 <_printf_common>:
 8006d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	4699      	mov	r9, r3
 8006d30:	688a      	ldr	r2, [r1, #8]
 8006d32:	690b      	ldr	r3, [r1, #16]
 8006d34:	4607      	mov	r7, r0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bfb8      	it	lt
 8006d3a:	4613      	movlt	r3, r2
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d42:	460c      	mov	r4, r1
 8006d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d48:	b10a      	cbz	r2, 8006d4e <_printf_common+0x26>
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	6033      	str	r3, [r6, #0]
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	0699      	lsls	r1, r3, #26
 8006d52:	bf42      	ittt	mi
 8006d54:	6833      	ldrmi	r3, [r6, #0]
 8006d56:	3302      	addmi	r3, #2
 8006d58:	6033      	strmi	r3, [r6, #0]
 8006d5a:	6825      	ldr	r5, [r4, #0]
 8006d5c:	f015 0506 	ands.w	r5, r5, #6
 8006d60:	d106      	bne.n	8006d70 <_printf_common+0x48>
 8006d62:	f104 0a19 	add.w	sl, r4, #25
 8006d66:	68e3      	ldr	r3, [r4, #12]
 8006d68:	6832      	ldr	r2, [r6, #0]
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	42ab      	cmp	r3, r5
 8006d6e:	dc28      	bgt.n	8006dc2 <_printf_common+0x9a>
 8006d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d74:	1e13      	subs	r3, r2, #0
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	bf18      	it	ne
 8006d7a:	2301      	movne	r3, #1
 8006d7c:	0692      	lsls	r2, r2, #26
 8006d7e:	d42d      	bmi.n	8006ddc <_printf_common+0xb4>
 8006d80:	4649      	mov	r1, r9
 8006d82:	4638      	mov	r0, r7
 8006d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d88:	47c0      	blx	r8
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d020      	beq.n	8006dd0 <_printf_common+0xa8>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	68e5      	ldr	r5, [r4, #12]
 8006d92:	f003 0306 	and.w	r3, r3, #6
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	bf18      	it	ne
 8006d9a:	2500      	movne	r5, #0
 8006d9c:	6832      	ldr	r2, [r6, #0]
 8006d9e:	f04f 0600 	mov.w	r6, #0
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	bf08      	it	eq
 8006da6:	1aad      	subeq	r5, r5, r2
 8006da8:	6922      	ldr	r2, [r4, #16]
 8006daa:	bf08      	it	eq
 8006dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db0:	4293      	cmp	r3, r2
 8006db2:	bfc4      	itt	gt
 8006db4:	1a9b      	subgt	r3, r3, r2
 8006db6:	18ed      	addgt	r5, r5, r3
 8006db8:	341a      	adds	r4, #26
 8006dba:	42b5      	cmp	r5, r6
 8006dbc:	d11a      	bne.n	8006df4 <_printf_common+0xcc>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e008      	b.n	8006dd4 <_printf_common+0xac>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	4638      	mov	r0, r7
 8006dca:	47c0      	blx	r8
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_printf_common+0xb0>
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	3501      	adds	r5, #1
 8006dda:	e7c4      	b.n	8006d66 <_printf_common+0x3e>
 8006ddc:	2030      	movs	r0, #48	; 0x30
 8006dde:	18e1      	adds	r1, r4, r3
 8006de0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dea:	4422      	add	r2, r4
 8006dec:	3302      	adds	r3, #2
 8006dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df2:	e7c5      	b.n	8006d80 <_printf_common+0x58>
 8006df4:	2301      	movs	r3, #1
 8006df6:	4622      	mov	r2, r4
 8006df8:	4649      	mov	r1, r9
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c0      	blx	r8
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d0e6      	beq.n	8006dd0 <_printf_common+0xa8>
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7d9      	b.n	8006dba <_printf_common+0x92>
	...

08006e08 <_printf_i>:
 8006e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	7e0f      	ldrb	r7, [r1, #24]
 8006e0e:	4691      	mov	r9, r2
 8006e10:	2f78      	cmp	r7, #120	; 0x78
 8006e12:	4680      	mov	r8, r0
 8006e14:	460c      	mov	r4, r1
 8006e16:	469a      	mov	sl, r3
 8006e18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e1e:	d807      	bhi.n	8006e30 <_printf_i+0x28>
 8006e20:	2f62      	cmp	r7, #98	; 0x62
 8006e22:	d80a      	bhi.n	8006e3a <_printf_i+0x32>
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	f000 80d9 	beq.w	8006fdc <_printf_i+0x1d4>
 8006e2a:	2f58      	cmp	r7, #88	; 0x58
 8006e2c:	f000 80a4 	beq.w	8006f78 <_printf_i+0x170>
 8006e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e38:	e03a      	b.n	8006eb0 <_printf_i+0xa8>
 8006e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e3e:	2b15      	cmp	r3, #21
 8006e40:	d8f6      	bhi.n	8006e30 <_printf_i+0x28>
 8006e42:	a101      	add	r1, pc, #4	; (adr r1, 8006e48 <_printf_i+0x40>)
 8006e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006eb5 	.word	0x08006eb5
 8006e50:	08006e31 	.word	0x08006e31
 8006e54:	08006e31 	.word	0x08006e31
 8006e58:	08006e31 	.word	0x08006e31
 8006e5c:	08006e31 	.word	0x08006e31
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006e31 	.word	0x08006e31
 8006e68:	08006e31 	.word	0x08006e31
 8006e6c:	08006e31 	.word	0x08006e31
 8006e70:	08006e31 	.word	0x08006e31
 8006e74:	08006fc3 	.word	0x08006fc3
 8006e78:	08006ee5 	.word	0x08006ee5
 8006e7c:	08006fa5 	.word	0x08006fa5
 8006e80:	08006e31 	.word	0x08006e31
 8006e84:	08006e31 	.word	0x08006e31
 8006e88:	08006fe5 	.word	0x08006fe5
 8006e8c:	08006e31 	.word	0x08006e31
 8006e90:	08006ee5 	.word	0x08006ee5
 8006e94:	08006e31 	.word	0x08006e31
 8006e98:	08006e31 	.word	0x08006e31
 8006e9c:	08006fad 	.word	0x08006fad
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	602a      	str	r2, [r5, #0]
 8006ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0a4      	b.n	8006ffe <_printf_i+0x1f6>
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	6829      	ldr	r1, [r5, #0]
 8006eb8:	0606      	lsls	r6, r0, #24
 8006eba:	f101 0304 	add.w	r3, r1, #4
 8006ebe:	d50a      	bpl.n	8006ed6 <_printf_i+0xce>
 8006ec0:	680e      	ldr	r6, [r1, #0]
 8006ec2:	602b      	str	r3, [r5, #0]
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	da03      	bge.n	8006ed0 <_printf_i+0xc8>
 8006ec8:	232d      	movs	r3, #45	; 0x2d
 8006eca:	4276      	negs	r6, r6
 8006ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed0:	230a      	movs	r3, #10
 8006ed2:	485e      	ldr	r0, [pc, #376]	; (800704c <_printf_i+0x244>)
 8006ed4:	e019      	b.n	8006f0a <_printf_i+0x102>
 8006ed6:	680e      	ldr	r6, [r1, #0]
 8006ed8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	bf18      	it	ne
 8006ee0:	b236      	sxthne	r6, r6
 8006ee2:	e7ef      	b.n	8006ec4 <_printf_i+0xbc>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	6820      	ldr	r0, [r4, #0]
 8006ee8:	1d19      	adds	r1, r3, #4
 8006eea:	6029      	str	r1, [r5, #0]
 8006eec:	0601      	lsls	r1, r0, #24
 8006eee:	d501      	bpl.n	8006ef4 <_printf_i+0xec>
 8006ef0:	681e      	ldr	r6, [r3, #0]
 8006ef2:	e002      	b.n	8006efa <_printf_i+0xf2>
 8006ef4:	0646      	lsls	r6, r0, #25
 8006ef6:	d5fb      	bpl.n	8006ef0 <_printf_i+0xe8>
 8006ef8:	881e      	ldrh	r6, [r3, #0]
 8006efa:	2f6f      	cmp	r7, #111	; 0x6f
 8006efc:	bf0c      	ite	eq
 8006efe:	2308      	moveq	r3, #8
 8006f00:	230a      	movne	r3, #10
 8006f02:	4852      	ldr	r0, [pc, #328]	; (800704c <_printf_i+0x244>)
 8006f04:	2100      	movs	r1, #0
 8006f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f0a:	6865      	ldr	r5, [r4, #4]
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	bfa8      	it	ge
 8006f10:	6821      	ldrge	r1, [r4, #0]
 8006f12:	60a5      	str	r5, [r4, #8]
 8006f14:	bfa4      	itt	ge
 8006f16:	f021 0104 	bicge.w	r1, r1, #4
 8006f1a:	6021      	strge	r1, [r4, #0]
 8006f1c:	b90e      	cbnz	r6, 8006f22 <_printf_i+0x11a>
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	d04d      	beq.n	8006fbe <_printf_i+0x1b6>
 8006f22:	4615      	mov	r5, r2
 8006f24:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f28:	fb03 6711 	mls	r7, r3, r1, r6
 8006f2c:	5dc7      	ldrb	r7, [r0, r7]
 8006f2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f32:	4637      	mov	r7, r6
 8006f34:	42bb      	cmp	r3, r7
 8006f36:	460e      	mov	r6, r1
 8006f38:	d9f4      	bls.n	8006f24 <_printf_i+0x11c>
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d10b      	bne.n	8006f56 <_printf_i+0x14e>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	07de      	lsls	r6, r3, #31
 8006f42:	d508      	bpl.n	8006f56 <_printf_i+0x14e>
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	6861      	ldr	r1, [r4, #4]
 8006f48:	4299      	cmp	r1, r3
 8006f4a:	bfde      	ittt	le
 8006f4c:	2330      	movle	r3, #48	; 0x30
 8006f4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f56:	1b52      	subs	r2, r2, r5
 8006f58:	6122      	str	r2, [r4, #16]
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4640      	mov	r0, r8
 8006f60:	f8cd a000 	str.w	sl, [sp]
 8006f64:	aa03      	add	r2, sp, #12
 8006f66:	f7ff fedf 	bl	8006d28 <_printf_common>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d14c      	bne.n	8007008 <_printf_i+0x200>
 8006f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f72:	b004      	add	sp, #16
 8006f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f78:	4834      	ldr	r0, [pc, #208]	; (800704c <_printf_i+0x244>)
 8006f7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f7e:	6829      	ldr	r1, [r5, #0]
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f86:	6029      	str	r1, [r5, #0]
 8006f88:	061d      	lsls	r5, r3, #24
 8006f8a:	d514      	bpl.n	8006fb6 <_printf_i+0x1ae>
 8006f8c:	07df      	lsls	r7, r3, #31
 8006f8e:	bf44      	itt	mi
 8006f90:	f043 0320 	orrmi.w	r3, r3, #32
 8006f94:	6023      	strmi	r3, [r4, #0]
 8006f96:	b91e      	cbnz	r6, 8006fa0 <_printf_i+0x198>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	f023 0320 	bic.w	r3, r3, #32
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	e7af      	b.n	8006f04 <_printf_i+0xfc>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	f043 0320 	orr.w	r3, r3, #32
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	2378      	movs	r3, #120	; 0x78
 8006fae:	4828      	ldr	r0, [pc, #160]	; (8007050 <_printf_i+0x248>)
 8006fb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fb4:	e7e3      	b.n	8006f7e <_printf_i+0x176>
 8006fb6:	0659      	lsls	r1, r3, #25
 8006fb8:	bf48      	it	mi
 8006fba:	b2b6      	uxthmi	r6, r6
 8006fbc:	e7e6      	b.n	8006f8c <_printf_i+0x184>
 8006fbe:	4615      	mov	r5, r2
 8006fc0:	e7bb      	b.n	8006f3a <_printf_i+0x132>
 8006fc2:	682b      	ldr	r3, [r5, #0]
 8006fc4:	6826      	ldr	r6, [r4, #0]
 8006fc6:	1d18      	adds	r0, r3, #4
 8006fc8:	6961      	ldr	r1, [r4, #20]
 8006fca:	6028      	str	r0, [r5, #0]
 8006fcc:	0635      	lsls	r5, r6, #24
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	d501      	bpl.n	8006fd6 <_printf_i+0x1ce>
 8006fd2:	6019      	str	r1, [r3, #0]
 8006fd4:	e002      	b.n	8006fdc <_printf_i+0x1d4>
 8006fd6:	0670      	lsls	r0, r6, #25
 8006fd8:	d5fb      	bpl.n	8006fd2 <_printf_i+0x1ca>
 8006fda:	8019      	strh	r1, [r3, #0]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4615      	mov	r5, r2
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	e7ba      	b.n	8006f5a <_printf_i+0x152>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	602a      	str	r2, [r5, #0]
 8006fec:	681d      	ldr	r5, [r3, #0]
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f000 fed7 	bl	8007da4 <memchr>
 8006ff6:	b108      	cbz	r0, 8006ffc <_printf_i+0x1f4>
 8006ff8:	1b40      	subs	r0, r0, r5
 8006ffa:	6060      	str	r0, [r4, #4]
 8006ffc:	6863      	ldr	r3, [r4, #4]
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	2300      	movs	r3, #0
 8007002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007006:	e7a8      	b.n	8006f5a <_printf_i+0x152>
 8007008:	462a      	mov	r2, r5
 800700a:	4649      	mov	r1, r9
 800700c:	4640      	mov	r0, r8
 800700e:	6923      	ldr	r3, [r4, #16]
 8007010:	47d0      	blx	sl
 8007012:	3001      	adds	r0, #1
 8007014:	d0ab      	beq.n	8006f6e <_printf_i+0x166>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	079b      	lsls	r3, r3, #30
 800701a:	d413      	bmi.n	8007044 <_printf_i+0x23c>
 800701c:	68e0      	ldr	r0, [r4, #12]
 800701e:	9b03      	ldr	r3, [sp, #12]
 8007020:	4298      	cmp	r0, r3
 8007022:	bfb8      	it	lt
 8007024:	4618      	movlt	r0, r3
 8007026:	e7a4      	b.n	8006f72 <_printf_i+0x16a>
 8007028:	2301      	movs	r3, #1
 800702a:	4632      	mov	r2, r6
 800702c:	4649      	mov	r1, r9
 800702e:	4640      	mov	r0, r8
 8007030:	47d0      	blx	sl
 8007032:	3001      	adds	r0, #1
 8007034:	d09b      	beq.n	8006f6e <_printf_i+0x166>
 8007036:	3501      	adds	r5, #1
 8007038:	68e3      	ldr	r3, [r4, #12]
 800703a:	9903      	ldr	r1, [sp, #12]
 800703c:	1a5b      	subs	r3, r3, r1
 800703e:	42ab      	cmp	r3, r5
 8007040:	dcf2      	bgt.n	8007028 <_printf_i+0x220>
 8007042:	e7eb      	b.n	800701c <_printf_i+0x214>
 8007044:	2500      	movs	r5, #0
 8007046:	f104 0619 	add.w	r6, r4, #25
 800704a:	e7f5      	b.n	8007038 <_printf_i+0x230>
 800704c:	080097ea 	.word	0x080097ea
 8007050:	080097fb 	.word	0x080097fb

08007054 <siprintf>:
 8007054:	b40e      	push	{r1, r2, r3}
 8007056:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800705a:	b500      	push	{lr}
 800705c:	b09c      	sub	sp, #112	; 0x70
 800705e:	ab1d      	add	r3, sp, #116	; 0x74
 8007060:	9002      	str	r0, [sp, #8]
 8007062:	9006      	str	r0, [sp, #24]
 8007064:	9107      	str	r1, [sp, #28]
 8007066:	9104      	str	r1, [sp, #16]
 8007068:	4808      	ldr	r0, [pc, #32]	; (800708c <siprintf+0x38>)
 800706a:	4909      	ldr	r1, [pc, #36]	; (8007090 <siprintf+0x3c>)
 800706c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007070:	9105      	str	r1, [sp, #20]
 8007072:	6800      	ldr	r0, [r0, #0]
 8007074:	a902      	add	r1, sp, #8
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	f001 fb7e 	bl	8008778 <_svfiprintf_r>
 800707c:	2200      	movs	r2, #0
 800707e:	9b02      	ldr	r3, [sp, #8]
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	b01c      	add	sp, #112	; 0x70
 8007084:	f85d eb04 	ldr.w	lr, [sp], #4
 8007088:	b003      	add	sp, #12
 800708a:	4770      	bx	lr
 800708c:	20000014 	.word	0x20000014
 8007090:	ffff0208 	.word	0xffff0208

08007094 <quorem>:
 8007094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	6903      	ldr	r3, [r0, #16]
 800709a:	690c      	ldr	r4, [r1, #16]
 800709c:	4607      	mov	r7, r0
 800709e:	42a3      	cmp	r3, r4
 80070a0:	f2c0 8082 	blt.w	80071a8 <quorem+0x114>
 80070a4:	3c01      	subs	r4, #1
 80070a6:	f100 0514 	add.w	r5, r0, #20
 80070aa:	f101 0814 	add.w	r8, r1, #20
 80070ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070bc:	3301      	adds	r3, #1
 80070be:	429a      	cmp	r2, r3
 80070c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80070c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070cc:	d331      	bcc.n	8007132 <quorem+0x9e>
 80070ce:	f04f 0e00 	mov.w	lr, #0
 80070d2:	4640      	mov	r0, r8
 80070d4:	46ac      	mov	ip, r5
 80070d6:	46f2      	mov	sl, lr
 80070d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80070dc:	b293      	uxth	r3, r2
 80070de:	fb06 e303 	mla	r3, r6, r3, lr
 80070e2:	0c12      	lsrs	r2, r2, #16
 80070e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	fb06 e202 	mla	r2, r6, r2, lr
 80070ee:	ebaa 0303 	sub.w	r3, sl, r3
 80070f2:	f8dc a000 	ldr.w	sl, [ip]
 80070f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070fa:	fa1f fa8a 	uxth.w	sl, sl
 80070fe:	4453      	add	r3, sl
 8007100:	f8dc a000 	ldr.w	sl, [ip]
 8007104:	b292      	uxth	r2, r2
 8007106:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800710a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800710e:	b29b      	uxth	r3, r3
 8007110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007114:	4581      	cmp	r9, r0
 8007116:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800711a:	f84c 3b04 	str.w	r3, [ip], #4
 800711e:	d2db      	bcs.n	80070d8 <quorem+0x44>
 8007120:	f855 300b 	ldr.w	r3, [r5, fp]
 8007124:	b92b      	cbnz	r3, 8007132 <quorem+0x9e>
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	3b04      	subs	r3, #4
 800712a:	429d      	cmp	r5, r3
 800712c:	461a      	mov	r2, r3
 800712e:	d32f      	bcc.n	8007190 <quorem+0xfc>
 8007130:	613c      	str	r4, [r7, #16]
 8007132:	4638      	mov	r0, r7
 8007134:	f001 f8d0 	bl	80082d8 <__mcmp>
 8007138:	2800      	cmp	r0, #0
 800713a:	db25      	blt.n	8007188 <quorem+0xf4>
 800713c:	4628      	mov	r0, r5
 800713e:	f04f 0c00 	mov.w	ip, #0
 8007142:	3601      	adds	r6, #1
 8007144:	f858 1b04 	ldr.w	r1, [r8], #4
 8007148:	f8d0 e000 	ldr.w	lr, [r0]
 800714c:	b28b      	uxth	r3, r1
 800714e:	ebac 0303 	sub.w	r3, ip, r3
 8007152:	fa1f f28e 	uxth.w	r2, lr
 8007156:	4413      	add	r3, r2
 8007158:	0c0a      	lsrs	r2, r1, #16
 800715a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800715e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007162:	b29b      	uxth	r3, r3
 8007164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007168:	45c1      	cmp	r9, r8
 800716a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800716e:	f840 3b04 	str.w	r3, [r0], #4
 8007172:	d2e7      	bcs.n	8007144 <quorem+0xb0>
 8007174:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007178:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800717c:	b922      	cbnz	r2, 8007188 <quorem+0xf4>
 800717e:	3b04      	subs	r3, #4
 8007180:	429d      	cmp	r5, r3
 8007182:	461a      	mov	r2, r3
 8007184:	d30a      	bcc.n	800719c <quorem+0x108>
 8007186:	613c      	str	r4, [r7, #16]
 8007188:	4630      	mov	r0, r6
 800718a:	b003      	add	sp, #12
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	3b04      	subs	r3, #4
 8007194:	2a00      	cmp	r2, #0
 8007196:	d1cb      	bne.n	8007130 <quorem+0x9c>
 8007198:	3c01      	subs	r4, #1
 800719a:	e7c6      	b.n	800712a <quorem+0x96>
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	3b04      	subs	r3, #4
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	d1f0      	bne.n	8007186 <quorem+0xf2>
 80071a4:	3c01      	subs	r4, #1
 80071a6:	e7eb      	b.n	8007180 <quorem+0xec>
 80071a8:	2000      	movs	r0, #0
 80071aa:	e7ee      	b.n	800718a <quorem+0xf6>
 80071ac:	0000      	movs	r0, r0
	...

080071b0 <_dtoa_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	4616      	mov	r6, r2
 80071b6:	461f      	mov	r7, r3
 80071b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80071ba:	b099      	sub	sp, #100	; 0x64
 80071bc:	4605      	mov	r5, r0
 80071be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80071c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80071c6:	b974      	cbnz	r4, 80071e6 <_dtoa_r+0x36>
 80071c8:	2010      	movs	r0, #16
 80071ca:	f000 fde3 	bl	8007d94 <malloc>
 80071ce:	4602      	mov	r2, r0
 80071d0:	6268      	str	r0, [r5, #36]	; 0x24
 80071d2:	b920      	cbnz	r0, 80071de <_dtoa_r+0x2e>
 80071d4:	21ea      	movs	r1, #234	; 0xea
 80071d6:	4ba8      	ldr	r3, [pc, #672]	; (8007478 <_dtoa_r+0x2c8>)
 80071d8:	48a8      	ldr	r0, [pc, #672]	; (800747c <_dtoa_r+0x2cc>)
 80071da:	f001 fbdd 	bl	8008998 <__assert_func>
 80071de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071e2:	6004      	str	r4, [r0, #0]
 80071e4:	60c4      	str	r4, [r0, #12]
 80071e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071e8:	6819      	ldr	r1, [r3, #0]
 80071ea:	b151      	cbz	r1, 8007202 <_dtoa_r+0x52>
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	2301      	movs	r3, #1
 80071f0:	4093      	lsls	r3, r2
 80071f2:	604a      	str	r2, [r1, #4]
 80071f4:	608b      	str	r3, [r1, #8]
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 fe30 	bl	8007e5c <_Bfree>
 80071fc:	2200      	movs	r2, #0
 80071fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	1e3b      	subs	r3, r7, #0
 8007204:	bfaf      	iteee	ge
 8007206:	2300      	movge	r3, #0
 8007208:	2201      	movlt	r2, #1
 800720a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800720e:	9305      	strlt	r3, [sp, #20]
 8007210:	bfa8      	it	ge
 8007212:	f8c8 3000 	strge.w	r3, [r8]
 8007216:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800721a:	4b99      	ldr	r3, [pc, #612]	; (8007480 <_dtoa_r+0x2d0>)
 800721c:	bfb8      	it	lt
 800721e:	f8c8 2000 	strlt.w	r2, [r8]
 8007222:	ea33 0309 	bics.w	r3, r3, r9
 8007226:	d119      	bne.n	800725c <_dtoa_r+0xac>
 8007228:	f242 730f 	movw	r3, #9999	; 0x270f
 800722c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007234:	4333      	orrs	r3, r6
 8007236:	f000 857f 	beq.w	8007d38 <_dtoa_r+0xb88>
 800723a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800723c:	b953      	cbnz	r3, 8007254 <_dtoa_r+0xa4>
 800723e:	4b91      	ldr	r3, [pc, #580]	; (8007484 <_dtoa_r+0x2d4>)
 8007240:	e022      	b.n	8007288 <_dtoa_r+0xd8>
 8007242:	4b91      	ldr	r3, [pc, #580]	; (8007488 <_dtoa_r+0x2d8>)
 8007244:	9303      	str	r3, [sp, #12]
 8007246:	3308      	adds	r3, #8
 8007248:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9803      	ldr	r0, [sp, #12]
 800724e:	b019      	add	sp, #100	; 0x64
 8007250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007254:	4b8b      	ldr	r3, [pc, #556]	; (8007484 <_dtoa_r+0x2d4>)
 8007256:	9303      	str	r3, [sp, #12]
 8007258:	3303      	adds	r3, #3
 800725a:	e7f5      	b.n	8007248 <_dtoa_r+0x98>
 800725c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007260:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007268:	2200      	movs	r2, #0
 800726a:	2300      	movs	r3, #0
 800726c:	f7f9 fbb4 	bl	80009d8 <__aeabi_dcmpeq>
 8007270:	4680      	mov	r8, r0
 8007272:	b158      	cbz	r0, 800728c <_dtoa_r+0xdc>
 8007274:	2301      	movs	r3, #1
 8007276:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8558 	beq.w	8007d32 <_dtoa_r+0xb82>
 8007282:	4882      	ldr	r0, [pc, #520]	; (800748c <_dtoa_r+0x2dc>)
 8007284:	6018      	str	r0, [r3, #0]
 8007286:	1e43      	subs	r3, r0, #1
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	e7df      	b.n	800724c <_dtoa_r+0x9c>
 800728c:	ab16      	add	r3, sp, #88	; 0x58
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	ab17      	add	r3, sp, #92	; 0x5c
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4628      	mov	r0, r5
 8007296:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800729a:	f001 f8c5 	bl	8008428 <__d2b>
 800729e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072a2:	4683      	mov	fp, r0
 80072a4:	2c00      	cmp	r4, #0
 80072a6:	d07f      	beq.n	80073a8 <_dtoa_r+0x1f8>
 80072a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80072b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80072ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80072be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80072c2:	2200      	movs	r2, #0
 80072c4:	4b72      	ldr	r3, [pc, #456]	; (8007490 <_dtoa_r+0x2e0>)
 80072c6:	f7f8 ff67 	bl	8000198 <__aeabi_dsub>
 80072ca:	a365      	add	r3, pc, #404	; (adr r3, 8007460 <_dtoa_r+0x2b0>)
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f7f9 f91a 	bl	8000508 <__aeabi_dmul>
 80072d4:	a364      	add	r3, pc, #400	; (adr r3, 8007468 <_dtoa_r+0x2b8>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f7f8 ff5f 	bl	800019c <__adddf3>
 80072de:	4606      	mov	r6, r0
 80072e0:	4620      	mov	r0, r4
 80072e2:	460f      	mov	r7, r1
 80072e4:	f7f9 f8a6 	bl	8000434 <__aeabi_i2d>
 80072e8:	a361      	add	r3, pc, #388	; (adr r3, 8007470 <_dtoa_r+0x2c0>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f9 f90b 	bl	8000508 <__aeabi_dmul>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f8 ff4f 	bl	800019c <__adddf3>
 80072fe:	4606      	mov	r6, r0
 8007300:	460f      	mov	r7, r1
 8007302:	f7f9 fbb1 	bl	8000a68 <__aeabi_d2iz>
 8007306:	2200      	movs	r2, #0
 8007308:	4682      	mov	sl, r0
 800730a:	2300      	movs	r3, #0
 800730c:	4630      	mov	r0, r6
 800730e:	4639      	mov	r1, r7
 8007310:	f7f9 fb6c 	bl	80009ec <__aeabi_dcmplt>
 8007314:	b148      	cbz	r0, 800732a <_dtoa_r+0x17a>
 8007316:	4650      	mov	r0, sl
 8007318:	f7f9 f88c 	bl	8000434 <__aeabi_i2d>
 800731c:	4632      	mov	r2, r6
 800731e:	463b      	mov	r3, r7
 8007320:	f7f9 fb5a 	bl	80009d8 <__aeabi_dcmpeq>
 8007324:	b908      	cbnz	r0, 800732a <_dtoa_r+0x17a>
 8007326:	f10a 3aff 	add.w	sl, sl, #4294967295
 800732a:	f1ba 0f16 	cmp.w	sl, #22
 800732e:	d858      	bhi.n	80073e2 <_dtoa_r+0x232>
 8007330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007334:	4b57      	ldr	r3, [pc, #348]	; (8007494 <_dtoa_r+0x2e4>)
 8007336:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f7f9 fb55 	bl	80009ec <__aeabi_dcmplt>
 8007342:	2800      	cmp	r0, #0
 8007344:	d04f      	beq.n	80073e6 <_dtoa_r+0x236>
 8007346:	2300      	movs	r3, #0
 8007348:	f10a 3aff 	add.w	sl, sl, #4294967295
 800734c:	930f      	str	r3, [sp, #60]	; 0x3c
 800734e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007350:	1b1c      	subs	r4, r3, r4
 8007352:	1e63      	subs	r3, r4, #1
 8007354:	9309      	str	r3, [sp, #36]	; 0x24
 8007356:	bf49      	itett	mi
 8007358:	f1c4 0301 	rsbmi	r3, r4, #1
 800735c:	2300      	movpl	r3, #0
 800735e:	9306      	strmi	r3, [sp, #24]
 8007360:	2300      	movmi	r3, #0
 8007362:	bf54      	ite	pl
 8007364:	9306      	strpl	r3, [sp, #24]
 8007366:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007368:	f1ba 0f00 	cmp.w	sl, #0
 800736c:	db3d      	blt.n	80073ea <_dtoa_r+0x23a>
 800736e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007370:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007374:	4453      	add	r3, sl
 8007376:	9309      	str	r3, [sp, #36]	; 0x24
 8007378:	2300      	movs	r3, #0
 800737a:	930a      	str	r3, [sp, #40]	; 0x28
 800737c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800737e:	2b09      	cmp	r3, #9
 8007380:	f200 808c 	bhi.w	800749c <_dtoa_r+0x2ec>
 8007384:	2b05      	cmp	r3, #5
 8007386:	bfc4      	itt	gt
 8007388:	3b04      	subgt	r3, #4
 800738a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800738c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800738e:	bfc8      	it	gt
 8007390:	2400      	movgt	r4, #0
 8007392:	f1a3 0302 	sub.w	r3, r3, #2
 8007396:	bfd8      	it	le
 8007398:	2401      	movle	r4, #1
 800739a:	2b03      	cmp	r3, #3
 800739c:	f200 808a 	bhi.w	80074b4 <_dtoa_r+0x304>
 80073a0:	e8df f003 	tbb	[pc, r3]
 80073a4:	5b4d4f2d 	.word	0x5b4d4f2d
 80073a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80073ac:	441c      	add	r4, r3
 80073ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	bfc3      	ittte	gt
 80073b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073ba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80073be:	fa09 f303 	lslgt.w	r3, r9, r3
 80073c2:	f1c3 0320 	rsble	r3, r3, #32
 80073c6:	bfc6      	itte	gt
 80073c8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073cc:	4318      	orrgt	r0, r3
 80073ce:	fa06 f003 	lslle.w	r0, r6, r3
 80073d2:	f7f9 f81f 	bl	8000414 <__aeabi_ui2d>
 80073d6:	2301      	movs	r3, #1
 80073d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80073dc:	3c01      	subs	r4, #1
 80073de:	9313      	str	r3, [sp, #76]	; 0x4c
 80073e0:	e76f      	b.n	80072c2 <_dtoa_r+0x112>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e7b2      	b.n	800734c <_dtoa_r+0x19c>
 80073e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80073e8:	e7b1      	b.n	800734e <_dtoa_r+0x19e>
 80073ea:	9b06      	ldr	r3, [sp, #24]
 80073ec:	eba3 030a 	sub.w	r3, r3, sl
 80073f0:	9306      	str	r3, [sp, #24]
 80073f2:	f1ca 0300 	rsb	r3, sl, #0
 80073f6:	930a      	str	r3, [sp, #40]	; 0x28
 80073f8:	2300      	movs	r3, #0
 80073fa:	930e      	str	r3, [sp, #56]	; 0x38
 80073fc:	e7be      	b.n	800737c <_dtoa_r+0x1cc>
 80073fe:	2300      	movs	r3, #0
 8007400:	930b      	str	r3, [sp, #44]	; 0x2c
 8007402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007404:	2b00      	cmp	r3, #0
 8007406:	dc58      	bgt.n	80074ba <_dtoa_r+0x30a>
 8007408:	f04f 0901 	mov.w	r9, #1
 800740c:	464b      	mov	r3, r9
 800740e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007412:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007416:	2200      	movs	r2, #0
 8007418:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800741a:	6042      	str	r2, [r0, #4]
 800741c:	2204      	movs	r2, #4
 800741e:	f102 0614 	add.w	r6, r2, #20
 8007422:	429e      	cmp	r6, r3
 8007424:	6841      	ldr	r1, [r0, #4]
 8007426:	d94e      	bls.n	80074c6 <_dtoa_r+0x316>
 8007428:	4628      	mov	r0, r5
 800742a:	f000 fcd7 	bl	8007ddc <_Balloc>
 800742e:	9003      	str	r0, [sp, #12]
 8007430:	2800      	cmp	r0, #0
 8007432:	d14c      	bne.n	80074ce <_dtoa_r+0x31e>
 8007434:	4602      	mov	r2, r0
 8007436:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800743a:	4b17      	ldr	r3, [pc, #92]	; (8007498 <_dtoa_r+0x2e8>)
 800743c:	e6cc      	b.n	80071d8 <_dtoa_r+0x28>
 800743e:	2301      	movs	r3, #1
 8007440:	e7de      	b.n	8007400 <_dtoa_r+0x250>
 8007442:	2300      	movs	r3, #0
 8007444:	930b      	str	r3, [sp, #44]	; 0x2c
 8007446:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007448:	eb0a 0903 	add.w	r9, sl, r3
 800744c:	f109 0301 	add.w	r3, r9, #1
 8007450:	2b01      	cmp	r3, #1
 8007452:	9308      	str	r3, [sp, #32]
 8007454:	bfb8      	it	lt
 8007456:	2301      	movlt	r3, #1
 8007458:	e7dd      	b.n	8007416 <_dtoa_r+0x266>
 800745a:	2301      	movs	r3, #1
 800745c:	e7f2      	b.n	8007444 <_dtoa_r+0x294>
 800745e:	bf00      	nop
 8007460:	636f4361 	.word	0x636f4361
 8007464:	3fd287a7 	.word	0x3fd287a7
 8007468:	8b60c8b3 	.word	0x8b60c8b3
 800746c:	3fc68a28 	.word	0x3fc68a28
 8007470:	509f79fb 	.word	0x509f79fb
 8007474:	3fd34413 	.word	0x3fd34413
 8007478:	08009819 	.word	0x08009819
 800747c:	08009830 	.word	0x08009830
 8007480:	7ff00000 	.word	0x7ff00000
 8007484:	08009815 	.word	0x08009815
 8007488:	0800980c 	.word	0x0800980c
 800748c:	080097e9 	.word	0x080097e9
 8007490:	3ff80000 	.word	0x3ff80000
 8007494:	08009920 	.word	0x08009920
 8007498:	0800988b 	.word	0x0800988b
 800749c:	2401      	movs	r4, #1
 800749e:	2300      	movs	r3, #0
 80074a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80074a2:	9322      	str	r3, [sp, #136]	; 0x88
 80074a4:	f04f 39ff 	mov.w	r9, #4294967295
 80074a8:	2200      	movs	r2, #0
 80074aa:	2312      	movs	r3, #18
 80074ac:	f8cd 9020 	str.w	r9, [sp, #32]
 80074b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80074b2:	e7b0      	b.n	8007416 <_dtoa_r+0x266>
 80074b4:	2301      	movs	r3, #1
 80074b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b8:	e7f4      	b.n	80074a4 <_dtoa_r+0x2f4>
 80074ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80074be:	464b      	mov	r3, r9
 80074c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80074c4:	e7a7      	b.n	8007416 <_dtoa_r+0x266>
 80074c6:	3101      	adds	r1, #1
 80074c8:	6041      	str	r1, [r0, #4]
 80074ca:	0052      	lsls	r2, r2, #1
 80074cc:	e7a7      	b.n	800741e <_dtoa_r+0x26e>
 80074ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074d0:	9a03      	ldr	r2, [sp, #12]
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	9b08      	ldr	r3, [sp, #32]
 80074d6:	2b0e      	cmp	r3, #14
 80074d8:	f200 80a8 	bhi.w	800762c <_dtoa_r+0x47c>
 80074dc:	2c00      	cmp	r4, #0
 80074de:	f000 80a5 	beq.w	800762c <_dtoa_r+0x47c>
 80074e2:	f1ba 0f00 	cmp.w	sl, #0
 80074e6:	dd34      	ble.n	8007552 <_dtoa_r+0x3a2>
 80074e8:	4a9a      	ldr	r2, [pc, #616]	; (8007754 <_dtoa_r+0x5a4>)
 80074ea:	f00a 030f 	and.w	r3, sl, #15
 80074ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074f2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80074f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074fe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007502:	d016      	beq.n	8007532 <_dtoa_r+0x382>
 8007504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007508:	4b93      	ldr	r3, [pc, #588]	; (8007758 <_dtoa_r+0x5a8>)
 800750a:	2703      	movs	r7, #3
 800750c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007510:	f7f9 f924 	bl	800075c <__aeabi_ddiv>
 8007514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007518:	f004 040f 	and.w	r4, r4, #15
 800751c:	4e8e      	ldr	r6, [pc, #568]	; (8007758 <_dtoa_r+0x5a8>)
 800751e:	b954      	cbnz	r4, 8007536 <_dtoa_r+0x386>
 8007520:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007528:	f7f9 f918 	bl	800075c <__aeabi_ddiv>
 800752c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007530:	e029      	b.n	8007586 <_dtoa_r+0x3d6>
 8007532:	2702      	movs	r7, #2
 8007534:	e7f2      	b.n	800751c <_dtoa_r+0x36c>
 8007536:	07e1      	lsls	r1, r4, #31
 8007538:	d508      	bpl.n	800754c <_dtoa_r+0x39c>
 800753a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800753e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007542:	f7f8 ffe1 	bl	8000508 <__aeabi_dmul>
 8007546:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800754a:	3701      	adds	r7, #1
 800754c:	1064      	asrs	r4, r4, #1
 800754e:	3608      	adds	r6, #8
 8007550:	e7e5      	b.n	800751e <_dtoa_r+0x36e>
 8007552:	f000 80a5 	beq.w	80076a0 <_dtoa_r+0x4f0>
 8007556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800755a:	f1ca 0400 	rsb	r4, sl, #0
 800755e:	4b7d      	ldr	r3, [pc, #500]	; (8007754 <_dtoa_r+0x5a4>)
 8007560:	f004 020f 	and.w	r2, r4, #15
 8007564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f7f8 ffcc 	bl	8000508 <__aeabi_dmul>
 8007570:	2702      	movs	r7, #2
 8007572:	2300      	movs	r3, #0
 8007574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007578:	4e77      	ldr	r6, [pc, #476]	; (8007758 <_dtoa_r+0x5a8>)
 800757a:	1124      	asrs	r4, r4, #4
 800757c:	2c00      	cmp	r4, #0
 800757e:	f040 8084 	bne.w	800768a <_dtoa_r+0x4da>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d2      	bne.n	800752c <_dtoa_r+0x37c>
 8007586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 808b 	beq.w	80076a4 <_dtoa_r+0x4f4>
 800758e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007592:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007596:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800759a:	2200      	movs	r2, #0
 800759c:	4b6f      	ldr	r3, [pc, #444]	; (800775c <_dtoa_r+0x5ac>)
 800759e:	f7f9 fa25 	bl	80009ec <__aeabi_dcmplt>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d07e      	beq.n	80076a4 <_dtoa_r+0x4f4>
 80075a6:	9b08      	ldr	r3, [sp, #32]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d07b      	beq.n	80076a4 <_dtoa_r+0x4f4>
 80075ac:	f1b9 0f00 	cmp.w	r9, #0
 80075b0:	dd38      	ble.n	8007624 <_dtoa_r+0x474>
 80075b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075b6:	2200      	movs	r2, #0
 80075b8:	4b69      	ldr	r3, [pc, #420]	; (8007760 <_dtoa_r+0x5b0>)
 80075ba:	f7f8 ffa5 	bl	8000508 <__aeabi_dmul>
 80075be:	464c      	mov	r4, r9
 80075c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80075c8:	3701      	adds	r7, #1
 80075ca:	4638      	mov	r0, r7
 80075cc:	f7f8 ff32 	bl	8000434 <__aeabi_i2d>
 80075d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075d4:	f7f8 ff98 	bl	8000508 <__aeabi_dmul>
 80075d8:	2200      	movs	r2, #0
 80075da:	4b62      	ldr	r3, [pc, #392]	; (8007764 <_dtoa_r+0x5b4>)
 80075dc:	f7f8 fdde 	bl	800019c <__adddf3>
 80075e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80075e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075e8:	9611      	str	r6, [sp, #68]	; 0x44
 80075ea:	2c00      	cmp	r4, #0
 80075ec:	d15d      	bne.n	80076aa <_dtoa_r+0x4fa>
 80075ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f2:	2200      	movs	r2, #0
 80075f4:	4b5c      	ldr	r3, [pc, #368]	; (8007768 <_dtoa_r+0x5b8>)
 80075f6:	f7f8 fdcf 	bl	8000198 <__aeabi_dsub>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007602:	4633      	mov	r3, r6
 8007604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007606:	f7f9 fa0f 	bl	8000a28 <__aeabi_dcmpgt>
 800760a:	2800      	cmp	r0, #0
 800760c:	f040 829c 	bne.w	8007b48 <_dtoa_r+0x998>
 8007610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007616:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800761a:	f7f9 f9e7 	bl	80009ec <__aeabi_dcmplt>
 800761e:	2800      	cmp	r0, #0
 8007620:	f040 8290 	bne.w	8007b44 <_dtoa_r+0x994>
 8007624:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007628:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800762c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800762e:	2b00      	cmp	r3, #0
 8007630:	f2c0 8152 	blt.w	80078d8 <_dtoa_r+0x728>
 8007634:	f1ba 0f0e 	cmp.w	sl, #14
 8007638:	f300 814e 	bgt.w	80078d8 <_dtoa_r+0x728>
 800763c:	4b45      	ldr	r3, [pc, #276]	; (8007754 <_dtoa_r+0x5a4>)
 800763e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007642:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007646:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800764a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800764c:	2b00      	cmp	r3, #0
 800764e:	f280 80db 	bge.w	8007808 <_dtoa_r+0x658>
 8007652:	9b08      	ldr	r3, [sp, #32]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f300 80d7 	bgt.w	8007808 <_dtoa_r+0x658>
 800765a:	f040 8272 	bne.w	8007b42 <_dtoa_r+0x992>
 800765e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007662:	2200      	movs	r2, #0
 8007664:	4b40      	ldr	r3, [pc, #256]	; (8007768 <_dtoa_r+0x5b8>)
 8007666:	f7f8 ff4f 	bl	8000508 <__aeabi_dmul>
 800766a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800766e:	f7f9 f9d1 	bl	8000a14 <__aeabi_dcmpge>
 8007672:	9c08      	ldr	r4, [sp, #32]
 8007674:	4626      	mov	r6, r4
 8007676:	2800      	cmp	r0, #0
 8007678:	f040 8248 	bne.w	8007b0c <_dtoa_r+0x95c>
 800767c:	2331      	movs	r3, #49	; 0x31
 800767e:	9f03      	ldr	r7, [sp, #12]
 8007680:	f10a 0a01 	add.w	sl, sl, #1
 8007684:	f807 3b01 	strb.w	r3, [r7], #1
 8007688:	e244      	b.n	8007b14 <_dtoa_r+0x964>
 800768a:	07e2      	lsls	r2, r4, #31
 800768c:	d505      	bpl.n	800769a <_dtoa_r+0x4ea>
 800768e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007692:	f7f8 ff39 	bl	8000508 <__aeabi_dmul>
 8007696:	2301      	movs	r3, #1
 8007698:	3701      	adds	r7, #1
 800769a:	1064      	asrs	r4, r4, #1
 800769c:	3608      	adds	r6, #8
 800769e:	e76d      	b.n	800757c <_dtoa_r+0x3cc>
 80076a0:	2702      	movs	r7, #2
 80076a2:	e770      	b.n	8007586 <_dtoa_r+0x3d6>
 80076a4:	46d0      	mov	r8, sl
 80076a6:	9c08      	ldr	r4, [sp, #32]
 80076a8:	e78f      	b.n	80075ca <_dtoa_r+0x41a>
 80076aa:	9903      	ldr	r1, [sp, #12]
 80076ac:	4b29      	ldr	r3, [pc, #164]	; (8007754 <_dtoa_r+0x5a4>)
 80076ae:	4421      	add	r1, r4
 80076b0:	9112      	str	r1, [sp, #72]	; 0x48
 80076b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80076bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076c0:	2900      	cmp	r1, #0
 80076c2:	d055      	beq.n	8007770 <_dtoa_r+0x5c0>
 80076c4:	2000      	movs	r0, #0
 80076c6:	4929      	ldr	r1, [pc, #164]	; (800776c <_dtoa_r+0x5bc>)
 80076c8:	f7f9 f848 	bl	800075c <__aeabi_ddiv>
 80076cc:	463b      	mov	r3, r7
 80076ce:	4632      	mov	r2, r6
 80076d0:	f7f8 fd62 	bl	8000198 <__aeabi_dsub>
 80076d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076d8:	9f03      	ldr	r7, [sp, #12]
 80076da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076de:	f7f9 f9c3 	bl	8000a68 <__aeabi_d2iz>
 80076e2:	4604      	mov	r4, r0
 80076e4:	f7f8 fea6 	bl	8000434 <__aeabi_i2d>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f0:	f7f8 fd52 	bl	8000198 <__aeabi_dsub>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	3430      	adds	r4, #48	; 0x30
 80076fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007702:	f807 4b01 	strb.w	r4, [r7], #1
 8007706:	f7f9 f971 	bl	80009ec <__aeabi_dcmplt>
 800770a:	2800      	cmp	r0, #0
 800770c:	d174      	bne.n	80077f8 <_dtoa_r+0x648>
 800770e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007712:	2000      	movs	r0, #0
 8007714:	4911      	ldr	r1, [pc, #68]	; (800775c <_dtoa_r+0x5ac>)
 8007716:	f7f8 fd3f 	bl	8000198 <__aeabi_dsub>
 800771a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800771e:	f7f9 f965 	bl	80009ec <__aeabi_dcmplt>
 8007722:	2800      	cmp	r0, #0
 8007724:	f040 80b7 	bne.w	8007896 <_dtoa_r+0x6e6>
 8007728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800772a:	429f      	cmp	r7, r3
 800772c:	f43f af7a 	beq.w	8007624 <_dtoa_r+0x474>
 8007730:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007734:	2200      	movs	r2, #0
 8007736:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <_dtoa_r+0x5b0>)
 8007738:	f7f8 fee6 	bl	8000508 <__aeabi_dmul>
 800773c:	2200      	movs	r2, #0
 800773e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007746:	4b06      	ldr	r3, [pc, #24]	; (8007760 <_dtoa_r+0x5b0>)
 8007748:	f7f8 fede 	bl	8000508 <__aeabi_dmul>
 800774c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007750:	e7c3      	b.n	80076da <_dtoa_r+0x52a>
 8007752:	bf00      	nop
 8007754:	08009920 	.word	0x08009920
 8007758:	080098f8 	.word	0x080098f8
 800775c:	3ff00000 	.word	0x3ff00000
 8007760:	40240000 	.word	0x40240000
 8007764:	401c0000 	.word	0x401c0000
 8007768:	40140000 	.word	0x40140000
 800776c:	3fe00000 	.word	0x3fe00000
 8007770:	4630      	mov	r0, r6
 8007772:	4639      	mov	r1, r7
 8007774:	f7f8 fec8 	bl	8000508 <__aeabi_dmul>
 8007778:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800777a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800777e:	9c03      	ldr	r4, [sp, #12]
 8007780:	9314      	str	r3, [sp, #80]	; 0x50
 8007782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007786:	f7f9 f96f 	bl	8000a68 <__aeabi_d2iz>
 800778a:	9015      	str	r0, [sp, #84]	; 0x54
 800778c:	f7f8 fe52 	bl	8000434 <__aeabi_i2d>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007798:	f7f8 fcfe 	bl	8000198 <__aeabi_dsub>
 800779c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800779e:	4606      	mov	r6, r0
 80077a0:	3330      	adds	r3, #48	; 0x30
 80077a2:	f804 3b01 	strb.w	r3, [r4], #1
 80077a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077a8:	460f      	mov	r7, r1
 80077aa:	429c      	cmp	r4, r3
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	d124      	bne.n	80077fc <_dtoa_r+0x64c>
 80077b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077b6:	4bb0      	ldr	r3, [pc, #704]	; (8007a78 <_dtoa_r+0x8c8>)
 80077b8:	f7f8 fcf0 	bl	800019c <__adddf3>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4630      	mov	r0, r6
 80077c2:	4639      	mov	r1, r7
 80077c4:	f7f9 f930 	bl	8000a28 <__aeabi_dcmpgt>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d163      	bne.n	8007894 <_dtoa_r+0x6e4>
 80077cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077d0:	2000      	movs	r0, #0
 80077d2:	49a9      	ldr	r1, [pc, #676]	; (8007a78 <_dtoa_r+0x8c8>)
 80077d4:	f7f8 fce0 	bl	8000198 <__aeabi_dsub>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4630      	mov	r0, r6
 80077de:	4639      	mov	r1, r7
 80077e0:	f7f9 f904 	bl	80009ec <__aeabi_dcmplt>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f43f af1d 	beq.w	8007624 <_dtoa_r+0x474>
 80077ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80077ec:	1e7b      	subs	r3, r7, #1
 80077ee:	9314      	str	r3, [sp, #80]	; 0x50
 80077f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80077f4:	2b30      	cmp	r3, #48	; 0x30
 80077f6:	d0f8      	beq.n	80077ea <_dtoa_r+0x63a>
 80077f8:	46c2      	mov	sl, r8
 80077fa:	e03b      	b.n	8007874 <_dtoa_r+0x6c4>
 80077fc:	4b9f      	ldr	r3, [pc, #636]	; (8007a7c <_dtoa_r+0x8cc>)
 80077fe:	f7f8 fe83 	bl	8000508 <__aeabi_dmul>
 8007802:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007806:	e7bc      	b.n	8007782 <_dtoa_r+0x5d2>
 8007808:	9f03      	ldr	r7, [sp, #12]
 800780a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800780e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007812:	4640      	mov	r0, r8
 8007814:	4649      	mov	r1, r9
 8007816:	f7f8 ffa1 	bl	800075c <__aeabi_ddiv>
 800781a:	f7f9 f925 	bl	8000a68 <__aeabi_d2iz>
 800781e:	4604      	mov	r4, r0
 8007820:	f7f8 fe08 	bl	8000434 <__aeabi_i2d>
 8007824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007828:	f7f8 fe6e 	bl	8000508 <__aeabi_dmul>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4640      	mov	r0, r8
 8007832:	4649      	mov	r1, r9
 8007834:	f7f8 fcb0 	bl	8000198 <__aeabi_dsub>
 8007838:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800783c:	f807 6b01 	strb.w	r6, [r7], #1
 8007840:	9e03      	ldr	r6, [sp, #12]
 8007842:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007846:	1bbe      	subs	r6, r7, r6
 8007848:	45b4      	cmp	ip, r6
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	d136      	bne.n	80078be <_dtoa_r+0x70e>
 8007850:	f7f8 fca4 	bl	800019c <__adddf3>
 8007854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007858:	4680      	mov	r8, r0
 800785a:	4689      	mov	r9, r1
 800785c:	f7f9 f8e4 	bl	8000a28 <__aeabi_dcmpgt>
 8007860:	bb58      	cbnz	r0, 80078ba <_dtoa_r+0x70a>
 8007862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007866:	4640      	mov	r0, r8
 8007868:	4649      	mov	r1, r9
 800786a:	f7f9 f8b5 	bl	80009d8 <__aeabi_dcmpeq>
 800786e:	b108      	cbz	r0, 8007874 <_dtoa_r+0x6c4>
 8007870:	07e1      	lsls	r1, r4, #31
 8007872:	d422      	bmi.n	80078ba <_dtoa_r+0x70a>
 8007874:	4628      	mov	r0, r5
 8007876:	4659      	mov	r1, fp
 8007878:	f000 faf0 	bl	8007e5c <_Bfree>
 800787c:	2300      	movs	r3, #0
 800787e:	703b      	strb	r3, [r7, #0]
 8007880:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007882:	f10a 0001 	add.w	r0, sl, #1
 8007886:	6018      	str	r0, [r3, #0]
 8007888:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800788a:	2b00      	cmp	r3, #0
 800788c:	f43f acde 	beq.w	800724c <_dtoa_r+0x9c>
 8007890:	601f      	str	r7, [r3, #0]
 8007892:	e4db      	b.n	800724c <_dtoa_r+0x9c>
 8007894:	4627      	mov	r7, r4
 8007896:	463b      	mov	r3, r7
 8007898:	461f      	mov	r7, r3
 800789a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800789e:	2a39      	cmp	r2, #57	; 0x39
 80078a0:	d107      	bne.n	80078b2 <_dtoa_r+0x702>
 80078a2:	9a03      	ldr	r2, [sp, #12]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d1f7      	bne.n	8007898 <_dtoa_r+0x6e8>
 80078a8:	2230      	movs	r2, #48	; 0x30
 80078aa:	9903      	ldr	r1, [sp, #12]
 80078ac:	f108 0801 	add.w	r8, r8, #1
 80078b0:	700a      	strb	r2, [r1, #0]
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	3201      	adds	r2, #1
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	e79e      	b.n	80077f8 <_dtoa_r+0x648>
 80078ba:	46d0      	mov	r8, sl
 80078bc:	e7eb      	b.n	8007896 <_dtoa_r+0x6e6>
 80078be:	2200      	movs	r2, #0
 80078c0:	4b6e      	ldr	r3, [pc, #440]	; (8007a7c <_dtoa_r+0x8cc>)
 80078c2:	f7f8 fe21 	bl	8000508 <__aeabi_dmul>
 80078c6:	2200      	movs	r2, #0
 80078c8:	2300      	movs	r3, #0
 80078ca:	4680      	mov	r8, r0
 80078cc:	4689      	mov	r9, r1
 80078ce:	f7f9 f883 	bl	80009d8 <__aeabi_dcmpeq>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d09b      	beq.n	800780e <_dtoa_r+0x65e>
 80078d6:	e7cd      	b.n	8007874 <_dtoa_r+0x6c4>
 80078d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078da:	2a00      	cmp	r2, #0
 80078dc:	f000 80d0 	beq.w	8007a80 <_dtoa_r+0x8d0>
 80078e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078e2:	2a01      	cmp	r2, #1
 80078e4:	f300 80ae 	bgt.w	8007a44 <_dtoa_r+0x894>
 80078e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078ea:	2a00      	cmp	r2, #0
 80078ec:	f000 80a6 	beq.w	8007a3c <_dtoa_r+0x88c>
 80078f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078f6:	9f06      	ldr	r7, [sp, #24]
 80078f8:	9a06      	ldr	r2, [sp, #24]
 80078fa:	2101      	movs	r1, #1
 80078fc:	441a      	add	r2, r3
 80078fe:	9206      	str	r2, [sp, #24]
 8007900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007902:	4628      	mov	r0, r5
 8007904:	441a      	add	r2, r3
 8007906:	9209      	str	r2, [sp, #36]	; 0x24
 8007908:	f000 fb5e 	bl	8007fc8 <__i2b>
 800790c:	4606      	mov	r6, r0
 800790e:	2f00      	cmp	r7, #0
 8007910:	dd0c      	ble.n	800792c <_dtoa_r+0x77c>
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	dd09      	ble.n	800792c <_dtoa_r+0x77c>
 8007918:	42bb      	cmp	r3, r7
 800791a:	bfa8      	it	ge
 800791c:	463b      	movge	r3, r7
 800791e:	9a06      	ldr	r2, [sp, #24]
 8007920:	1aff      	subs	r7, r7, r3
 8007922:	1ad2      	subs	r2, r2, r3
 8007924:	9206      	str	r2, [sp, #24]
 8007926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	9309      	str	r3, [sp, #36]	; 0x24
 800792c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792e:	b1f3      	cbz	r3, 800796e <_dtoa_r+0x7be>
 8007930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80a8 	beq.w	8007a88 <_dtoa_r+0x8d8>
 8007938:	2c00      	cmp	r4, #0
 800793a:	dd10      	ble.n	800795e <_dtoa_r+0x7ae>
 800793c:	4631      	mov	r1, r6
 800793e:	4622      	mov	r2, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 fbff 	bl	8008144 <__pow5mult>
 8007946:	465a      	mov	r2, fp
 8007948:	4601      	mov	r1, r0
 800794a:	4606      	mov	r6, r0
 800794c:	4628      	mov	r0, r5
 800794e:	f000 fb51 	bl	8007ff4 <__multiply>
 8007952:	4680      	mov	r8, r0
 8007954:	4659      	mov	r1, fp
 8007956:	4628      	mov	r0, r5
 8007958:	f000 fa80 	bl	8007e5c <_Bfree>
 800795c:	46c3      	mov	fp, r8
 800795e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007960:	1b1a      	subs	r2, r3, r4
 8007962:	d004      	beq.n	800796e <_dtoa_r+0x7be>
 8007964:	4659      	mov	r1, fp
 8007966:	4628      	mov	r0, r5
 8007968:	f000 fbec 	bl	8008144 <__pow5mult>
 800796c:	4683      	mov	fp, r0
 800796e:	2101      	movs	r1, #1
 8007970:	4628      	mov	r0, r5
 8007972:	f000 fb29 	bl	8007fc8 <__i2b>
 8007976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007978:	4604      	mov	r4, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	f340 8086 	ble.w	8007a8c <_dtoa_r+0x8dc>
 8007980:	461a      	mov	r2, r3
 8007982:	4601      	mov	r1, r0
 8007984:	4628      	mov	r0, r5
 8007986:	f000 fbdd 	bl	8008144 <__pow5mult>
 800798a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800798c:	4604      	mov	r4, r0
 800798e:	2b01      	cmp	r3, #1
 8007990:	dd7f      	ble.n	8007a92 <_dtoa_r+0x8e2>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800799c:	6918      	ldr	r0, [r3, #16]
 800799e:	f000 fac5 	bl	8007f2c <__hi0bits>
 80079a2:	f1c0 0020 	rsb	r0, r0, #32
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a8:	4418      	add	r0, r3
 80079aa:	f010 001f 	ands.w	r0, r0, #31
 80079ae:	f000 8092 	beq.w	8007ad6 <_dtoa_r+0x926>
 80079b2:	f1c0 0320 	rsb	r3, r0, #32
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	f340 808a 	ble.w	8007ad0 <_dtoa_r+0x920>
 80079bc:	f1c0 001c 	rsb	r0, r0, #28
 80079c0:	9b06      	ldr	r3, [sp, #24]
 80079c2:	4407      	add	r7, r0
 80079c4:	4403      	add	r3, r0
 80079c6:	9306      	str	r3, [sp, #24]
 80079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ca:	4403      	add	r3, r0
 80079cc:	9309      	str	r3, [sp, #36]	; 0x24
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dd05      	ble.n	80079e0 <_dtoa_r+0x830>
 80079d4:	4659      	mov	r1, fp
 80079d6:	461a      	mov	r2, r3
 80079d8:	4628      	mov	r0, r5
 80079da:	f000 fc0d 	bl	80081f8 <__lshift>
 80079de:	4683      	mov	fp, r0
 80079e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dd05      	ble.n	80079f2 <_dtoa_r+0x842>
 80079e6:	4621      	mov	r1, r4
 80079e8:	461a      	mov	r2, r3
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 fc04 	bl	80081f8 <__lshift>
 80079f0:	4604      	mov	r4, r0
 80079f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d070      	beq.n	8007ada <_dtoa_r+0x92a>
 80079f8:	4621      	mov	r1, r4
 80079fa:	4658      	mov	r0, fp
 80079fc:	f000 fc6c 	bl	80082d8 <__mcmp>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	da6a      	bge.n	8007ada <_dtoa_r+0x92a>
 8007a04:	2300      	movs	r3, #0
 8007a06:	4659      	mov	r1, fp
 8007a08:	220a      	movs	r2, #10
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 fa48 	bl	8007ea0 <__multadd>
 8007a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a12:	4683      	mov	fp, r0
 8007a14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 8194 	beq.w	8007d46 <_dtoa_r+0xb96>
 8007a1e:	4631      	mov	r1, r6
 8007a20:	2300      	movs	r3, #0
 8007a22:	220a      	movs	r2, #10
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 fa3b 	bl	8007ea0 <__multadd>
 8007a2a:	f1b9 0f00 	cmp.w	r9, #0
 8007a2e:	4606      	mov	r6, r0
 8007a30:	f300 8093 	bgt.w	8007b5a <_dtoa_r+0x9aa>
 8007a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	dc57      	bgt.n	8007aea <_dtoa_r+0x93a>
 8007a3a:	e08e      	b.n	8007b5a <_dtoa_r+0x9aa>
 8007a3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a42:	e757      	b.n	80078f4 <_dtoa_r+0x744>
 8007a44:	9b08      	ldr	r3, [sp, #32]
 8007a46:	1e5c      	subs	r4, r3, #1
 8007a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4a:	42a3      	cmp	r3, r4
 8007a4c:	bfb7      	itett	lt
 8007a4e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a50:	1b1c      	subge	r4, r3, r4
 8007a52:	1ae2      	sublt	r2, r4, r3
 8007a54:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007a56:	bfbe      	ittt	lt
 8007a58:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007a5a:	189b      	addlt	r3, r3, r2
 8007a5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007a5e:	9b08      	ldr	r3, [sp, #32]
 8007a60:	bfb8      	it	lt
 8007a62:	2400      	movlt	r4, #0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bfbb      	ittet	lt
 8007a68:	9b06      	ldrlt	r3, [sp, #24]
 8007a6a:	9a08      	ldrlt	r2, [sp, #32]
 8007a6c:	9f06      	ldrge	r7, [sp, #24]
 8007a6e:	1a9f      	sublt	r7, r3, r2
 8007a70:	bfac      	ite	ge
 8007a72:	9b08      	ldrge	r3, [sp, #32]
 8007a74:	2300      	movlt	r3, #0
 8007a76:	e73f      	b.n	80078f8 <_dtoa_r+0x748>
 8007a78:	3fe00000 	.word	0x3fe00000
 8007a7c:	40240000 	.word	0x40240000
 8007a80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a82:	9f06      	ldr	r7, [sp, #24]
 8007a84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a86:	e742      	b.n	800790e <_dtoa_r+0x75e>
 8007a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a8a:	e76b      	b.n	8007964 <_dtoa_r+0x7b4>
 8007a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	dc19      	bgt.n	8007ac6 <_dtoa_r+0x916>
 8007a92:	9b04      	ldr	r3, [sp, #16]
 8007a94:	b9bb      	cbnz	r3, 8007ac6 <_dtoa_r+0x916>
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a9c:	b99b      	cbnz	r3, 8007ac6 <_dtoa_r+0x916>
 8007a9e:	9b05      	ldr	r3, [sp, #20]
 8007aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aa4:	0d1b      	lsrs	r3, r3, #20
 8007aa6:	051b      	lsls	r3, r3, #20
 8007aa8:	b183      	cbz	r3, 8007acc <_dtoa_r+0x91c>
 8007aaa:	f04f 0801 	mov.w	r8, #1
 8007aae:	9b06      	ldr	r3, [sp, #24]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	9306      	str	r3, [sp, #24]
 8007ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f47f af6a 	bne.w	8007996 <_dtoa_r+0x7e6>
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	e76f      	b.n	80079a6 <_dtoa_r+0x7f6>
 8007ac6:	f04f 0800 	mov.w	r8, #0
 8007aca:	e7f6      	b.n	8007aba <_dtoa_r+0x90a>
 8007acc:	4698      	mov	r8, r3
 8007ace:	e7f4      	b.n	8007aba <_dtoa_r+0x90a>
 8007ad0:	f43f af7d 	beq.w	80079ce <_dtoa_r+0x81e>
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	301c      	adds	r0, #28
 8007ad8:	e772      	b.n	80079c0 <_dtoa_r+0x810>
 8007ada:	9b08      	ldr	r3, [sp, #32]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dc36      	bgt.n	8007b4e <_dtoa_r+0x99e>
 8007ae0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	dd33      	ble.n	8007b4e <_dtoa_r+0x99e>
 8007ae6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007aea:	f1b9 0f00 	cmp.w	r9, #0
 8007aee:	d10d      	bne.n	8007b0c <_dtoa_r+0x95c>
 8007af0:	4621      	mov	r1, r4
 8007af2:	464b      	mov	r3, r9
 8007af4:	2205      	movs	r2, #5
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 f9d2 	bl	8007ea0 <__multadd>
 8007afc:	4601      	mov	r1, r0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4658      	mov	r0, fp
 8007b02:	f000 fbe9 	bl	80082d8 <__mcmp>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f73f adb8 	bgt.w	800767c <_dtoa_r+0x4cc>
 8007b0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b0e:	9f03      	ldr	r7, [sp, #12]
 8007b10:	ea6f 0a03 	mvn.w	sl, r3
 8007b14:	f04f 0800 	mov.w	r8, #0
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 f99e 	bl	8007e5c <_Bfree>
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	f43f aea7 	beq.w	8007874 <_dtoa_r+0x6c4>
 8007b26:	f1b8 0f00 	cmp.w	r8, #0
 8007b2a:	d005      	beq.n	8007b38 <_dtoa_r+0x988>
 8007b2c:	45b0      	cmp	r8, r6
 8007b2e:	d003      	beq.n	8007b38 <_dtoa_r+0x988>
 8007b30:	4641      	mov	r1, r8
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f992 	bl	8007e5c <_Bfree>
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f000 f98e 	bl	8007e5c <_Bfree>
 8007b40:	e698      	b.n	8007874 <_dtoa_r+0x6c4>
 8007b42:	2400      	movs	r4, #0
 8007b44:	4626      	mov	r6, r4
 8007b46:	e7e1      	b.n	8007b0c <_dtoa_r+0x95c>
 8007b48:	46c2      	mov	sl, r8
 8007b4a:	4626      	mov	r6, r4
 8007b4c:	e596      	b.n	800767c <_dtoa_r+0x4cc>
 8007b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80fd 	beq.w	8007d54 <_dtoa_r+0xba4>
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	dd05      	ble.n	8007b6a <_dtoa_r+0x9ba>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	463a      	mov	r2, r7
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 fb48 	bl	80081f8 <__lshift>
 8007b68:	4606      	mov	r6, r0
 8007b6a:	f1b8 0f00 	cmp.w	r8, #0
 8007b6e:	d05c      	beq.n	8007c2a <_dtoa_r+0xa7a>
 8007b70:	4628      	mov	r0, r5
 8007b72:	6871      	ldr	r1, [r6, #4]
 8007b74:	f000 f932 	bl	8007ddc <_Balloc>
 8007b78:	4607      	mov	r7, r0
 8007b7a:	b928      	cbnz	r0, 8007b88 <_dtoa_r+0x9d8>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b82:	4b7f      	ldr	r3, [pc, #508]	; (8007d80 <_dtoa_r+0xbd0>)
 8007b84:	f7ff bb28 	b.w	80071d8 <_dtoa_r+0x28>
 8007b88:	6932      	ldr	r2, [r6, #16]
 8007b8a:	f106 010c 	add.w	r1, r6, #12
 8007b8e:	3202      	adds	r2, #2
 8007b90:	0092      	lsls	r2, r2, #2
 8007b92:	300c      	adds	r0, #12
 8007b94:	f000 f914 	bl	8007dc0 <memcpy>
 8007b98:	2201      	movs	r2, #1
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f000 fb2b 	bl	80081f8 <__lshift>
 8007ba2:	46b0      	mov	r8, r6
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	9308      	str	r3, [sp, #32]
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	444b      	add	r3, r9
 8007bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	4658      	mov	r0, fp
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	f7ff fa66 	bl	8007094 <quorem>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	4641      	mov	r1, r8
 8007bcc:	3330      	adds	r3, #48	; 0x30
 8007bce:	9006      	str	r0, [sp, #24]
 8007bd0:	4658      	mov	r0, fp
 8007bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bd4:	f000 fb80 	bl	80082d8 <__mcmp>
 8007bd8:	4632      	mov	r2, r6
 8007bda:	4681      	mov	r9, r0
 8007bdc:	4621      	mov	r1, r4
 8007bde:	4628      	mov	r0, r5
 8007be0:	f000 fb96 	bl	8008310 <__mdiff>
 8007be4:	68c2      	ldr	r2, [r0, #12]
 8007be6:	4607      	mov	r7, r0
 8007be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bea:	bb02      	cbnz	r2, 8007c2e <_dtoa_r+0xa7e>
 8007bec:	4601      	mov	r1, r0
 8007bee:	4658      	mov	r0, fp
 8007bf0:	f000 fb72 	bl	80082d8 <__mcmp>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007c00:	f000 f92c 	bl	8007e5c <_Bfree>
 8007c04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c08:	9f08      	ldr	r7, [sp, #32]
 8007c0a:	ea43 0102 	orr.w	r1, r3, r2
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	430b      	orrs	r3, r1
 8007c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c14:	d10d      	bne.n	8007c32 <_dtoa_r+0xa82>
 8007c16:	2b39      	cmp	r3, #57	; 0x39
 8007c18:	d029      	beq.n	8007c6e <_dtoa_r+0xabe>
 8007c1a:	f1b9 0f00 	cmp.w	r9, #0
 8007c1e:	dd01      	ble.n	8007c24 <_dtoa_r+0xa74>
 8007c20:	9b06      	ldr	r3, [sp, #24]
 8007c22:	3331      	adds	r3, #49	; 0x31
 8007c24:	9a04      	ldr	r2, [sp, #16]
 8007c26:	7013      	strb	r3, [r2, #0]
 8007c28:	e776      	b.n	8007b18 <_dtoa_r+0x968>
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	e7b9      	b.n	8007ba2 <_dtoa_r+0x9f2>
 8007c2e:	2201      	movs	r2, #1
 8007c30:	e7e2      	b.n	8007bf8 <_dtoa_r+0xa48>
 8007c32:	f1b9 0f00 	cmp.w	r9, #0
 8007c36:	db06      	blt.n	8007c46 <_dtoa_r+0xa96>
 8007c38:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007c3a:	ea41 0909 	orr.w	r9, r1, r9
 8007c3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c40:	ea59 0101 	orrs.w	r1, r9, r1
 8007c44:	d120      	bne.n	8007c88 <_dtoa_r+0xad8>
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	ddec      	ble.n	8007c24 <_dtoa_r+0xa74>
 8007c4a:	4659      	mov	r1, fp
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	4628      	mov	r0, r5
 8007c50:	9308      	str	r3, [sp, #32]
 8007c52:	f000 fad1 	bl	80081f8 <__lshift>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4683      	mov	fp, r0
 8007c5a:	f000 fb3d 	bl	80082d8 <__mcmp>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	9b08      	ldr	r3, [sp, #32]
 8007c62:	dc02      	bgt.n	8007c6a <_dtoa_r+0xaba>
 8007c64:	d1de      	bne.n	8007c24 <_dtoa_r+0xa74>
 8007c66:	07da      	lsls	r2, r3, #31
 8007c68:	d5dc      	bpl.n	8007c24 <_dtoa_r+0xa74>
 8007c6a:	2b39      	cmp	r3, #57	; 0x39
 8007c6c:	d1d8      	bne.n	8007c20 <_dtoa_r+0xa70>
 8007c6e:	2339      	movs	r3, #57	; 0x39
 8007c70:	9a04      	ldr	r2, [sp, #16]
 8007c72:	7013      	strb	r3, [r2, #0]
 8007c74:	463b      	mov	r3, r7
 8007c76:	461f      	mov	r7, r3
 8007c78:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	2a39      	cmp	r2, #57	; 0x39
 8007c80:	d050      	beq.n	8007d24 <_dtoa_r+0xb74>
 8007c82:	3201      	adds	r2, #1
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	e747      	b.n	8007b18 <_dtoa_r+0x968>
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	dd03      	ble.n	8007c94 <_dtoa_r+0xae4>
 8007c8c:	2b39      	cmp	r3, #57	; 0x39
 8007c8e:	d0ee      	beq.n	8007c6e <_dtoa_r+0xabe>
 8007c90:	3301      	adds	r3, #1
 8007c92:	e7c7      	b.n	8007c24 <_dtoa_r+0xa74>
 8007c94:	9a08      	ldr	r2, [sp, #32]
 8007c96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c9c:	428a      	cmp	r2, r1
 8007c9e:	d02a      	beq.n	8007cf6 <_dtoa_r+0xb46>
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	220a      	movs	r2, #10
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 f8fa 	bl	8007ea0 <__multadd>
 8007cac:	45b0      	cmp	r8, r6
 8007cae:	4683      	mov	fp, r0
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	f04f 020a 	mov.w	r2, #10
 8007cb8:	4641      	mov	r1, r8
 8007cba:	4628      	mov	r0, r5
 8007cbc:	d107      	bne.n	8007cce <_dtoa_r+0xb1e>
 8007cbe:	f000 f8ef 	bl	8007ea0 <__multadd>
 8007cc2:	4680      	mov	r8, r0
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	9b08      	ldr	r3, [sp, #32]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	9308      	str	r3, [sp, #32]
 8007ccc:	e775      	b.n	8007bba <_dtoa_r+0xa0a>
 8007cce:	f000 f8e7 	bl	8007ea0 <__multadd>
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	220a      	movs	r2, #10
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f8e0 	bl	8007ea0 <__multadd>
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	e7f0      	b.n	8007cc6 <_dtoa_r+0xb16>
 8007ce4:	f1b9 0f00 	cmp.w	r9, #0
 8007ce8:	bfcc      	ite	gt
 8007cea:	464f      	movgt	r7, r9
 8007cec:	2701      	movle	r7, #1
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	9a03      	ldr	r2, [sp, #12]
 8007cf4:	4417      	add	r7, r2
 8007cf6:	4659      	mov	r1, fp
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	9308      	str	r3, [sp, #32]
 8007cfe:	f000 fa7b 	bl	80081f8 <__lshift>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4683      	mov	fp, r0
 8007d06:	f000 fae7 	bl	80082d8 <__mcmp>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	dcb2      	bgt.n	8007c74 <_dtoa_r+0xac4>
 8007d0e:	d102      	bne.n	8007d16 <_dtoa_r+0xb66>
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	07db      	lsls	r3, r3, #31
 8007d14:	d4ae      	bmi.n	8007c74 <_dtoa_r+0xac4>
 8007d16:	463b      	mov	r3, r7
 8007d18:	461f      	mov	r7, r3
 8007d1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d1e:	2a30      	cmp	r2, #48	; 0x30
 8007d20:	d0fa      	beq.n	8007d18 <_dtoa_r+0xb68>
 8007d22:	e6f9      	b.n	8007b18 <_dtoa_r+0x968>
 8007d24:	9a03      	ldr	r2, [sp, #12]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d1a5      	bne.n	8007c76 <_dtoa_r+0xac6>
 8007d2a:	2331      	movs	r3, #49	; 0x31
 8007d2c:	f10a 0a01 	add.w	sl, sl, #1
 8007d30:	e779      	b.n	8007c26 <_dtoa_r+0xa76>
 8007d32:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <_dtoa_r+0xbd4>)
 8007d34:	f7ff baa8 	b.w	8007288 <_dtoa_r+0xd8>
 8007d38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f47f aa81 	bne.w	8007242 <_dtoa_r+0x92>
 8007d40:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <_dtoa_r+0xbd8>)
 8007d42:	f7ff baa1 	b.w	8007288 <_dtoa_r+0xd8>
 8007d46:	f1b9 0f00 	cmp.w	r9, #0
 8007d4a:	dc03      	bgt.n	8007d54 <_dtoa_r+0xba4>
 8007d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	f73f aecb 	bgt.w	8007aea <_dtoa_r+0x93a>
 8007d54:	9f03      	ldr	r7, [sp, #12]
 8007d56:	4621      	mov	r1, r4
 8007d58:	4658      	mov	r0, fp
 8007d5a:	f7ff f99b 	bl	8007094 <quorem>
 8007d5e:	9a03      	ldr	r2, [sp, #12]
 8007d60:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d64:	f807 3b01 	strb.w	r3, [r7], #1
 8007d68:	1aba      	subs	r2, r7, r2
 8007d6a:	4591      	cmp	r9, r2
 8007d6c:	ddba      	ble.n	8007ce4 <_dtoa_r+0xb34>
 8007d6e:	4659      	mov	r1, fp
 8007d70:	2300      	movs	r3, #0
 8007d72:	220a      	movs	r2, #10
 8007d74:	4628      	mov	r0, r5
 8007d76:	f000 f893 	bl	8007ea0 <__multadd>
 8007d7a:	4683      	mov	fp, r0
 8007d7c:	e7eb      	b.n	8007d56 <_dtoa_r+0xba6>
 8007d7e:	bf00      	nop
 8007d80:	0800988b 	.word	0x0800988b
 8007d84:	080097e8 	.word	0x080097e8
 8007d88:	0800980c 	.word	0x0800980c

08007d8c <_localeconv_r>:
 8007d8c:	4800      	ldr	r0, [pc, #0]	; (8007d90 <_localeconv_r+0x4>)
 8007d8e:	4770      	bx	lr
 8007d90:	20000168 	.word	0x20000168

08007d94 <malloc>:
 8007d94:	4b02      	ldr	r3, [pc, #8]	; (8007da0 <malloc+0xc>)
 8007d96:	4601      	mov	r1, r0
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	f000 bc1d 	b.w	80085d8 <_malloc_r>
 8007d9e:	bf00      	nop
 8007da0:	20000014 	.word	0x20000014

08007da4 <memchr>:
 8007da4:	4603      	mov	r3, r0
 8007da6:	b510      	push	{r4, lr}
 8007da8:	b2c9      	uxtb	r1, r1
 8007daa:	4402      	add	r2, r0
 8007dac:	4293      	cmp	r3, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	d101      	bne.n	8007db6 <memchr+0x12>
 8007db2:	2000      	movs	r0, #0
 8007db4:	e003      	b.n	8007dbe <memchr+0x1a>
 8007db6:	7804      	ldrb	r4, [r0, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	428c      	cmp	r4, r1
 8007dbc:	d1f6      	bne.n	8007dac <memchr+0x8>
 8007dbe:	bd10      	pop	{r4, pc}

08007dc0 <memcpy>:
 8007dc0:	440a      	add	r2, r1
 8007dc2:	4291      	cmp	r1, r2
 8007dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dc8:	d100      	bne.n	8007dcc <memcpy+0xc>
 8007dca:	4770      	bx	lr
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd2:	4291      	cmp	r1, r2
 8007dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dd8:	d1f9      	bne.n	8007dce <memcpy+0xe>
 8007dda:	bd10      	pop	{r4, pc}

08007ddc <_Balloc>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007de0:	4604      	mov	r4, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	b976      	cbnz	r6, 8007e04 <_Balloc+0x28>
 8007de6:	2010      	movs	r0, #16
 8007de8:	f7ff ffd4 	bl	8007d94 <malloc>
 8007dec:	4602      	mov	r2, r0
 8007dee:	6260      	str	r0, [r4, #36]	; 0x24
 8007df0:	b920      	cbnz	r0, 8007dfc <_Balloc+0x20>
 8007df2:	2166      	movs	r1, #102	; 0x66
 8007df4:	4b17      	ldr	r3, [pc, #92]	; (8007e54 <_Balloc+0x78>)
 8007df6:	4818      	ldr	r0, [pc, #96]	; (8007e58 <_Balloc+0x7c>)
 8007df8:	f000 fdce 	bl	8008998 <__assert_func>
 8007dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e00:	6006      	str	r6, [r0, #0]
 8007e02:	60c6      	str	r6, [r0, #12]
 8007e04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e06:	68f3      	ldr	r3, [r6, #12]
 8007e08:	b183      	cbz	r3, 8007e2c <_Balloc+0x50>
 8007e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e12:	b9b8      	cbnz	r0, 8007e44 <_Balloc+0x68>
 8007e14:	2101      	movs	r1, #1
 8007e16:	fa01 f605 	lsl.w	r6, r1, r5
 8007e1a:	1d72      	adds	r2, r6, #5
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	0092      	lsls	r2, r2, #2
 8007e20:	f000 fb5e 	bl	80084e0 <_calloc_r>
 8007e24:	b160      	cbz	r0, 8007e40 <_Balloc+0x64>
 8007e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e2a:	e00e      	b.n	8007e4a <_Balloc+0x6e>
 8007e2c:	2221      	movs	r2, #33	; 0x21
 8007e2e:	2104      	movs	r1, #4
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 fb55 	bl	80084e0 <_calloc_r>
 8007e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e38:	60f0      	str	r0, [r6, #12]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e4      	bne.n	8007e0a <_Balloc+0x2e>
 8007e40:	2000      	movs	r0, #0
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	6802      	ldr	r2, [r0, #0]
 8007e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e50:	e7f7      	b.n	8007e42 <_Balloc+0x66>
 8007e52:	bf00      	nop
 8007e54:	08009819 	.word	0x08009819
 8007e58:	0800989c 	.word	0x0800989c

08007e5c <_Bfree>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e60:	4605      	mov	r5, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	b976      	cbnz	r6, 8007e84 <_Bfree+0x28>
 8007e66:	2010      	movs	r0, #16
 8007e68:	f7ff ff94 	bl	8007d94 <malloc>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6268      	str	r0, [r5, #36]	; 0x24
 8007e70:	b920      	cbnz	r0, 8007e7c <_Bfree+0x20>
 8007e72:	218a      	movs	r1, #138	; 0x8a
 8007e74:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <_Bfree+0x3c>)
 8007e76:	4809      	ldr	r0, [pc, #36]	; (8007e9c <_Bfree+0x40>)
 8007e78:	f000 fd8e 	bl	8008998 <__assert_func>
 8007e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e80:	6006      	str	r6, [r0, #0]
 8007e82:	60c6      	str	r6, [r0, #12]
 8007e84:	b13c      	cbz	r4, 8007e96 <_Bfree+0x3a>
 8007e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e88:	6862      	ldr	r2, [r4, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e90:	6021      	str	r1, [r4, #0]
 8007e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	08009819 	.word	0x08009819
 8007e9c:	0800989c 	.word	0x0800989c

08007ea0 <__multadd>:
 8007ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	461e      	mov	r6, r3
 8007eaa:	2000      	movs	r0, #0
 8007eac:	690d      	ldr	r5, [r1, #16]
 8007eae:	f101 0c14 	add.w	ip, r1, #20
 8007eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	b299      	uxth	r1, r3
 8007eba:	fb02 6101 	mla	r1, r2, r1, r6
 8007ebe:	0c1e      	lsrs	r6, r3, #16
 8007ec0:	0c0b      	lsrs	r3, r1, #16
 8007ec2:	fb02 3306 	mla	r3, r2, r6, r3
 8007ec6:	b289      	uxth	r1, r1
 8007ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ecc:	4285      	cmp	r5, r0
 8007ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ed2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ed6:	dcec      	bgt.n	8007eb2 <__multadd+0x12>
 8007ed8:	b30e      	cbz	r6, 8007f1e <__multadd+0x7e>
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	42ab      	cmp	r3, r5
 8007ede:	dc19      	bgt.n	8007f14 <__multadd+0x74>
 8007ee0:	6861      	ldr	r1, [r4, #4]
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	3101      	adds	r1, #1
 8007ee6:	f7ff ff79 	bl	8007ddc <_Balloc>
 8007eea:	4680      	mov	r8, r0
 8007eec:	b928      	cbnz	r0, 8007efa <__multadd+0x5a>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	21b5      	movs	r1, #181	; 0xb5
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <__multadd+0x84>)
 8007ef4:	480c      	ldr	r0, [pc, #48]	; (8007f28 <__multadd+0x88>)
 8007ef6:	f000 fd4f 	bl	8008998 <__assert_func>
 8007efa:	6922      	ldr	r2, [r4, #16]
 8007efc:	f104 010c 	add.w	r1, r4, #12
 8007f00:	3202      	adds	r2, #2
 8007f02:	0092      	lsls	r2, r2, #2
 8007f04:	300c      	adds	r0, #12
 8007f06:	f7ff ff5b 	bl	8007dc0 <memcpy>
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7ff ffa5 	bl	8007e5c <_Bfree>
 8007f12:	4644      	mov	r4, r8
 8007f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f18:	3501      	adds	r5, #1
 8007f1a:	615e      	str	r6, [r3, #20]
 8007f1c:	6125      	str	r5, [r4, #16]
 8007f1e:	4620      	mov	r0, r4
 8007f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f24:	0800988b 	.word	0x0800988b
 8007f28:	0800989c 	.word	0x0800989c

08007f2c <__hi0bits>:
 8007f2c:	0c02      	lsrs	r2, r0, #16
 8007f2e:	0412      	lsls	r2, r2, #16
 8007f30:	4603      	mov	r3, r0
 8007f32:	b9ca      	cbnz	r2, 8007f68 <__hi0bits+0x3c>
 8007f34:	0403      	lsls	r3, r0, #16
 8007f36:	2010      	movs	r0, #16
 8007f38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f3c:	bf04      	itt	eq
 8007f3e:	021b      	lsleq	r3, r3, #8
 8007f40:	3008      	addeq	r0, #8
 8007f42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007f46:	bf04      	itt	eq
 8007f48:	011b      	lsleq	r3, r3, #4
 8007f4a:	3004      	addeq	r0, #4
 8007f4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007f50:	bf04      	itt	eq
 8007f52:	009b      	lsleq	r3, r3, #2
 8007f54:	3002      	addeq	r0, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	db05      	blt.n	8007f66 <__hi0bits+0x3a>
 8007f5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007f5e:	f100 0001 	add.w	r0, r0, #1
 8007f62:	bf08      	it	eq
 8007f64:	2020      	moveq	r0, #32
 8007f66:	4770      	bx	lr
 8007f68:	2000      	movs	r0, #0
 8007f6a:	e7e5      	b.n	8007f38 <__hi0bits+0xc>

08007f6c <__lo0bits>:
 8007f6c:	6803      	ldr	r3, [r0, #0]
 8007f6e:	4602      	mov	r2, r0
 8007f70:	f013 0007 	ands.w	r0, r3, #7
 8007f74:	d00b      	beq.n	8007f8e <__lo0bits+0x22>
 8007f76:	07d9      	lsls	r1, r3, #31
 8007f78:	d421      	bmi.n	8007fbe <__lo0bits+0x52>
 8007f7a:	0798      	lsls	r0, r3, #30
 8007f7c:	bf49      	itett	mi
 8007f7e:	085b      	lsrmi	r3, r3, #1
 8007f80:	089b      	lsrpl	r3, r3, #2
 8007f82:	2001      	movmi	r0, #1
 8007f84:	6013      	strmi	r3, [r2, #0]
 8007f86:	bf5c      	itt	pl
 8007f88:	2002      	movpl	r0, #2
 8007f8a:	6013      	strpl	r3, [r2, #0]
 8007f8c:	4770      	bx	lr
 8007f8e:	b299      	uxth	r1, r3
 8007f90:	b909      	cbnz	r1, 8007f96 <__lo0bits+0x2a>
 8007f92:	2010      	movs	r0, #16
 8007f94:	0c1b      	lsrs	r3, r3, #16
 8007f96:	b2d9      	uxtb	r1, r3
 8007f98:	b909      	cbnz	r1, 8007f9e <__lo0bits+0x32>
 8007f9a:	3008      	adds	r0, #8
 8007f9c:	0a1b      	lsrs	r3, r3, #8
 8007f9e:	0719      	lsls	r1, r3, #28
 8007fa0:	bf04      	itt	eq
 8007fa2:	091b      	lsreq	r3, r3, #4
 8007fa4:	3004      	addeq	r0, #4
 8007fa6:	0799      	lsls	r1, r3, #30
 8007fa8:	bf04      	itt	eq
 8007faa:	089b      	lsreq	r3, r3, #2
 8007fac:	3002      	addeq	r0, #2
 8007fae:	07d9      	lsls	r1, r3, #31
 8007fb0:	d403      	bmi.n	8007fba <__lo0bits+0x4e>
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	f100 0001 	add.w	r0, r0, #1
 8007fb8:	d003      	beq.n	8007fc2 <__lo0bits+0x56>
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	4770      	bx	lr
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	4770      	bx	lr
 8007fc2:	2020      	movs	r0, #32
 8007fc4:	4770      	bx	lr
	...

08007fc8 <__i2b>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	460c      	mov	r4, r1
 8007fcc:	2101      	movs	r1, #1
 8007fce:	f7ff ff05 	bl	8007ddc <_Balloc>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	b928      	cbnz	r0, 8007fe2 <__i2b+0x1a>
 8007fd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fda:	4b04      	ldr	r3, [pc, #16]	; (8007fec <__i2b+0x24>)
 8007fdc:	4804      	ldr	r0, [pc, #16]	; (8007ff0 <__i2b+0x28>)
 8007fde:	f000 fcdb 	bl	8008998 <__assert_func>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	6144      	str	r4, [r0, #20]
 8007fe6:	6103      	str	r3, [r0, #16]
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop
 8007fec:	0800988b 	.word	0x0800988b
 8007ff0:	0800989c 	.word	0x0800989c

08007ff4 <__multiply>:
 8007ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff8:	4691      	mov	r9, r2
 8007ffa:	690a      	ldr	r2, [r1, #16]
 8007ffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008000:	460c      	mov	r4, r1
 8008002:	429a      	cmp	r2, r3
 8008004:	bfbe      	ittt	lt
 8008006:	460b      	movlt	r3, r1
 8008008:	464c      	movlt	r4, r9
 800800a:	4699      	movlt	r9, r3
 800800c:	6927      	ldr	r7, [r4, #16]
 800800e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	6861      	ldr	r1, [r4, #4]
 8008016:	eb07 060a 	add.w	r6, r7, sl
 800801a:	42b3      	cmp	r3, r6
 800801c:	b085      	sub	sp, #20
 800801e:	bfb8      	it	lt
 8008020:	3101      	addlt	r1, #1
 8008022:	f7ff fedb 	bl	8007ddc <_Balloc>
 8008026:	b930      	cbnz	r0, 8008036 <__multiply+0x42>
 8008028:	4602      	mov	r2, r0
 800802a:	f240 115d 	movw	r1, #349	; 0x15d
 800802e:	4b43      	ldr	r3, [pc, #268]	; (800813c <__multiply+0x148>)
 8008030:	4843      	ldr	r0, [pc, #268]	; (8008140 <__multiply+0x14c>)
 8008032:	f000 fcb1 	bl	8008998 <__assert_func>
 8008036:	f100 0514 	add.w	r5, r0, #20
 800803a:	462b      	mov	r3, r5
 800803c:	2200      	movs	r2, #0
 800803e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008042:	4543      	cmp	r3, r8
 8008044:	d321      	bcc.n	800808a <__multiply+0x96>
 8008046:	f104 0314 	add.w	r3, r4, #20
 800804a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800804e:	f109 0314 	add.w	r3, r9, #20
 8008052:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008056:	9202      	str	r2, [sp, #8]
 8008058:	1b3a      	subs	r2, r7, r4
 800805a:	3a15      	subs	r2, #21
 800805c:	f022 0203 	bic.w	r2, r2, #3
 8008060:	3204      	adds	r2, #4
 8008062:	f104 0115 	add.w	r1, r4, #21
 8008066:	428f      	cmp	r7, r1
 8008068:	bf38      	it	cc
 800806a:	2204      	movcc	r2, #4
 800806c:	9201      	str	r2, [sp, #4]
 800806e:	9a02      	ldr	r2, [sp, #8]
 8008070:	9303      	str	r3, [sp, #12]
 8008072:	429a      	cmp	r2, r3
 8008074:	d80c      	bhi.n	8008090 <__multiply+0x9c>
 8008076:	2e00      	cmp	r6, #0
 8008078:	dd03      	ble.n	8008082 <__multiply+0x8e>
 800807a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800807e:	2b00      	cmp	r3, #0
 8008080:	d059      	beq.n	8008136 <__multiply+0x142>
 8008082:	6106      	str	r6, [r0, #16]
 8008084:	b005      	add	sp, #20
 8008086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808a:	f843 2b04 	str.w	r2, [r3], #4
 800808e:	e7d8      	b.n	8008042 <__multiply+0x4e>
 8008090:	f8b3 a000 	ldrh.w	sl, [r3]
 8008094:	f1ba 0f00 	cmp.w	sl, #0
 8008098:	d023      	beq.n	80080e2 <__multiply+0xee>
 800809a:	46a9      	mov	r9, r5
 800809c:	f04f 0c00 	mov.w	ip, #0
 80080a0:	f104 0e14 	add.w	lr, r4, #20
 80080a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080a8:	f8d9 1000 	ldr.w	r1, [r9]
 80080ac:	fa1f fb82 	uxth.w	fp, r2
 80080b0:	b289      	uxth	r1, r1
 80080b2:	fb0a 110b 	mla	r1, sl, fp, r1
 80080b6:	4461      	add	r1, ip
 80080b8:	f8d9 c000 	ldr.w	ip, [r9]
 80080bc:	0c12      	lsrs	r2, r2, #16
 80080be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80080c2:	fb0a c202 	mla	r2, sl, r2, ip
 80080c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080ca:	b289      	uxth	r1, r1
 80080cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080d0:	4577      	cmp	r7, lr
 80080d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080d6:	f849 1b04 	str.w	r1, [r9], #4
 80080da:	d8e3      	bhi.n	80080a4 <__multiply+0xb0>
 80080dc:	9a01      	ldr	r2, [sp, #4]
 80080de:	f845 c002 	str.w	ip, [r5, r2]
 80080e2:	9a03      	ldr	r2, [sp, #12]
 80080e4:	3304      	adds	r3, #4
 80080e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080ea:	f1b9 0f00 	cmp.w	r9, #0
 80080ee:	d020      	beq.n	8008132 <__multiply+0x13e>
 80080f0:	46ae      	mov	lr, r5
 80080f2:	f04f 0a00 	mov.w	sl, #0
 80080f6:	6829      	ldr	r1, [r5, #0]
 80080f8:	f104 0c14 	add.w	ip, r4, #20
 80080fc:	f8bc b000 	ldrh.w	fp, [ip]
 8008100:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008104:	b289      	uxth	r1, r1
 8008106:	fb09 220b 	mla	r2, r9, fp, r2
 800810a:	4492      	add	sl, r2
 800810c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008110:	f84e 1b04 	str.w	r1, [lr], #4
 8008114:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008118:	f8be 1000 	ldrh.w	r1, [lr]
 800811c:	0c12      	lsrs	r2, r2, #16
 800811e:	fb09 1102 	mla	r1, r9, r2, r1
 8008122:	4567      	cmp	r7, ip
 8008124:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008128:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800812c:	d8e6      	bhi.n	80080fc <__multiply+0x108>
 800812e:	9a01      	ldr	r2, [sp, #4]
 8008130:	50a9      	str	r1, [r5, r2]
 8008132:	3504      	adds	r5, #4
 8008134:	e79b      	b.n	800806e <__multiply+0x7a>
 8008136:	3e01      	subs	r6, #1
 8008138:	e79d      	b.n	8008076 <__multiply+0x82>
 800813a:	bf00      	nop
 800813c:	0800988b 	.word	0x0800988b
 8008140:	0800989c 	.word	0x0800989c

08008144 <__pow5mult>:
 8008144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008148:	4615      	mov	r5, r2
 800814a:	f012 0203 	ands.w	r2, r2, #3
 800814e:	4606      	mov	r6, r0
 8008150:	460f      	mov	r7, r1
 8008152:	d007      	beq.n	8008164 <__pow5mult+0x20>
 8008154:	4c25      	ldr	r4, [pc, #148]	; (80081ec <__pow5mult+0xa8>)
 8008156:	3a01      	subs	r2, #1
 8008158:	2300      	movs	r3, #0
 800815a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800815e:	f7ff fe9f 	bl	8007ea0 <__multadd>
 8008162:	4607      	mov	r7, r0
 8008164:	10ad      	asrs	r5, r5, #2
 8008166:	d03d      	beq.n	80081e4 <__pow5mult+0xa0>
 8008168:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800816a:	b97c      	cbnz	r4, 800818c <__pow5mult+0x48>
 800816c:	2010      	movs	r0, #16
 800816e:	f7ff fe11 	bl	8007d94 <malloc>
 8008172:	4602      	mov	r2, r0
 8008174:	6270      	str	r0, [r6, #36]	; 0x24
 8008176:	b928      	cbnz	r0, 8008184 <__pow5mult+0x40>
 8008178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800817c:	4b1c      	ldr	r3, [pc, #112]	; (80081f0 <__pow5mult+0xac>)
 800817e:	481d      	ldr	r0, [pc, #116]	; (80081f4 <__pow5mult+0xb0>)
 8008180:	f000 fc0a 	bl	8008998 <__assert_func>
 8008184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008188:	6004      	str	r4, [r0, #0]
 800818a:	60c4      	str	r4, [r0, #12]
 800818c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008194:	b94c      	cbnz	r4, 80081aa <__pow5mult+0x66>
 8008196:	f240 2171 	movw	r1, #625	; 0x271
 800819a:	4630      	mov	r0, r6
 800819c:	f7ff ff14 	bl	8007fc8 <__i2b>
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80081a8:	6003      	str	r3, [r0, #0]
 80081aa:	f04f 0900 	mov.w	r9, #0
 80081ae:	07eb      	lsls	r3, r5, #31
 80081b0:	d50a      	bpl.n	80081c8 <__pow5mult+0x84>
 80081b2:	4639      	mov	r1, r7
 80081b4:	4622      	mov	r2, r4
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff ff1c 	bl	8007ff4 <__multiply>
 80081bc:	4680      	mov	r8, r0
 80081be:	4639      	mov	r1, r7
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff fe4b 	bl	8007e5c <_Bfree>
 80081c6:	4647      	mov	r7, r8
 80081c8:	106d      	asrs	r5, r5, #1
 80081ca:	d00b      	beq.n	80081e4 <__pow5mult+0xa0>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	b938      	cbnz	r0, 80081e0 <__pow5mult+0x9c>
 80081d0:	4622      	mov	r2, r4
 80081d2:	4621      	mov	r1, r4
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7ff ff0d 	bl	8007ff4 <__multiply>
 80081da:	6020      	str	r0, [r4, #0]
 80081dc:	f8c0 9000 	str.w	r9, [r0]
 80081e0:	4604      	mov	r4, r0
 80081e2:	e7e4      	b.n	80081ae <__pow5mult+0x6a>
 80081e4:	4638      	mov	r0, r7
 80081e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ea:	bf00      	nop
 80081ec:	080099e8 	.word	0x080099e8
 80081f0:	08009819 	.word	0x08009819
 80081f4:	0800989c 	.word	0x0800989c

080081f8 <__lshift>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	460c      	mov	r4, r1
 80081fe:	4607      	mov	r7, r0
 8008200:	4691      	mov	r9, r2
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	6849      	ldr	r1, [r1, #4]
 8008206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008210:	f108 0601 	add.w	r6, r8, #1
 8008214:	42b3      	cmp	r3, r6
 8008216:	db0b      	blt.n	8008230 <__lshift+0x38>
 8008218:	4638      	mov	r0, r7
 800821a:	f7ff fddf 	bl	8007ddc <_Balloc>
 800821e:	4605      	mov	r5, r0
 8008220:	b948      	cbnz	r0, 8008236 <__lshift+0x3e>
 8008222:	4602      	mov	r2, r0
 8008224:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008228:	4b29      	ldr	r3, [pc, #164]	; (80082d0 <__lshift+0xd8>)
 800822a:	482a      	ldr	r0, [pc, #168]	; (80082d4 <__lshift+0xdc>)
 800822c:	f000 fbb4 	bl	8008998 <__assert_func>
 8008230:	3101      	adds	r1, #1
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	e7ee      	b.n	8008214 <__lshift+0x1c>
 8008236:	2300      	movs	r3, #0
 8008238:	f100 0114 	add.w	r1, r0, #20
 800823c:	f100 0210 	add.w	r2, r0, #16
 8008240:	4618      	mov	r0, r3
 8008242:	4553      	cmp	r3, sl
 8008244:	db37      	blt.n	80082b6 <__lshift+0xbe>
 8008246:	6920      	ldr	r0, [r4, #16]
 8008248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800824c:	f104 0314 	add.w	r3, r4, #20
 8008250:	f019 091f 	ands.w	r9, r9, #31
 8008254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008258:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800825c:	d02f      	beq.n	80082be <__lshift+0xc6>
 800825e:	468a      	mov	sl, r1
 8008260:	f04f 0c00 	mov.w	ip, #0
 8008264:	f1c9 0e20 	rsb	lr, r9, #32
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	fa02 f209 	lsl.w	r2, r2, r9
 800826e:	ea42 020c 	orr.w	r2, r2, ip
 8008272:	f84a 2b04 	str.w	r2, [sl], #4
 8008276:	f853 2b04 	ldr.w	r2, [r3], #4
 800827a:	4298      	cmp	r0, r3
 800827c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008280:	d8f2      	bhi.n	8008268 <__lshift+0x70>
 8008282:	1b03      	subs	r3, r0, r4
 8008284:	3b15      	subs	r3, #21
 8008286:	f023 0303 	bic.w	r3, r3, #3
 800828a:	3304      	adds	r3, #4
 800828c:	f104 0215 	add.w	r2, r4, #21
 8008290:	4290      	cmp	r0, r2
 8008292:	bf38      	it	cc
 8008294:	2304      	movcc	r3, #4
 8008296:	f841 c003 	str.w	ip, [r1, r3]
 800829a:	f1bc 0f00 	cmp.w	ip, #0
 800829e:	d001      	beq.n	80082a4 <__lshift+0xac>
 80082a0:	f108 0602 	add.w	r6, r8, #2
 80082a4:	3e01      	subs	r6, #1
 80082a6:	4638      	mov	r0, r7
 80082a8:	4621      	mov	r1, r4
 80082aa:	612e      	str	r6, [r5, #16]
 80082ac:	f7ff fdd6 	bl	8007e5c <_Bfree>
 80082b0:	4628      	mov	r0, r5
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80082ba:	3301      	adds	r3, #1
 80082bc:	e7c1      	b.n	8008242 <__lshift+0x4a>
 80082be:	3904      	subs	r1, #4
 80082c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c4:	4298      	cmp	r0, r3
 80082c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80082ca:	d8f9      	bhi.n	80082c0 <__lshift+0xc8>
 80082cc:	e7ea      	b.n	80082a4 <__lshift+0xac>
 80082ce:	bf00      	nop
 80082d0:	0800988b 	.word	0x0800988b
 80082d4:	0800989c 	.word	0x0800989c

080082d8 <__mcmp>:
 80082d8:	4603      	mov	r3, r0
 80082da:	690a      	ldr	r2, [r1, #16]
 80082dc:	6900      	ldr	r0, [r0, #16]
 80082de:	b530      	push	{r4, r5, lr}
 80082e0:	1a80      	subs	r0, r0, r2
 80082e2:	d10d      	bne.n	8008300 <__mcmp+0x28>
 80082e4:	3314      	adds	r3, #20
 80082e6:	3114      	adds	r1, #20
 80082e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80082ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80082f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082f8:	4295      	cmp	r5, r2
 80082fa:	d002      	beq.n	8008302 <__mcmp+0x2a>
 80082fc:	d304      	bcc.n	8008308 <__mcmp+0x30>
 80082fe:	2001      	movs	r0, #1
 8008300:	bd30      	pop	{r4, r5, pc}
 8008302:	42a3      	cmp	r3, r4
 8008304:	d3f4      	bcc.n	80082f0 <__mcmp+0x18>
 8008306:	e7fb      	b.n	8008300 <__mcmp+0x28>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	e7f8      	b.n	8008300 <__mcmp+0x28>
	...

08008310 <__mdiff>:
 8008310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	460d      	mov	r5, r1
 8008316:	4607      	mov	r7, r0
 8008318:	4611      	mov	r1, r2
 800831a:	4628      	mov	r0, r5
 800831c:	4614      	mov	r4, r2
 800831e:	f7ff ffdb 	bl	80082d8 <__mcmp>
 8008322:	1e06      	subs	r6, r0, #0
 8008324:	d111      	bne.n	800834a <__mdiff+0x3a>
 8008326:	4631      	mov	r1, r6
 8008328:	4638      	mov	r0, r7
 800832a:	f7ff fd57 	bl	8007ddc <_Balloc>
 800832e:	4602      	mov	r2, r0
 8008330:	b928      	cbnz	r0, 800833e <__mdiff+0x2e>
 8008332:	f240 2132 	movw	r1, #562	; 0x232
 8008336:	4b3a      	ldr	r3, [pc, #232]	; (8008420 <__mdiff+0x110>)
 8008338:	483a      	ldr	r0, [pc, #232]	; (8008424 <__mdiff+0x114>)
 800833a:	f000 fb2d 	bl	8008998 <__assert_func>
 800833e:	2301      	movs	r3, #1
 8008340:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008344:	4610      	mov	r0, r2
 8008346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	bfa4      	itt	ge
 800834c:	4623      	movge	r3, r4
 800834e:	462c      	movge	r4, r5
 8008350:	4638      	mov	r0, r7
 8008352:	6861      	ldr	r1, [r4, #4]
 8008354:	bfa6      	itte	ge
 8008356:	461d      	movge	r5, r3
 8008358:	2600      	movge	r6, #0
 800835a:	2601      	movlt	r6, #1
 800835c:	f7ff fd3e 	bl	8007ddc <_Balloc>
 8008360:	4602      	mov	r2, r0
 8008362:	b918      	cbnz	r0, 800836c <__mdiff+0x5c>
 8008364:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008368:	4b2d      	ldr	r3, [pc, #180]	; (8008420 <__mdiff+0x110>)
 800836a:	e7e5      	b.n	8008338 <__mdiff+0x28>
 800836c:	f102 0814 	add.w	r8, r2, #20
 8008370:	46c2      	mov	sl, r8
 8008372:	f04f 0c00 	mov.w	ip, #0
 8008376:	6927      	ldr	r7, [r4, #16]
 8008378:	60c6      	str	r6, [r0, #12]
 800837a:	692e      	ldr	r6, [r5, #16]
 800837c:	f104 0014 	add.w	r0, r4, #20
 8008380:	f105 0914 	add.w	r9, r5, #20
 8008384:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008388:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800838c:	3410      	adds	r4, #16
 800838e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008392:	f859 3b04 	ldr.w	r3, [r9], #4
 8008396:	fa1f f18b 	uxth.w	r1, fp
 800839a:	448c      	add	ip, r1
 800839c:	b299      	uxth	r1, r3
 800839e:	0c1b      	lsrs	r3, r3, #16
 80083a0:	ebac 0101 	sub.w	r1, ip, r1
 80083a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80083ac:	b289      	uxth	r1, r1
 80083ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80083b2:	454e      	cmp	r6, r9
 80083b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80083b8:	f84a 3b04 	str.w	r3, [sl], #4
 80083bc:	d8e7      	bhi.n	800838e <__mdiff+0x7e>
 80083be:	1b73      	subs	r3, r6, r5
 80083c0:	3b15      	subs	r3, #21
 80083c2:	f023 0303 	bic.w	r3, r3, #3
 80083c6:	3515      	adds	r5, #21
 80083c8:	3304      	adds	r3, #4
 80083ca:	42ae      	cmp	r6, r5
 80083cc:	bf38      	it	cc
 80083ce:	2304      	movcc	r3, #4
 80083d0:	4418      	add	r0, r3
 80083d2:	4443      	add	r3, r8
 80083d4:	461e      	mov	r6, r3
 80083d6:	4605      	mov	r5, r0
 80083d8:	4575      	cmp	r5, lr
 80083da:	d30e      	bcc.n	80083fa <__mdiff+0xea>
 80083dc:	f10e 0103 	add.w	r1, lr, #3
 80083e0:	1a09      	subs	r1, r1, r0
 80083e2:	f021 0103 	bic.w	r1, r1, #3
 80083e6:	3803      	subs	r0, #3
 80083e8:	4586      	cmp	lr, r0
 80083ea:	bf38      	it	cc
 80083ec:	2100      	movcc	r1, #0
 80083ee:	4419      	add	r1, r3
 80083f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80083f4:	b18b      	cbz	r3, 800841a <__mdiff+0x10a>
 80083f6:	6117      	str	r7, [r2, #16]
 80083f8:	e7a4      	b.n	8008344 <__mdiff+0x34>
 80083fa:	f855 8b04 	ldr.w	r8, [r5], #4
 80083fe:	fa1f f188 	uxth.w	r1, r8
 8008402:	4461      	add	r1, ip
 8008404:	140c      	asrs	r4, r1, #16
 8008406:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800840a:	b289      	uxth	r1, r1
 800840c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008410:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008414:	f846 1b04 	str.w	r1, [r6], #4
 8008418:	e7de      	b.n	80083d8 <__mdiff+0xc8>
 800841a:	3f01      	subs	r7, #1
 800841c:	e7e8      	b.n	80083f0 <__mdiff+0xe0>
 800841e:	bf00      	nop
 8008420:	0800988b 	.word	0x0800988b
 8008424:	0800989c 	.word	0x0800989c

08008428 <__d2b>:
 8008428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800842c:	2101      	movs	r1, #1
 800842e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008432:	4690      	mov	r8, r2
 8008434:	461d      	mov	r5, r3
 8008436:	f7ff fcd1 	bl	8007ddc <_Balloc>
 800843a:	4604      	mov	r4, r0
 800843c:	b930      	cbnz	r0, 800844c <__d2b+0x24>
 800843e:	4602      	mov	r2, r0
 8008440:	f240 310a 	movw	r1, #778	; 0x30a
 8008444:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <__d2b+0xb0>)
 8008446:	4825      	ldr	r0, [pc, #148]	; (80084dc <__d2b+0xb4>)
 8008448:	f000 faa6 	bl	8008998 <__assert_func>
 800844c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008450:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008454:	bb2d      	cbnz	r5, 80084a2 <__d2b+0x7a>
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	f1b8 0300 	subs.w	r3, r8, #0
 800845c:	d026      	beq.n	80084ac <__d2b+0x84>
 800845e:	4668      	mov	r0, sp
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	f7ff fd83 	bl	8007f6c <__lo0bits>
 8008466:	9900      	ldr	r1, [sp, #0]
 8008468:	b1f0      	cbz	r0, 80084a8 <__d2b+0x80>
 800846a:	9a01      	ldr	r2, [sp, #4]
 800846c:	f1c0 0320 	rsb	r3, r0, #32
 8008470:	fa02 f303 	lsl.w	r3, r2, r3
 8008474:	430b      	orrs	r3, r1
 8008476:	40c2      	lsrs	r2, r0
 8008478:	6163      	str	r3, [r4, #20]
 800847a:	9201      	str	r2, [sp, #4]
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	bf14      	ite	ne
 8008482:	2102      	movne	r1, #2
 8008484:	2101      	moveq	r1, #1
 8008486:	61a3      	str	r3, [r4, #24]
 8008488:	6121      	str	r1, [r4, #16]
 800848a:	b1c5      	cbz	r5, 80084be <__d2b+0x96>
 800848c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008490:	4405      	add	r5, r0
 8008492:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008496:	603d      	str	r5, [r7, #0]
 8008498:	6030      	str	r0, [r6, #0]
 800849a:	4620      	mov	r0, r4
 800849c:	b002      	add	sp, #8
 800849e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a6:	e7d6      	b.n	8008456 <__d2b+0x2e>
 80084a8:	6161      	str	r1, [r4, #20]
 80084aa:	e7e7      	b.n	800847c <__d2b+0x54>
 80084ac:	a801      	add	r0, sp, #4
 80084ae:	f7ff fd5d 	bl	8007f6c <__lo0bits>
 80084b2:	2101      	movs	r1, #1
 80084b4:	9b01      	ldr	r3, [sp, #4]
 80084b6:	6121      	str	r1, [r4, #16]
 80084b8:	6163      	str	r3, [r4, #20]
 80084ba:	3020      	adds	r0, #32
 80084bc:	e7e5      	b.n	800848a <__d2b+0x62>
 80084be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80084c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084c6:	6038      	str	r0, [r7, #0]
 80084c8:	6918      	ldr	r0, [r3, #16]
 80084ca:	f7ff fd2f 	bl	8007f2c <__hi0bits>
 80084ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80084d2:	6031      	str	r1, [r6, #0]
 80084d4:	e7e1      	b.n	800849a <__d2b+0x72>
 80084d6:	bf00      	nop
 80084d8:	0800988b 	.word	0x0800988b
 80084dc:	0800989c 	.word	0x0800989c

080084e0 <_calloc_r>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	fba1 5402 	umull	r5, r4, r1, r2
 80084e6:	b934      	cbnz	r4, 80084f6 <_calloc_r+0x16>
 80084e8:	4629      	mov	r1, r5
 80084ea:	f000 f875 	bl	80085d8 <_malloc_r>
 80084ee:	4606      	mov	r6, r0
 80084f0:	b928      	cbnz	r0, 80084fe <_calloc_r+0x1e>
 80084f2:	4630      	mov	r0, r6
 80084f4:	bd70      	pop	{r4, r5, r6, pc}
 80084f6:	220c      	movs	r2, #12
 80084f8:	2600      	movs	r6, #0
 80084fa:	6002      	str	r2, [r0, #0]
 80084fc:	e7f9      	b.n	80084f2 <_calloc_r+0x12>
 80084fe:	462a      	mov	r2, r5
 8008500:	4621      	mov	r1, r4
 8008502:	f7fe f93f 	bl	8006784 <memset>
 8008506:	e7f4      	b.n	80084f2 <_calloc_r+0x12>

08008508 <_free_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4605      	mov	r5, r0
 800850c:	2900      	cmp	r1, #0
 800850e:	d040      	beq.n	8008592 <_free_r+0x8a>
 8008510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008514:	1f0c      	subs	r4, r1, #4
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfb8      	it	lt
 800851a:	18e4      	addlt	r4, r4, r3
 800851c:	f000 fa98 	bl	8008a50 <__malloc_lock>
 8008520:	4a1c      	ldr	r2, [pc, #112]	; (8008594 <_free_r+0x8c>)
 8008522:	6813      	ldr	r3, [r2, #0]
 8008524:	b933      	cbnz	r3, 8008534 <_free_r+0x2c>
 8008526:	6063      	str	r3, [r4, #4]
 8008528:	6014      	str	r4, [r2, #0]
 800852a:	4628      	mov	r0, r5
 800852c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008530:	f000 ba94 	b.w	8008a5c <__malloc_unlock>
 8008534:	42a3      	cmp	r3, r4
 8008536:	d908      	bls.n	800854a <_free_r+0x42>
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	1821      	adds	r1, r4, r0
 800853c:	428b      	cmp	r3, r1
 800853e:	bf01      	itttt	eq
 8008540:	6819      	ldreq	r1, [r3, #0]
 8008542:	685b      	ldreq	r3, [r3, #4]
 8008544:	1809      	addeq	r1, r1, r0
 8008546:	6021      	streq	r1, [r4, #0]
 8008548:	e7ed      	b.n	8008526 <_free_r+0x1e>
 800854a:	461a      	mov	r2, r3
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	b10b      	cbz	r3, 8008554 <_free_r+0x4c>
 8008550:	42a3      	cmp	r3, r4
 8008552:	d9fa      	bls.n	800854a <_free_r+0x42>
 8008554:	6811      	ldr	r1, [r2, #0]
 8008556:	1850      	adds	r0, r2, r1
 8008558:	42a0      	cmp	r0, r4
 800855a:	d10b      	bne.n	8008574 <_free_r+0x6c>
 800855c:	6820      	ldr	r0, [r4, #0]
 800855e:	4401      	add	r1, r0
 8008560:	1850      	adds	r0, r2, r1
 8008562:	4283      	cmp	r3, r0
 8008564:	6011      	str	r1, [r2, #0]
 8008566:	d1e0      	bne.n	800852a <_free_r+0x22>
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	4401      	add	r1, r0
 800856e:	6011      	str	r1, [r2, #0]
 8008570:	6053      	str	r3, [r2, #4]
 8008572:	e7da      	b.n	800852a <_free_r+0x22>
 8008574:	d902      	bls.n	800857c <_free_r+0x74>
 8008576:	230c      	movs	r3, #12
 8008578:	602b      	str	r3, [r5, #0]
 800857a:	e7d6      	b.n	800852a <_free_r+0x22>
 800857c:	6820      	ldr	r0, [r4, #0]
 800857e:	1821      	adds	r1, r4, r0
 8008580:	428b      	cmp	r3, r1
 8008582:	bf01      	itttt	eq
 8008584:	6819      	ldreq	r1, [r3, #0]
 8008586:	685b      	ldreq	r3, [r3, #4]
 8008588:	1809      	addeq	r1, r1, r0
 800858a:	6021      	streq	r1, [r4, #0]
 800858c:	6063      	str	r3, [r4, #4]
 800858e:	6054      	str	r4, [r2, #4]
 8008590:	e7cb      	b.n	800852a <_free_r+0x22>
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	20000330 	.word	0x20000330

08008598 <sbrk_aligned>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4e0e      	ldr	r6, [pc, #56]	; (80085d4 <sbrk_aligned+0x3c>)
 800859c:	460c      	mov	r4, r1
 800859e:	6831      	ldr	r1, [r6, #0]
 80085a0:	4605      	mov	r5, r0
 80085a2:	b911      	cbnz	r1, 80085aa <sbrk_aligned+0x12>
 80085a4:	f000 f9e8 	bl	8008978 <_sbrk_r>
 80085a8:	6030      	str	r0, [r6, #0]
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f9e3 	bl	8008978 <_sbrk_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d00a      	beq.n	80085cc <sbrk_aligned+0x34>
 80085b6:	1cc4      	adds	r4, r0, #3
 80085b8:	f024 0403 	bic.w	r4, r4, #3
 80085bc:	42a0      	cmp	r0, r4
 80085be:	d007      	beq.n	80085d0 <sbrk_aligned+0x38>
 80085c0:	1a21      	subs	r1, r4, r0
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 f9d8 	bl	8008978 <_sbrk_r>
 80085c8:	3001      	adds	r0, #1
 80085ca:	d101      	bne.n	80085d0 <sbrk_aligned+0x38>
 80085cc:	f04f 34ff 	mov.w	r4, #4294967295
 80085d0:	4620      	mov	r0, r4
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	20000334 	.word	0x20000334

080085d8 <_malloc_r>:
 80085d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085dc:	1ccd      	adds	r5, r1, #3
 80085de:	f025 0503 	bic.w	r5, r5, #3
 80085e2:	3508      	adds	r5, #8
 80085e4:	2d0c      	cmp	r5, #12
 80085e6:	bf38      	it	cc
 80085e8:	250c      	movcc	r5, #12
 80085ea:	2d00      	cmp	r5, #0
 80085ec:	4607      	mov	r7, r0
 80085ee:	db01      	blt.n	80085f4 <_malloc_r+0x1c>
 80085f0:	42a9      	cmp	r1, r5
 80085f2:	d905      	bls.n	8008600 <_malloc_r+0x28>
 80085f4:	230c      	movs	r3, #12
 80085f6:	2600      	movs	r6, #0
 80085f8:	603b      	str	r3, [r7, #0]
 80085fa:	4630      	mov	r0, r6
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	4e2e      	ldr	r6, [pc, #184]	; (80086bc <_malloc_r+0xe4>)
 8008602:	f000 fa25 	bl	8008a50 <__malloc_lock>
 8008606:	6833      	ldr	r3, [r6, #0]
 8008608:	461c      	mov	r4, r3
 800860a:	bb34      	cbnz	r4, 800865a <_malloc_r+0x82>
 800860c:	4629      	mov	r1, r5
 800860e:	4638      	mov	r0, r7
 8008610:	f7ff ffc2 	bl	8008598 <sbrk_aligned>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	4604      	mov	r4, r0
 8008618:	d14d      	bne.n	80086b6 <_malloc_r+0xde>
 800861a:	6834      	ldr	r4, [r6, #0]
 800861c:	4626      	mov	r6, r4
 800861e:	2e00      	cmp	r6, #0
 8008620:	d140      	bne.n	80086a4 <_malloc_r+0xcc>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	4631      	mov	r1, r6
 8008626:	4638      	mov	r0, r7
 8008628:	eb04 0803 	add.w	r8, r4, r3
 800862c:	f000 f9a4 	bl	8008978 <_sbrk_r>
 8008630:	4580      	cmp	r8, r0
 8008632:	d13a      	bne.n	80086aa <_malloc_r+0xd2>
 8008634:	6821      	ldr	r1, [r4, #0]
 8008636:	3503      	adds	r5, #3
 8008638:	1a6d      	subs	r5, r5, r1
 800863a:	f025 0503 	bic.w	r5, r5, #3
 800863e:	3508      	adds	r5, #8
 8008640:	2d0c      	cmp	r5, #12
 8008642:	bf38      	it	cc
 8008644:	250c      	movcc	r5, #12
 8008646:	4638      	mov	r0, r7
 8008648:	4629      	mov	r1, r5
 800864a:	f7ff ffa5 	bl	8008598 <sbrk_aligned>
 800864e:	3001      	adds	r0, #1
 8008650:	d02b      	beq.n	80086aa <_malloc_r+0xd2>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	442b      	add	r3, r5
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	e00e      	b.n	8008678 <_malloc_r+0xa0>
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	1b52      	subs	r2, r2, r5
 800865e:	d41e      	bmi.n	800869e <_malloc_r+0xc6>
 8008660:	2a0b      	cmp	r2, #11
 8008662:	d916      	bls.n	8008692 <_malloc_r+0xba>
 8008664:	1961      	adds	r1, r4, r5
 8008666:	42a3      	cmp	r3, r4
 8008668:	6025      	str	r5, [r4, #0]
 800866a:	bf18      	it	ne
 800866c:	6059      	strne	r1, [r3, #4]
 800866e:	6863      	ldr	r3, [r4, #4]
 8008670:	bf08      	it	eq
 8008672:	6031      	streq	r1, [r6, #0]
 8008674:	5162      	str	r2, [r4, r5]
 8008676:	604b      	str	r3, [r1, #4]
 8008678:	4638      	mov	r0, r7
 800867a:	f104 060b 	add.w	r6, r4, #11
 800867e:	f000 f9ed 	bl	8008a5c <__malloc_unlock>
 8008682:	f026 0607 	bic.w	r6, r6, #7
 8008686:	1d23      	adds	r3, r4, #4
 8008688:	1af2      	subs	r2, r6, r3
 800868a:	d0b6      	beq.n	80085fa <_malloc_r+0x22>
 800868c:	1b9b      	subs	r3, r3, r6
 800868e:	50a3      	str	r3, [r4, r2]
 8008690:	e7b3      	b.n	80085fa <_malloc_r+0x22>
 8008692:	6862      	ldr	r2, [r4, #4]
 8008694:	42a3      	cmp	r3, r4
 8008696:	bf0c      	ite	eq
 8008698:	6032      	streq	r2, [r6, #0]
 800869a:	605a      	strne	r2, [r3, #4]
 800869c:	e7ec      	b.n	8008678 <_malloc_r+0xa0>
 800869e:	4623      	mov	r3, r4
 80086a0:	6864      	ldr	r4, [r4, #4]
 80086a2:	e7b2      	b.n	800860a <_malloc_r+0x32>
 80086a4:	4634      	mov	r4, r6
 80086a6:	6876      	ldr	r6, [r6, #4]
 80086a8:	e7b9      	b.n	800861e <_malloc_r+0x46>
 80086aa:	230c      	movs	r3, #12
 80086ac:	4638      	mov	r0, r7
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	f000 f9d4 	bl	8008a5c <__malloc_unlock>
 80086b4:	e7a1      	b.n	80085fa <_malloc_r+0x22>
 80086b6:	6025      	str	r5, [r4, #0]
 80086b8:	e7de      	b.n	8008678 <_malloc_r+0xa0>
 80086ba:	bf00      	nop
 80086bc:	20000330 	.word	0x20000330

080086c0 <__ssputs_r>:
 80086c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c4:	688e      	ldr	r6, [r1, #8]
 80086c6:	4682      	mov	sl, r0
 80086c8:	429e      	cmp	r6, r3
 80086ca:	460c      	mov	r4, r1
 80086cc:	4690      	mov	r8, r2
 80086ce:	461f      	mov	r7, r3
 80086d0:	d838      	bhi.n	8008744 <__ssputs_r+0x84>
 80086d2:	898a      	ldrh	r2, [r1, #12]
 80086d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086d8:	d032      	beq.n	8008740 <__ssputs_r+0x80>
 80086da:	6825      	ldr	r5, [r4, #0]
 80086dc:	6909      	ldr	r1, [r1, #16]
 80086de:	3301      	adds	r3, #1
 80086e0:	eba5 0901 	sub.w	r9, r5, r1
 80086e4:	6965      	ldr	r5, [r4, #20]
 80086e6:	444b      	add	r3, r9
 80086e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086f0:	106d      	asrs	r5, r5, #1
 80086f2:	429d      	cmp	r5, r3
 80086f4:	bf38      	it	cc
 80086f6:	461d      	movcc	r5, r3
 80086f8:	0553      	lsls	r3, r2, #21
 80086fa:	d531      	bpl.n	8008760 <__ssputs_r+0xa0>
 80086fc:	4629      	mov	r1, r5
 80086fe:	f7ff ff6b 	bl	80085d8 <_malloc_r>
 8008702:	4606      	mov	r6, r0
 8008704:	b950      	cbnz	r0, 800871c <__ssputs_r+0x5c>
 8008706:	230c      	movs	r3, #12
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	f8ca 3000 	str.w	r3, [sl]
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871c:	464a      	mov	r2, r9
 800871e:	6921      	ldr	r1, [r4, #16]
 8008720:	f7ff fb4e 	bl	8007dc0 <memcpy>
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800872a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872e:	81a3      	strh	r3, [r4, #12]
 8008730:	6126      	str	r6, [r4, #16]
 8008732:	444e      	add	r6, r9
 8008734:	6026      	str	r6, [r4, #0]
 8008736:	463e      	mov	r6, r7
 8008738:	6165      	str	r5, [r4, #20]
 800873a:	eba5 0509 	sub.w	r5, r5, r9
 800873e:	60a5      	str	r5, [r4, #8]
 8008740:	42be      	cmp	r6, r7
 8008742:	d900      	bls.n	8008746 <__ssputs_r+0x86>
 8008744:	463e      	mov	r6, r7
 8008746:	4632      	mov	r2, r6
 8008748:	4641      	mov	r1, r8
 800874a:	6820      	ldr	r0, [r4, #0]
 800874c:	f000 f966 	bl	8008a1c <memmove>
 8008750:	68a3      	ldr	r3, [r4, #8]
 8008752:	2000      	movs	r0, #0
 8008754:	1b9b      	subs	r3, r3, r6
 8008756:	60a3      	str	r3, [r4, #8]
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	4433      	add	r3, r6
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	e7db      	b.n	8008718 <__ssputs_r+0x58>
 8008760:	462a      	mov	r2, r5
 8008762:	f000 f981 	bl	8008a68 <_realloc_r>
 8008766:	4606      	mov	r6, r0
 8008768:	2800      	cmp	r0, #0
 800876a:	d1e1      	bne.n	8008730 <__ssputs_r+0x70>
 800876c:	4650      	mov	r0, sl
 800876e:	6921      	ldr	r1, [r4, #16]
 8008770:	f7ff feca 	bl	8008508 <_free_r>
 8008774:	e7c7      	b.n	8008706 <__ssputs_r+0x46>
	...

08008778 <_svfiprintf_r>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	4698      	mov	r8, r3
 800877e:	898b      	ldrh	r3, [r1, #12]
 8008780:	4607      	mov	r7, r0
 8008782:	061b      	lsls	r3, r3, #24
 8008784:	460d      	mov	r5, r1
 8008786:	4614      	mov	r4, r2
 8008788:	b09d      	sub	sp, #116	; 0x74
 800878a:	d50e      	bpl.n	80087aa <_svfiprintf_r+0x32>
 800878c:	690b      	ldr	r3, [r1, #16]
 800878e:	b963      	cbnz	r3, 80087aa <_svfiprintf_r+0x32>
 8008790:	2140      	movs	r1, #64	; 0x40
 8008792:	f7ff ff21 	bl	80085d8 <_malloc_r>
 8008796:	6028      	str	r0, [r5, #0]
 8008798:	6128      	str	r0, [r5, #16]
 800879a:	b920      	cbnz	r0, 80087a6 <_svfiprintf_r+0x2e>
 800879c:	230c      	movs	r3, #12
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e0d1      	b.n	800894a <_svfiprintf_r+0x1d2>
 80087a6:	2340      	movs	r3, #64	; 0x40
 80087a8:	616b      	str	r3, [r5, #20]
 80087aa:	2300      	movs	r3, #0
 80087ac:	9309      	str	r3, [sp, #36]	; 0x24
 80087ae:	2320      	movs	r3, #32
 80087b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087b4:	2330      	movs	r3, #48	; 0x30
 80087b6:	f04f 0901 	mov.w	r9, #1
 80087ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80087be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008964 <_svfiprintf_r+0x1ec>
 80087c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087c6:	4623      	mov	r3, r4
 80087c8:	469a      	mov	sl, r3
 80087ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ce:	b10a      	cbz	r2, 80087d4 <_svfiprintf_r+0x5c>
 80087d0:	2a25      	cmp	r2, #37	; 0x25
 80087d2:	d1f9      	bne.n	80087c8 <_svfiprintf_r+0x50>
 80087d4:	ebba 0b04 	subs.w	fp, sl, r4
 80087d8:	d00b      	beq.n	80087f2 <_svfiprintf_r+0x7a>
 80087da:	465b      	mov	r3, fp
 80087dc:	4622      	mov	r2, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7ff ff6d 	bl	80086c0 <__ssputs_r>
 80087e6:	3001      	adds	r0, #1
 80087e8:	f000 80aa 	beq.w	8008940 <_svfiprintf_r+0x1c8>
 80087ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ee:	445a      	add	r2, fp
 80087f0:	9209      	str	r2, [sp, #36]	; 0x24
 80087f2:	f89a 3000 	ldrb.w	r3, [sl]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 80a2 	beq.w	8008940 <_svfiprintf_r+0x1c8>
 80087fc:	2300      	movs	r3, #0
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008806:	f10a 0a01 	add.w	sl, sl, #1
 800880a:	9304      	str	r3, [sp, #16]
 800880c:	9307      	str	r3, [sp, #28]
 800880e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008812:	931a      	str	r3, [sp, #104]	; 0x68
 8008814:	4654      	mov	r4, sl
 8008816:	2205      	movs	r2, #5
 8008818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881c:	4851      	ldr	r0, [pc, #324]	; (8008964 <_svfiprintf_r+0x1ec>)
 800881e:	f7ff fac1 	bl	8007da4 <memchr>
 8008822:	9a04      	ldr	r2, [sp, #16]
 8008824:	b9d8      	cbnz	r0, 800885e <_svfiprintf_r+0xe6>
 8008826:	06d0      	lsls	r0, r2, #27
 8008828:	bf44      	itt	mi
 800882a:	2320      	movmi	r3, #32
 800882c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008830:	0711      	lsls	r1, r2, #28
 8008832:	bf44      	itt	mi
 8008834:	232b      	movmi	r3, #43	; 0x2b
 8008836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800883a:	f89a 3000 	ldrb.w	r3, [sl]
 800883e:	2b2a      	cmp	r3, #42	; 0x2a
 8008840:	d015      	beq.n	800886e <_svfiprintf_r+0xf6>
 8008842:	4654      	mov	r4, sl
 8008844:	2000      	movs	r0, #0
 8008846:	f04f 0c0a 	mov.w	ip, #10
 800884a:	9a07      	ldr	r2, [sp, #28]
 800884c:	4621      	mov	r1, r4
 800884e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008852:	3b30      	subs	r3, #48	; 0x30
 8008854:	2b09      	cmp	r3, #9
 8008856:	d94e      	bls.n	80088f6 <_svfiprintf_r+0x17e>
 8008858:	b1b0      	cbz	r0, 8008888 <_svfiprintf_r+0x110>
 800885a:	9207      	str	r2, [sp, #28]
 800885c:	e014      	b.n	8008888 <_svfiprintf_r+0x110>
 800885e:	eba0 0308 	sub.w	r3, r0, r8
 8008862:	fa09 f303 	lsl.w	r3, r9, r3
 8008866:	4313      	orrs	r3, r2
 8008868:	46a2      	mov	sl, r4
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	e7d2      	b.n	8008814 <_svfiprintf_r+0x9c>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	1d19      	adds	r1, r3, #4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	9103      	str	r1, [sp, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	bfbb      	ittet	lt
 800887a:	425b      	neglt	r3, r3
 800887c:	f042 0202 	orrlt.w	r2, r2, #2
 8008880:	9307      	strge	r3, [sp, #28]
 8008882:	9307      	strlt	r3, [sp, #28]
 8008884:	bfb8      	it	lt
 8008886:	9204      	strlt	r2, [sp, #16]
 8008888:	7823      	ldrb	r3, [r4, #0]
 800888a:	2b2e      	cmp	r3, #46	; 0x2e
 800888c:	d10c      	bne.n	80088a8 <_svfiprintf_r+0x130>
 800888e:	7863      	ldrb	r3, [r4, #1]
 8008890:	2b2a      	cmp	r3, #42	; 0x2a
 8008892:	d135      	bne.n	8008900 <_svfiprintf_r+0x188>
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	3402      	adds	r4, #2
 8008898:	1d1a      	adds	r2, r3, #4
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	9203      	str	r2, [sp, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bfb8      	it	lt
 80088a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80088a6:	9305      	str	r3, [sp, #20]
 80088a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008968 <_svfiprintf_r+0x1f0>
 80088ac:	2203      	movs	r2, #3
 80088ae:	4650      	mov	r0, sl
 80088b0:	7821      	ldrb	r1, [r4, #0]
 80088b2:	f7ff fa77 	bl	8007da4 <memchr>
 80088b6:	b140      	cbz	r0, 80088ca <_svfiprintf_r+0x152>
 80088b8:	2340      	movs	r3, #64	; 0x40
 80088ba:	eba0 000a 	sub.w	r0, r0, sl
 80088be:	fa03 f000 	lsl.w	r0, r3, r0
 80088c2:	9b04      	ldr	r3, [sp, #16]
 80088c4:	3401      	adds	r4, #1
 80088c6:	4303      	orrs	r3, r0
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ce:	2206      	movs	r2, #6
 80088d0:	4826      	ldr	r0, [pc, #152]	; (800896c <_svfiprintf_r+0x1f4>)
 80088d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088d6:	f7ff fa65 	bl	8007da4 <memchr>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d038      	beq.n	8008950 <_svfiprintf_r+0x1d8>
 80088de:	4b24      	ldr	r3, [pc, #144]	; (8008970 <_svfiprintf_r+0x1f8>)
 80088e0:	bb1b      	cbnz	r3, 800892a <_svfiprintf_r+0x1b2>
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	3307      	adds	r3, #7
 80088e6:	f023 0307 	bic.w	r3, r3, #7
 80088ea:	3308      	adds	r3, #8
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f0:	4433      	add	r3, r6
 80088f2:	9309      	str	r3, [sp, #36]	; 0x24
 80088f4:	e767      	b.n	80087c6 <_svfiprintf_r+0x4e>
 80088f6:	460c      	mov	r4, r1
 80088f8:	2001      	movs	r0, #1
 80088fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80088fe:	e7a5      	b.n	800884c <_svfiprintf_r+0xd4>
 8008900:	2300      	movs	r3, #0
 8008902:	f04f 0c0a 	mov.w	ip, #10
 8008906:	4619      	mov	r1, r3
 8008908:	3401      	adds	r4, #1
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	4620      	mov	r0, r4
 800890e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008912:	3a30      	subs	r2, #48	; 0x30
 8008914:	2a09      	cmp	r2, #9
 8008916:	d903      	bls.n	8008920 <_svfiprintf_r+0x1a8>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0c5      	beq.n	80088a8 <_svfiprintf_r+0x130>
 800891c:	9105      	str	r1, [sp, #20]
 800891e:	e7c3      	b.n	80088a8 <_svfiprintf_r+0x130>
 8008920:	4604      	mov	r4, r0
 8008922:	2301      	movs	r3, #1
 8008924:	fb0c 2101 	mla	r1, ip, r1, r2
 8008928:	e7f0      	b.n	800890c <_svfiprintf_r+0x194>
 800892a:	ab03      	add	r3, sp, #12
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	462a      	mov	r2, r5
 8008930:	4638      	mov	r0, r7
 8008932:	4b10      	ldr	r3, [pc, #64]	; (8008974 <_svfiprintf_r+0x1fc>)
 8008934:	a904      	add	r1, sp, #16
 8008936:	f7fd ffcb 	bl	80068d0 <_printf_float>
 800893a:	1c42      	adds	r2, r0, #1
 800893c:	4606      	mov	r6, r0
 800893e:	d1d6      	bne.n	80088ee <_svfiprintf_r+0x176>
 8008940:	89ab      	ldrh	r3, [r5, #12]
 8008942:	065b      	lsls	r3, r3, #25
 8008944:	f53f af2c 	bmi.w	80087a0 <_svfiprintf_r+0x28>
 8008948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800894a:	b01d      	add	sp, #116	; 0x74
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	ab03      	add	r3, sp, #12
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	462a      	mov	r2, r5
 8008956:	4638      	mov	r0, r7
 8008958:	4b06      	ldr	r3, [pc, #24]	; (8008974 <_svfiprintf_r+0x1fc>)
 800895a:	a904      	add	r1, sp, #16
 800895c:	f7fe fa54 	bl	8006e08 <_printf_i>
 8008960:	e7eb      	b.n	800893a <_svfiprintf_r+0x1c2>
 8008962:	bf00      	nop
 8008964:	080099f4 	.word	0x080099f4
 8008968:	080099fa 	.word	0x080099fa
 800896c:	080099fe 	.word	0x080099fe
 8008970:	080068d1 	.word	0x080068d1
 8008974:	080086c1 	.word	0x080086c1

08008978 <_sbrk_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	2300      	movs	r3, #0
 800897c:	4d05      	ldr	r5, [pc, #20]	; (8008994 <_sbrk_r+0x1c>)
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7f9 fe72 	bl	800266c <_sbrk>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_sbrk_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_sbrk_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20000338 	.word	0x20000338

08008998 <__assert_func>:
 8008998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800899a:	4614      	mov	r4, r2
 800899c:	461a      	mov	r2, r3
 800899e:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <__assert_func+0x2c>)
 80089a0:	4605      	mov	r5, r0
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68d8      	ldr	r0, [r3, #12]
 80089a6:	b14c      	cbz	r4, 80089bc <__assert_func+0x24>
 80089a8:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <__assert_func+0x30>)
 80089aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089ae:	9100      	str	r1, [sp, #0]
 80089b0:	462b      	mov	r3, r5
 80089b2:	4906      	ldr	r1, [pc, #24]	; (80089cc <__assert_func+0x34>)
 80089b4:	f000 f80e 	bl	80089d4 <fiprintf>
 80089b8:	f000 faaa 	bl	8008f10 <abort>
 80089bc:	4b04      	ldr	r3, [pc, #16]	; (80089d0 <__assert_func+0x38>)
 80089be:	461c      	mov	r4, r3
 80089c0:	e7f3      	b.n	80089aa <__assert_func+0x12>
 80089c2:	bf00      	nop
 80089c4:	20000014 	.word	0x20000014
 80089c8:	08009a05 	.word	0x08009a05
 80089cc:	08009a12 	.word	0x08009a12
 80089d0:	08009a40 	.word	0x08009a40

080089d4 <fiprintf>:
 80089d4:	b40e      	push	{r1, r2, r3}
 80089d6:	b503      	push	{r0, r1, lr}
 80089d8:	4601      	mov	r1, r0
 80089da:	ab03      	add	r3, sp, #12
 80089dc:	4805      	ldr	r0, [pc, #20]	; (80089f4 <fiprintf+0x20>)
 80089de:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e2:	6800      	ldr	r0, [r0, #0]
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	f000 f895 	bl	8008b14 <_vfiprintf_r>
 80089ea:	b002      	add	sp, #8
 80089ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f0:	b003      	add	sp, #12
 80089f2:	4770      	bx	lr
 80089f4:	20000014 	.word	0x20000014

080089f8 <__ascii_mbtowc>:
 80089f8:	b082      	sub	sp, #8
 80089fa:	b901      	cbnz	r1, 80089fe <__ascii_mbtowc+0x6>
 80089fc:	a901      	add	r1, sp, #4
 80089fe:	b142      	cbz	r2, 8008a12 <__ascii_mbtowc+0x1a>
 8008a00:	b14b      	cbz	r3, 8008a16 <__ascii_mbtowc+0x1e>
 8008a02:	7813      	ldrb	r3, [r2, #0]
 8008a04:	600b      	str	r3, [r1, #0]
 8008a06:	7812      	ldrb	r2, [r2, #0]
 8008a08:	1e10      	subs	r0, r2, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	2001      	movne	r0, #1
 8008a0e:	b002      	add	sp, #8
 8008a10:	4770      	bx	lr
 8008a12:	4610      	mov	r0, r2
 8008a14:	e7fb      	b.n	8008a0e <__ascii_mbtowc+0x16>
 8008a16:	f06f 0001 	mvn.w	r0, #1
 8008a1a:	e7f8      	b.n	8008a0e <__ascii_mbtowc+0x16>

08008a1c <memmove>:
 8008a1c:	4288      	cmp	r0, r1
 8008a1e:	b510      	push	{r4, lr}
 8008a20:	eb01 0402 	add.w	r4, r1, r2
 8008a24:	d902      	bls.n	8008a2c <memmove+0x10>
 8008a26:	4284      	cmp	r4, r0
 8008a28:	4623      	mov	r3, r4
 8008a2a:	d807      	bhi.n	8008a3c <memmove+0x20>
 8008a2c:	1e43      	subs	r3, r0, #1
 8008a2e:	42a1      	cmp	r1, r4
 8008a30:	d008      	beq.n	8008a44 <memmove+0x28>
 8008a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a3a:	e7f8      	b.n	8008a2e <memmove+0x12>
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	4402      	add	r2, r0
 8008a40:	428a      	cmp	r2, r1
 8008a42:	d100      	bne.n	8008a46 <memmove+0x2a>
 8008a44:	bd10      	pop	{r4, pc}
 8008a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a4e:	e7f7      	b.n	8008a40 <memmove+0x24>

08008a50 <__malloc_lock>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__malloc_lock+0x8>)
 8008a52:	f000 bc19 	b.w	8009288 <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	2000033c 	.word	0x2000033c

08008a5c <__malloc_unlock>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__malloc_unlock+0x8>)
 8008a5e:	f000 bc14 	b.w	800928a <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	2000033c 	.word	0x2000033c

08008a68 <_realloc_r>:
 8008a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	4614      	mov	r4, r2
 8008a70:	460e      	mov	r6, r1
 8008a72:	b921      	cbnz	r1, 8008a7e <_realloc_r+0x16>
 8008a74:	4611      	mov	r1, r2
 8008a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7a:	f7ff bdad 	b.w	80085d8 <_malloc_r>
 8008a7e:	b92a      	cbnz	r2, 8008a8c <_realloc_r+0x24>
 8008a80:	f7ff fd42 	bl	8008508 <_free_r>
 8008a84:	4625      	mov	r5, r4
 8008a86:	4628      	mov	r0, r5
 8008a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8c:	f000 fc64 	bl	8009358 <_malloc_usable_size_r>
 8008a90:	4284      	cmp	r4, r0
 8008a92:	4607      	mov	r7, r0
 8008a94:	d802      	bhi.n	8008a9c <_realloc_r+0x34>
 8008a96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a9a:	d812      	bhi.n	8008ac2 <_realloc_r+0x5a>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	f7ff fd9a 	bl	80085d8 <_malloc_r>
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d0ed      	beq.n	8008a86 <_realloc_r+0x1e>
 8008aaa:	42bc      	cmp	r4, r7
 8008aac:	4622      	mov	r2, r4
 8008aae:	4631      	mov	r1, r6
 8008ab0:	bf28      	it	cs
 8008ab2:	463a      	movcs	r2, r7
 8008ab4:	f7ff f984 	bl	8007dc0 <memcpy>
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4640      	mov	r0, r8
 8008abc:	f7ff fd24 	bl	8008508 <_free_r>
 8008ac0:	e7e1      	b.n	8008a86 <_realloc_r+0x1e>
 8008ac2:	4635      	mov	r5, r6
 8008ac4:	e7df      	b.n	8008a86 <_realloc_r+0x1e>

08008ac6 <__sfputc_r>:
 8008ac6:	6893      	ldr	r3, [r2, #8]
 8008ac8:	b410      	push	{r4}
 8008aca:	3b01      	subs	r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	6093      	str	r3, [r2, #8]
 8008ad0:	da07      	bge.n	8008ae2 <__sfputc_r+0x1c>
 8008ad2:	6994      	ldr	r4, [r2, #24]
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	db01      	blt.n	8008adc <__sfputc_r+0x16>
 8008ad8:	290a      	cmp	r1, #10
 8008ada:	d102      	bne.n	8008ae2 <__sfputc_r+0x1c>
 8008adc:	bc10      	pop	{r4}
 8008ade:	f000 b949 	b.w	8008d74 <__swbuf_r>
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	1c58      	adds	r0, r3, #1
 8008ae6:	6010      	str	r0, [r2, #0]
 8008ae8:	7019      	strb	r1, [r3, #0]
 8008aea:	4608      	mov	r0, r1
 8008aec:	bc10      	pop	{r4}
 8008aee:	4770      	bx	lr

08008af0 <__sfputs_r>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	4606      	mov	r6, r0
 8008af4:	460f      	mov	r7, r1
 8008af6:	4614      	mov	r4, r2
 8008af8:	18d5      	adds	r5, r2, r3
 8008afa:	42ac      	cmp	r4, r5
 8008afc:	d101      	bne.n	8008b02 <__sfputs_r+0x12>
 8008afe:	2000      	movs	r0, #0
 8008b00:	e007      	b.n	8008b12 <__sfputs_r+0x22>
 8008b02:	463a      	mov	r2, r7
 8008b04:	4630      	mov	r0, r6
 8008b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0a:	f7ff ffdc 	bl	8008ac6 <__sfputc_r>
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	d1f3      	bne.n	8008afa <__sfputs_r+0xa>
 8008b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b14 <_vfiprintf_r>:
 8008b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b18:	460d      	mov	r5, r1
 8008b1a:	4614      	mov	r4, r2
 8008b1c:	4698      	mov	r8, r3
 8008b1e:	4606      	mov	r6, r0
 8008b20:	b09d      	sub	sp, #116	; 0x74
 8008b22:	b118      	cbz	r0, 8008b2c <_vfiprintf_r+0x18>
 8008b24:	6983      	ldr	r3, [r0, #24]
 8008b26:	b90b      	cbnz	r3, 8008b2c <_vfiprintf_r+0x18>
 8008b28:	f000 fb10 	bl	800914c <__sinit>
 8008b2c:	4b89      	ldr	r3, [pc, #548]	; (8008d54 <_vfiprintf_r+0x240>)
 8008b2e:	429d      	cmp	r5, r3
 8008b30:	d11b      	bne.n	8008b6a <_vfiprintf_r+0x56>
 8008b32:	6875      	ldr	r5, [r6, #4]
 8008b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b36:	07d9      	lsls	r1, r3, #31
 8008b38:	d405      	bmi.n	8008b46 <_vfiprintf_r+0x32>
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	059a      	lsls	r2, r3, #22
 8008b3e:	d402      	bmi.n	8008b46 <_vfiprintf_r+0x32>
 8008b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b42:	f000 fba1 	bl	8009288 <__retarget_lock_acquire_recursive>
 8008b46:	89ab      	ldrh	r3, [r5, #12]
 8008b48:	071b      	lsls	r3, r3, #28
 8008b4a:	d501      	bpl.n	8008b50 <_vfiprintf_r+0x3c>
 8008b4c:	692b      	ldr	r3, [r5, #16]
 8008b4e:	b9eb      	cbnz	r3, 8008b8c <_vfiprintf_r+0x78>
 8008b50:	4629      	mov	r1, r5
 8008b52:	4630      	mov	r0, r6
 8008b54:	f000 f96e 	bl	8008e34 <__swsetup_r>
 8008b58:	b1c0      	cbz	r0, 8008b8c <_vfiprintf_r+0x78>
 8008b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b5c:	07dc      	lsls	r4, r3, #31
 8008b5e:	d50e      	bpl.n	8008b7e <_vfiprintf_r+0x6a>
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	b01d      	add	sp, #116	; 0x74
 8008b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6a:	4b7b      	ldr	r3, [pc, #492]	; (8008d58 <_vfiprintf_r+0x244>)
 8008b6c:	429d      	cmp	r5, r3
 8008b6e:	d101      	bne.n	8008b74 <_vfiprintf_r+0x60>
 8008b70:	68b5      	ldr	r5, [r6, #8]
 8008b72:	e7df      	b.n	8008b34 <_vfiprintf_r+0x20>
 8008b74:	4b79      	ldr	r3, [pc, #484]	; (8008d5c <_vfiprintf_r+0x248>)
 8008b76:	429d      	cmp	r5, r3
 8008b78:	bf08      	it	eq
 8008b7a:	68f5      	ldreq	r5, [r6, #12]
 8008b7c:	e7da      	b.n	8008b34 <_vfiprintf_r+0x20>
 8008b7e:	89ab      	ldrh	r3, [r5, #12]
 8008b80:	0598      	lsls	r0, r3, #22
 8008b82:	d4ed      	bmi.n	8008b60 <_vfiprintf_r+0x4c>
 8008b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b86:	f000 fb80 	bl	800928a <__retarget_lock_release_recursive>
 8008b8a:	e7e9      	b.n	8008b60 <_vfiprintf_r+0x4c>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b90:	2320      	movs	r3, #32
 8008b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b96:	2330      	movs	r3, #48	; 0x30
 8008b98:	f04f 0901 	mov.w	r9, #1
 8008b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ba0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008d60 <_vfiprintf_r+0x24c>
 8008ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ba8:	4623      	mov	r3, r4
 8008baa:	469a      	mov	sl, r3
 8008bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bb0:	b10a      	cbz	r2, 8008bb6 <_vfiprintf_r+0xa2>
 8008bb2:	2a25      	cmp	r2, #37	; 0x25
 8008bb4:	d1f9      	bne.n	8008baa <_vfiprintf_r+0x96>
 8008bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bba:	d00b      	beq.n	8008bd4 <_vfiprintf_r+0xc0>
 8008bbc:	465b      	mov	r3, fp
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f7ff ff94 	bl	8008af0 <__sfputs_r>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f000 80aa 	beq.w	8008d22 <_vfiprintf_r+0x20e>
 8008bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd0:	445a      	add	r2, fp
 8008bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 80a2 	beq.w	8008d22 <_vfiprintf_r+0x20e>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f04f 32ff 	mov.w	r2, #4294967295
 8008be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008be8:	f10a 0a01 	add.w	sl, sl, #1
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8008bf6:	4654      	mov	r4, sl
 8008bf8:	2205      	movs	r2, #5
 8008bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfe:	4858      	ldr	r0, [pc, #352]	; (8008d60 <_vfiprintf_r+0x24c>)
 8008c00:	f7ff f8d0 	bl	8007da4 <memchr>
 8008c04:	9a04      	ldr	r2, [sp, #16]
 8008c06:	b9d8      	cbnz	r0, 8008c40 <_vfiprintf_r+0x12c>
 8008c08:	06d1      	lsls	r1, r2, #27
 8008c0a:	bf44      	itt	mi
 8008c0c:	2320      	movmi	r3, #32
 8008c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c12:	0713      	lsls	r3, r2, #28
 8008c14:	bf44      	itt	mi
 8008c16:	232b      	movmi	r3, #43	; 0x2b
 8008c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c20:	2b2a      	cmp	r3, #42	; 0x2a
 8008c22:	d015      	beq.n	8008c50 <_vfiprintf_r+0x13c>
 8008c24:	4654      	mov	r4, sl
 8008c26:	2000      	movs	r0, #0
 8008c28:	f04f 0c0a 	mov.w	ip, #10
 8008c2c:	9a07      	ldr	r2, [sp, #28]
 8008c2e:	4621      	mov	r1, r4
 8008c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c34:	3b30      	subs	r3, #48	; 0x30
 8008c36:	2b09      	cmp	r3, #9
 8008c38:	d94e      	bls.n	8008cd8 <_vfiprintf_r+0x1c4>
 8008c3a:	b1b0      	cbz	r0, 8008c6a <_vfiprintf_r+0x156>
 8008c3c:	9207      	str	r2, [sp, #28]
 8008c3e:	e014      	b.n	8008c6a <_vfiprintf_r+0x156>
 8008c40:	eba0 0308 	sub.w	r3, r0, r8
 8008c44:	fa09 f303 	lsl.w	r3, r9, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	46a2      	mov	sl, r4
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	e7d2      	b.n	8008bf6 <_vfiprintf_r+0xe2>
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	1d19      	adds	r1, r3, #4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	9103      	str	r1, [sp, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfbb      	ittet	lt
 8008c5c:	425b      	neglt	r3, r3
 8008c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c62:	9307      	strge	r3, [sp, #28]
 8008c64:	9307      	strlt	r3, [sp, #28]
 8008c66:	bfb8      	it	lt
 8008c68:	9204      	strlt	r2, [sp, #16]
 8008c6a:	7823      	ldrb	r3, [r4, #0]
 8008c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c6e:	d10c      	bne.n	8008c8a <_vfiprintf_r+0x176>
 8008c70:	7863      	ldrb	r3, [r4, #1]
 8008c72:	2b2a      	cmp	r3, #42	; 0x2a
 8008c74:	d135      	bne.n	8008ce2 <_vfiprintf_r+0x1ce>
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	3402      	adds	r4, #2
 8008c7a:	1d1a      	adds	r2, r3, #4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	9203      	str	r2, [sp, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	bfb8      	it	lt
 8008c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c88:	9305      	str	r3, [sp, #20]
 8008c8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008d64 <_vfiprintf_r+0x250>
 8008c8e:	2203      	movs	r2, #3
 8008c90:	4650      	mov	r0, sl
 8008c92:	7821      	ldrb	r1, [r4, #0]
 8008c94:	f7ff f886 	bl	8007da4 <memchr>
 8008c98:	b140      	cbz	r0, 8008cac <_vfiprintf_r+0x198>
 8008c9a:	2340      	movs	r3, #64	; 0x40
 8008c9c:	eba0 000a 	sub.w	r0, r0, sl
 8008ca0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ca4:	9b04      	ldr	r3, [sp, #16]
 8008ca6:	3401      	adds	r4, #1
 8008ca8:	4303      	orrs	r3, r0
 8008caa:	9304      	str	r3, [sp, #16]
 8008cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb0:	2206      	movs	r2, #6
 8008cb2:	482d      	ldr	r0, [pc, #180]	; (8008d68 <_vfiprintf_r+0x254>)
 8008cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cb8:	f7ff f874 	bl	8007da4 <memchr>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d03f      	beq.n	8008d40 <_vfiprintf_r+0x22c>
 8008cc0:	4b2a      	ldr	r3, [pc, #168]	; (8008d6c <_vfiprintf_r+0x258>)
 8008cc2:	bb1b      	cbnz	r3, 8008d0c <_vfiprintf_r+0x1f8>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	3307      	adds	r3, #7
 8008cc8:	f023 0307 	bic.w	r3, r3, #7
 8008ccc:	3308      	adds	r3, #8
 8008cce:	9303      	str	r3, [sp, #12]
 8008cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd2:	443b      	add	r3, r7
 8008cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd6:	e767      	b.n	8008ba8 <_vfiprintf_r+0x94>
 8008cd8:	460c      	mov	r4, r1
 8008cda:	2001      	movs	r0, #1
 8008cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ce0:	e7a5      	b.n	8008c2e <_vfiprintf_r+0x11a>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f04f 0c0a 	mov.w	ip, #10
 8008ce8:	4619      	mov	r1, r3
 8008cea:	3401      	adds	r4, #1
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cf4:	3a30      	subs	r2, #48	; 0x30
 8008cf6:	2a09      	cmp	r2, #9
 8008cf8:	d903      	bls.n	8008d02 <_vfiprintf_r+0x1ee>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0c5      	beq.n	8008c8a <_vfiprintf_r+0x176>
 8008cfe:	9105      	str	r1, [sp, #20]
 8008d00:	e7c3      	b.n	8008c8a <_vfiprintf_r+0x176>
 8008d02:	4604      	mov	r4, r0
 8008d04:	2301      	movs	r3, #1
 8008d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d0a:	e7f0      	b.n	8008cee <_vfiprintf_r+0x1da>
 8008d0c:	ab03      	add	r3, sp, #12
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	462a      	mov	r2, r5
 8008d12:	4630      	mov	r0, r6
 8008d14:	4b16      	ldr	r3, [pc, #88]	; (8008d70 <_vfiprintf_r+0x25c>)
 8008d16:	a904      	add	r1, sp, #16
 8008d18:	f7fd fdda 	bl	80068d0 <_printf_float>
 8008d1c:	4607      	mov	r7, r0
 8008d1e:	1c78      	adds	r0, r7, #1
 8008d20:	d1d6      	bne.n	8008cd0 <_vfiprintf_r+0x1bc>
 8008d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d24:	07d9      	lsls	r1, r3, #31
 8008d26:	d405      	bmi.n	8008d34 <_vfiprintf_r+0x220>
 8008d28:	89ab      	ldrh	r3, [r5, #12]
 8008d2a:	059a      	lsls	r2, r3, #22
 8008d2c:	d402      	bmi.n	8008d34 <_vfiprintf_r+0x220>
 8008d2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d30:	f000 faab 	bl	800928a <__retarget_lock_release_recursive>
 8008d34:	89ab      	ldrh	r3, [r5, #12]
 8008d36:	065b      	lsls	r3, r3, #25
 8008d38:	f53f af12 	bmi.w	8008b60 <_vfiprintf_r+0x4c>
 8008d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d3e:	e711      	b.n	8008b64 <_vfiprintf_r+0x50>
 8008d40:	ab03      	add	r3, sp, #12
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	462a      	mov	r2, r5
 8008d46:	4630      	mov	r0, r6
 8008d48:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <_vfiprintf_r+0x25c>)
 8008d4a:	a904      	add	r1, sp, #16
 8008d4c:	f7fe f85c 	bl	8006e08 <_printf_i>
 8008d50:	e7e4      	b.n	8008d1c <_vfiprintf_r+0x208>
 8008d52:	bf00      	nop
 8008d54:	08009b6c 	.word	0x08009b6c
 8008d58:	08009b8c 	.word	0x08009b8c
 8008d5c:	08009b4c 	.word	0x08009b4c
 8008d60:	080099f4 	.word	0x080099f4
 8008d64:	080099fa 	.word	0x080099fa
 8008d68:	080099fe 	.word	0x080099fe
 8008d6c:	080068d1 	.word	0x080068d1
 8008d70:	08008af1 	.word	0x08008af1

08008d74 <__swbuf_r>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	460e      	mov	r6, r1
 8008d78:	4614      	mov	r4, r2
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	b118      	cbz	r0, 8008d86 <__swbuf_r+0x12>
 8008d7e:	6983      	ldr	r3, [r0, #24]
 8008d80:	b90b      	cbnz	r3, 8008d86 <__swbuf_r+0x12>
 8008d82:	f000 f9e3 	bl	800914c <__sinit>
 8008d86:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <__swbuf_r+0x98>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	d12b      	bne.n	8008de4 <__swbuf_r+0x70>
 8008d8c:	686c      	ldr	r4, [r5, #4]
 8008d8e:	69a3      	ldr	r3, [r4, #24]
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	071a      	lsls	r2, r3, #28
 8008d96:	d52f      	bpl.n	8008df8 <__swbuf_r+0x84>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	b36b      	cbz	r3, 8008df8 <__swbuf_r+0x84>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	b2f6      	uxtb	r6, r6
 8008da2:	1ac0      	subs	r0, r0, r3
 8008da4:	6963      	ldr	r3, [r4, #20]
 8008da6:	4637      	mov	r7, r6
 8008da8:	4283      	cmp	r3, r0
 8008daa:	dc04      	bgt.n	8008db6 <__swbuf_r+0x42>
 8008dac:	4621      	mov	r1, r4
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f938 	bl	8009024 <_fflush_r>
 8008db4:	bb30      	cbnz	r0, 8008e04 <__swbuf_r+0x90>
 8008db6:	68a3      	ldr	r3, [r4, #8]
 8008db8:	3001      	adds	r0, #1
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	60a3      	str	r3, [r4, #8]
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	6022      	str	r2, [r4, #0]
 8008dc4:	701e      	strb	r6, [r3, #0]
 8008dc6:	6963      	ldr	r3, [r4, #20]
 8008dc8:	4283      	cmp	r3, r0
 8008dca:	d004      	beq.n	8008dd6 <__swbuf_r+0x62>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	07db      	lsls	r3, r3, #31
 8008dd0:	d506      	bpl.n	8008de0 <__swbuf_r+0x6c>
 8008dd2:	2e0a      	cmp	r6, #10
 8008dd4:	d104      	bne.n	8008de0 <__swbuf_r+0x6c>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f923 	bl	8009024 <_fflush_r>
 8008dde:	b988      	cbnz	r0, 8008e04 <__swbuf_r+0x90>
 8008de0:	4638      	mov	r0, r7
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <__swbuf_r+0x9c>)
 8008de6:	429c      	cmp	r4, r3
 8008de8:	d101      	bne.n	8008dee <__swbuf_r+0x7a>
 8008dea:	68ac      	ldr	r4, [r5, #8]
 8008dec:	e7cf      	b.n	8008d8e <__swbuf_r+0x1a>
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <__swbuf_r+0xa0>)
 8008df0:	429c      	cmp	r4, r3
 8008df2:	bf08      	it	eq
 8008df4:	68ec      	ldreq	r4, [r5, #12]
 8008df6:	e7ca      	b.n	8008d8e <__swbuf_r+0x1a>
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 f81a 	bl	8008e34 <__swsetup_r>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d0cb      	beq.n	8008d9c <__swbuf_r+0x28>
 8008e04:	f04f 37ff 	mov.w	r7, #4294967295
 8008e08:	e7ea      	b.n	8008de0 <__swbuf_r+0x6c>
 8008e0a:	bf00      	nop
 8008e0c:	08009b6c 	.word	0x08009b6c
 8008e10:	08009b8c 	.word	0x08009b8c
 8008e14:	08009b4c 	.word	0x08009b4c

08008e18 <__ascii_wctomb>:
 8008e18:	4603      	mov	r3, r0
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	b141      	cbz	r1, 8008e30 <__ascii_wctomb+0x18>
 8008e1e:	2aff      	cmp	r2, #255	; 0xff
 8008e20:	d904      	bls.n	8008e2c <__ascii_wctomb+0x14>
 8008e22:	228a      	movs	r2, #138	; 0x8a
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	601a      	str	r2, [r3, #0]
 8008e2a:	4770      	bx	lr
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	700a      	strb	r2, [r1, #0]
 8008e30:	4770      	bx	lr
	...

08008e34 <__swsetup_r>:
 8008e34:	4b32      	ldr	r3, [pc, #200]	; (8008f00 <__swsetup_r+0xcc>)
 8008e36:	b570      	push	{r4, r5, r6, lr}
 8008e38:	681d      	ldr	r5, [r3, #0]
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	b125      	cbz	r5, 8008e4a <__swsetup_r+0x16>
 8008e40:	69ab      	ldr	r3, [r5, #24]
 8008e42:	b913      	cbnz	r3, 8008e4a <__swsetup_r+0x16>
 8008e44:	4628      	mov	r0, r5
 8008e46:	f000 f981 	bl	800914c <__sinit>
 8008e4a:	4b2e      	ldr	r3, [pc, #184]	; (8008f04 <__swsetup_r+0xd0>)
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	d10f      	bne.n	8008e70 <__swsetup_r+0x3c>
 8008e50:	686c      	ldr	r4, [r5, #4]
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e58:	0719      	lsls	r1, r3, #28
 8008e5a:	d42c      	bmi.n	8008eb6 <__swsetup_r+0x82>
 8008e5c:	06dd      	lsls	r5, r3, #27
 8008e5e:	d411      	bmi.n	8008e84 <__swsetup_r+0x50>
 8008e60:	2309      	movs	r3, #9
 8008e62:	6033      	str	r3, [r6, #0]
 8008e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	e03e      	b.n	8008eee <__swsetup_r+0xba>
 8008e70:	4b25      	ldr	r3, [pc, #148]	; (8008f08 <__swsetup_r+0xd4>)
 8008e72:	429c      	cmp	r4, r3
 8008e74:	d101      	bne.n	8008e7a <__swsetup_r+0x46>
 8008e76:	68ac      	ldr	r4, [r5, #8]
 8008e78:	e7eb      	b.n	8008e52 <__swsetup_r+0x1e>
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <__swsetup_r+0xd8>)
 8008e7c:	429c      	cmp	r4, r3
 8008e7e:	bf08      	it	eq
 8008e80:	68ec      	ldreq	r4, [r5, #12]
 8008e82:	e7e6      	b.n	8008e52 <__swsetup_r+0x1e>
 8008e84:	0758      	lsls	r0, r3, #29
 8008e86:	d512      	bpl.n	8008eae <__swsetup_r+0x7a>
 8008e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8a:	b141      	cbz	r1, 8008e9e <__swsetup_r+0x6a>
 8008e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e90:	4299      	cmp	r1, r3
 8008e92:	d002      	beq.n	8008e9a <__swsetup_r+0x66>
 8008e94:	4630      	mov	r0, r6
 8008e96:	f7ff fb37 	bl	8008508 <_free_r>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	6063      	str	r3, [r4, #4]
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	f043 0308 	orr.w	r3, r3, #8
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	b94b      	cbnz	r3, 8008ece <__swsetup_r+0x9a>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec4:	d003      	beq.n	8008ece <__swsetup_r+0x9a>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 fa05 	bl	80092d8 <__smakebuf_r>
 8008ece:	89a0      	ldrh	r0, [r4, #12]
 8008ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ed4:	f010 0301 	ands.w	r3, r0, #1
 8008ed8:	d00a      	beq.n	8008ef0 <__swsetup_r+0xbc>
 8008eda:	2300      	movs	r3, #0
 8008edc:	60a3      	str	r3, [r4, #8]
 8008ede:	6963      	ldr	r3, [r4, #20]
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	61a3      	str	r3, [r4, #24]
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	b943      	cbnz	r3, 8008efa <__swsetup_r+0xc6>
 8008ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008eec:	d1ba      	bne.n	8008e64 <__swsetup_r+0x30>
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	0781      	lsls	r1, r0, #30
 8008ef2:	bf58      	it	pl
 8008ef4:	6963      	ldrpl	r3, [r4, #20]
 8008ef6:	60a3      	str	r3, [r4, #8]
 8008ef8:	e7f4      	b.n	8008ee4 <__swsetup_r+0xb0>
 8008efa:	2000      	movs	r0, #0
 8008efc:	e7f7      	b.n	8008eee <__swsetup_r+0xba>
 8008efe:	bf00      	nop
 8008f00:	20000014 	.word	0x20000014
 8008f04:	08009b6c 	.word	0x08009b6c
 8008f08:	08009b8c 	.word	0x08009b8c
 8008f0c:	08009b4c 	.word	0x08009b4c

08008f10 <abort>:
 8008f10:	2006      	movs	r0, #6
 8008f12:	b508      	push	{r3, lr}
 8008f14:	f000 fa50 	bl	80093b8 <raise>
 8008f18:	2001      	movs	r0, #1
 8008f1a:	f7f9 fb34 	bl	8002586 <_exit>
	...

08008f20 <__sflush_r>:
 8008f20:	898a      	ldrh	r2, [r1, #12]
 8008f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f24:	4605      	mov	r5, r0
 8008f26:	0710      	lsls	r0, r2, #28
 8008f28:	460c      	mov	r4, r1
 8008f2a:	d457      	bmi.n	8008fdc <__sflush_r+0xbc>
 8008f2c:	684b      	ldr	r3, [r1, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	dc04      	bgt.n	8008f3c <__sflush_r+0x1c>
 8008f32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dc01      	bgt.n	8008f3c <__sflush_r+0x1c>
 8008f38:	2000      	movs	r0, #0
 8008f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	d0fa      	beq.n	8008f38 <__sflush_r+0x18>
 8008f42:	2300      	movs	r3, #0
 8008f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f48:	682f      	ldr	r7, [r5, #0]
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	d032      	beq.n	8008fb4 <__sflush_r+0x94>
 8008f4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	075a      	lsls	r2, r3, #29
 8008f54:	d505      	bpl.n	8008f62 <__sflush_r+0x42>
 8008f56:	6863      	ldr	r3, [r4, #4]
 8008f58:	1ac0      	subs	r0, r0, r3
 8008f5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f5c:	b10b      	cbz	r3, 8008f62 <__sflush_r+0x42>
 8008f5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f60:	1ac0      	subs	r0, r0, r3
 8008f62:	2300      	movs	r3, #0
 8008f64:	4602      	mov	r2, r0
 8008f66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f68:	4628      	mov	r0, r5
 8008f6a:	6a21      	ldr	r1, [r4, #32]
 8008f6c:	47b0      	blx	r6
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	d106      	bne.n	8008f82 <__sflush_r+0x62>
 8008f74:	6829      	ldr	r1, [r5, #0]
 8008f76:	291d      	cmp	r1, #29
 8008f78:	d82c      	bhi.n	8008fd4 <__sflush_r+0xb4>
 8008f7a:	4a29      	ldr	r2, [pc, #164]	; (8009020 <__sflush_r+0x100>)
 8008f7c:	40ca      	lsrs	r2, r1
 8008f7e:	07d6      	lsls	r6, r2, #31
 8008f80:	d528      	bpl.n	8008fd4 <__sflush_r+0xb4>
 8008f82:	2200      	movs	r2, #0
 8008f84:	6062      	str	r2, [r4, #4]
 8008f86:	6922      	ldr	r2, [r4, #16]
 8008f88:	04d9      	lsls	r1, r3, #19
 8008f8a:	6022      	str	r2, [r4, #0]
 8008f8c:	d504      	bpl.n	8008f98 <__sflush_r+0x78>
 8008f8e:	1c42      	adds	r2, r0, #1
 8008f90:	d101      	bne.n	8008f96 <__sflush_r+0x76>
 8008f92:	682b      	ldr	r3, [r5, #0]
 8008f94:	b903      	cbnz	r3, 8008f98 <__sflush_r+0x78>
 8008f96:	6560      	str	r0, [r4, #84]	; 0x54
 8008f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f9a:	602f      	str	r7, [r5, #0]
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	d0cb      	beq.n	8008f38 <__sflush_r+0x18>
 8008fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fa4:	4299      	cmp	r1, r3
 8008fa6:	d002      	beq.n	8008fae <__sflush_r+0x8e>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f7ff faad 	bl	8008508 <_free_r>
 8008fae:	2000      	movs	r0, #0
 8008fb0:	6360      	str	r0, [r4, #52]	; 0x34
 8008fb2:	e7c2      	b.n	8008f3a <__sflush_r+0x1a>
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4628      	mov	r0, r5
 8008fba:	47b0      	blx	r6
 8008fbc:	1c41      	adds	r1, r0, #1
 8008fbe:	d1c7      	bne.n	8008f50 <__sflush_r+0x30>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0c4      	beq.n	8008f50 <__sflush_r+0x30>
 8008fc6:	2b1d      	cmp	r3, #29
 8008fc8:	d001      	beq.n	8008fce <__sflush_r+0xae>
 8008fca:	2b16      	cmp	r3, #22
 8008fcc:	d101      	bne.n	8008fd2 <__sflush_r+0xb2>
 8008fce:	602f      	str	r7, [r5, #0]
 8008fd0:	e7b2      	b.n	8008f38 <__sflush_r+0x18>
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd8:	81a3      	strh	r3, [r4, #12]
 8008fda:	e7ae      	b.n	8008f3a <__sflush_r+0x1a>
 8008fdc:	690f      	ldr	r7, [r1, #16]
 8008fde:	2f00      	cmp	r7, #0
 8008fe0:	d0aa      	beq.n	8008f38 <__sflush_r+0x18>
 8008fe2:	0793      	lsls	r3, r2, #30
 8008fe4:	bf18      	it	ne
 8008fe6:	2300      	movne	r3, #0
 8008fe8:	680e      	ldr	r6, [r1, #0]
 8008fea:	bf08      	it	eq
 8008fec:	694b      	ldreq	r3, [r1, #20]
 8008fee:	1bf6      	subs	r6, r6, r7
 8008ff0:	600f      	str	r7, [r1, #0]
 8008ff2:	608b      	str	r3, [r1, #8]
 8008ff4:	2e00      	cmp	r6, #0
 8008ff6:	dd9f      	ble.n	8008f38 <__sflush_r+0x18>
 8008ff8:	4633      	mov	r3, r6
 8008ffa:	463a      	mov	r2, r7
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	6a21      	ldr	r1, [r4, #32]
 8009000:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009004:	47e0      	blx	ip
 8009006:	2800      	cmp	r0, #0
 8009008:	dc06      	bgt.n	8009018 <__sflush_r+0xf8>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009014:	81a3      	strh	r3, [r4, #12]
 8009016:	e790      	b.n	8008f3a <__sflush_r+0x1a>
 8009018:	4407      	add	r7, r0
 800901a:	1a36      	subs	r6, r6, r0
 800901c:	e7ea      	b.n	8008ff4 <__sflush_r+0xd4>
 800901e:	bf00      	nop
 8009020:	20400001 	.word	0x20400001

08009024 <_fflush_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	690b      	ldr	r3, [r1, #16]
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	b913      	cbnz	r3, 8009034 <_fflush_r+0x10>
 800902e:	2500      	movs	r5, #0
 8009030:	4628      	mov	r0, r5
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	b118      	cbz	r0, 800903e <_fflush_r+0x1a>
 8009036:	6983      	ldr	r3, [r0, #24]
 8009038:	b90b      	cbnz	r3, 800903e <_fflush_r+0x1a>
 800903a:	f000 f887 	bl	800914c <__sinit>
 800903e:	4b14      	ldr	r3, [pc, #80]	; (8009090 <_fflush_r+0x6c>)
 8009040:	429c      	cmp	r4, r3
 8009042:	d11b      	bne.n	800907c <_fflush_r+0x58>
 8009044:	686c      	ldr	r4, [r5, #4]
 8009046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0ef      	beq.n	800902e <_fflush_r+0xa>
 800904e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009050:	07d0      	lsls	r0, r2, #31
 8009052:	d404      	bmi.n	800905e <_fflush_r+0x3a>
 8009054:	0599      	lsls	r1, r3, #22
 8009056:	d402      	bmi.n	800905e <_fflush_r+0x3a>
 8009058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905a:	f000 f915 	bl	8009288 <__retarget_lock_acquire_recursive>
 800905e:	4628      	mov	r0, r5
 8009060:	4621      	mov	r1, r4
 8009062:	f7ff ff5d 	bl	8008f20 <__sflush_r>
 8009066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009068:	4605      	mov	r5, r0
 800906a:	07da      	lsls	r2, r3, #31
 800906c:	d4e0      	bmi.n	8009030 <_fflush_r+0xc>
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	059b      	lsls	r3, r3, #22
 8009072:	d4dd      	bmi.n	8009030 <_fflush_r+0xc>
 8009074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009076:	f000 f908 	bl	800928a <__retarget_lock_release_recursive>
 800907a:	e7d9      	b.n	8009030 <_fflush_r+0xc>
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <_fflush_r+0x70>)
 800907e:	429c      	cmp	r4, r3
 8009080:	d101      	bne.n	8009086 <_fflush_r+0x62>
 8009082:	68ac      	ldr	r4, [r5, #8]
 8009084:	e7df      	b.n	8009046 <_fflush_r+0x22>
 8009086:	4b04      	ldr	r3, [pc, #16]	; (8009098 <_fflush_r+0x74>)
 8009088:	429c      	cmp	r4, r3
 800908a:	bf08      	it	eq
 800908c:	68ec      	ldreq	r4, [r5, #12]
 800908e:	e7da      	b.n	8009046 <_fflush_r+0x22>
 8009090:	08009b6c 	.word	0x08009b6c
 8009094:	08009b8c 	.word	0x08009b8c
 8009098:	08009b4c 	.word	0x08009b4c

0800909c <std>:
 800909c:	2300      	movs	r3, #0
 800909e:	b510      	push	{r4, lr}
 80090a0:	4604      	mov	r4, r0
 80090a2:	e9c0 3300 	strd	r3, r3, [r0]
 80090a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090aa:	6083      	str	r3, [r0, #8]
 80090ac:	8181      	strh	r1, [r0, #12]
 80090ae:	6643      	str	r3, [r0, #100]	; 0x64
 80090b0:	81c2      	strh	r2, [r0, #14]
 80090b2:	6183      	str	r3, [r0, #24]
 80090b4:	4619      	mov	r1, r3
 80090b6:	2208      	movs	r2, #8
 80090b8:	305c      	adds	r0, #92	; 0x5c
 80090ba:	f7fd fb63 	bl	8006784 <memset>
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <std+0x38>)
 80090c0:	6224      	str	r4, [r4, #32]
 80090c2:	6263      	str	r3, [r4, #36]	; 0x24
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <std+0x3c>)
 80090c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80090c8:	4b04      	ldr	r3, [pc, #16]	; (80090dc <std+0x40>)
 80090ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090cc:	4b04      	ldr	r3, [pc, #16]	; (80090e0 <std+0x44>)
 80090ce:	6323      	str	r3, [r4, #48]	; 0x30
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	bf00      	nop
 80090d4:	080093f1 	.word	0x080093f1
 80090d8:	08009413 	.word	0x08009413
 80090dc:	0800944b 	.word	0x0800944b
 80090e0:	0800946f 	.word	0x0800946f

080090e4 <_cleanup_r>:
 80090e4:	4901      	ldr	r1, [pc, #4]	; (80090ec <_cleanup_r+0x8>)
 80090e6:	f000 b8af 	b.w	8009248 <_fwalk_reent>
 80090ea:	bf00      	nop
 80090ec:	08009025 	.word	0x08009025

080090f0 <__sfmoreglue>:
 80090f0:	2268      	movs	r2, #104	; 0x68
 80090f2:	b570      	push	{r4, r5, r6, lr}
 80090f4:	1e4d      	subs	r5, r1, #1
 80090f6:	4355      	muls	r5, r2
 80090f8:	460e      	mov	r6, r1
 80090fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090fe:	f7ff fa6b 	bl	80085d8 <_malloc_r>
 8009102:	4604      	mov	r4, r0
 8009104:	b140      	cbz	r0, 8009118 <__sfmoreglue+0x28>
 8009106:	2100      	movs	r1, #0
 8009108:	e9c0 1600 	strd	r1, r6, [r0]
 800910c:	300c      	adds	r0, #12
 800910e:	60a0      	str	r0, [r4, #8]
 8009110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009114:	f7fd fb36 	bl	8006784 <memset>
 8009118:	4620      	mov	r0, r4
 800911a:	bd70      	pop	{r4, r5, r6, pc}

0800911c <__sfp_lock_acquire>:
 800911c:	4801      	ldr	r0, [pc, #4]	; (8009124 <__sfp_lock_acquire+0x8>)
 800911e:	f000 b8b3 	b.w	8009288 <__retarget_lock_acquire_recursive>
 8009122:	bf00      	nop
 8009124:	2000033d 	.word	0x2000033d

08009128 <__sfp_lock_release>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__sfp_lock_release+0x8>)
 800912a:	f000 b8ae 	b.w	800928a <__retarget_lock_release_recursive>
 800912e:	bf00      	nop
 8009130:	2000033d 	.word	0x2000033d

08009134 <__sinit_lock_acquire>:
 8009134:	4801      	ldr	r0, [pc, #4]	; (800913c <__sinit_lock_acquire+0x8>)
 8009136:	f000 b8a7 	b.w	8009288 <__retarget_lock_acquire_recursive>
 800913a:	bf00      	nop
 800913c:	2000033e 	.word	0x2000033e

08009140 <__sinit_lock_release>:
 8009140:	4801      	ldr	r0, [pc, #4]	; (8009148 <__sinit_lock_release+0x8>)
 8009142:	f000 b8a2 	b.w	800928a <__retarget_lock_release_recursive>
 8009146:	bf00      	nop
 8009148:	2000033e 	.word	0x2000033e

0800914c <__sinit>:
 800914c:	b510      	push	{r4, lr}
 800914e:	4604      	mov	r4, r0
 8009150:	f7ff fff0 	bl	8009134 <__sinit_lock_acquire>
 8009154:	69a3      	ldr	r3, [r4, #24]
 8009156:	b11b      	cbz	r3, 8009160 <__sinit+0x14>
 8009158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800915c:	f7ff bff0 	b.w	8009140 <__sinit_lock_release>
 8009160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009164:	6523      	str	r3, [r4, #80]	; 0x50
 8009166:	4b13      	ldr	r3, [pc, #76]	; (80091b4 <__sinit+0x68>)
 8009168:	4a13      	ldr	r2, [pc, #76]	; (80091b8 <__sinit+0x6c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	62a2      	str	r2, [r4, #40]	; 0x28
 800916e:	42a3      	cmp	r3, r4
 8009170:	bf08      	it	eq
 8009172:	2301      	moveq	r3, #1
 8009174:	4620      	mov	r0, r4
 8009176:	bf08      	it	eq
 8009178:	61a3      	streq	r3, [r4, #24]
 800917a:	f000 f81f 	bl	80091bc <__sfp>
 800917e:	6060      	str	r0, [r4, #4]
 8009180:	4620      	mov	r0, r4
 8009182:	f000 f81b 	bl	80091bc <__sfp>
 8009186:	60a0      	str	r0, [r4, #8]
 8009188:	4620      	mov	r0, r4
 800918a:	f000 f817 	bl	80091bc <__sfp>
 800918e:	2200      	movs	r2, #0
 8009190:	2104      	movs	r1, #4
 8009192:	60e0      	str	r0, [r4, #12]
 8009194:	6860      	ldr	r0, [r4, #4]
 8009196:	f7ff ff81 	bl	800909c <std>
 800919a:	2201      	movs	r2, #1
 800919c:	2109      	movs	r1, #9
 800919e:	68a0      	ldr	r0, [r4, #8]
 80091a0:	f7ff ff7c 	bl	800909c <std>
 80091a4:	2202      	movs	r2, #2
 80091a6:	2112      	movs	r1, #18
 80091a8:	68e0      	ldr	r0, [r4, #12]
 80091aa:	f7ff ff77 	bl	800909c <std>
 80091ae:	2301      	movs	r3, #1
 80091b0:	61a3      	str	r3, [r4, #24]
 80091b2:	e7d1      	b.n	8009158 <__sinit+0xc>
 80091b4:	080097d4 	.word	0x080097d4
 80091b8:	080090e5 	.word	0x080090e5

080091bc <__sfp>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	4607      	mov	r7, r0
 80091c0:	f7ff ffac 	bl	800911c <__sfp_lock_acquire>
 80091c4:	4b1e      	ldr	r3, [pc, #120]	; (8009240 <__sfp+0x84>)
 80091c6:	681e      	ldr	r6, [r3, #0]
 80091c8:	69b3      	ldr	r3, [r6, #24]
 80091ca:	b913      	cbnz	r3, 80091d2 <__sfp+0x16>
 80091cc:	4630      	mov	r0, r6
 80091ce:	f7ff ffbd 	bl	800914c <__sinit>
 80091d2:	3648      	adds	r6, #72	; 0x48
 80091d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091d8:	3b01      	subs	r3, #1
 80091da:	d503      	bpl.n	80091e4 <__sfp+0x28>
 80091dc:	6833      	ldr	r3, [r6, #0]
 80091de:	b30b      	cbz	r3, 8009224 <__sfp+0x68>
 80091e0:	6836      	ldr	r6, [r6, #0]
 80091e2:	e7f7      	b.n	80091d4 <__sfp+0x18>
 80091e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091e8:	b9d5      	cbnz	r5, 8009220 <__sfp+0x64>
 80091ea:	4b16      	ldr	r3, [pc, #88]	; (8009244 <__sfp+0x88>)
 80091ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091f0:	60e3      	str	r3, [r4, #12]
 80091f2:	6665      	str	r5, [r4, #100]	; 0x64
 80091f4:	f000 f847 	bl	8009286 <__retarget_lock_init_recursive>
 80091f8:	f7ff ff96 	bl	8009128 <__sfp_lock_release>
 80091fc:	2208      	movs	r2, #8
 80091fe:	4629      	mov	r1, r5
 8009200:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009204:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009208:	6025      	str	r5, [r4, #0]
 800920a:	61a5      	str	r5, [r4, #24]
 800920c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009210:	f7fd fab8 	bl	8006784 <memset>
 8009214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800921c:	4620      	mov	r0, r4
 800921e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009220:	3468      	adds	r4, #104	; 0x68
 8009222:	e7d9      	b.n	80091d8 <__sfp+0x1c>
 8009224:	2104      	movs	r1, #4
 8009226:	4638      	mov	r0, r7
 8009228:	f7ff ff62 	bl	80090f0 <__sfmoreglue>
 800922c:	4604      	mov	r4, r0
 800922e:	6030      	str	r0, [r6, #0]
 8009230:	2800      	cmp	r0, #0
 8009232:	d1d5      	bne.n	80091e0 <__sfp+0x24>
 8009234:	f7ff ff78 	bl	8009128 <__sfp_lock_release>
 8009238:	230c      	movs	r3, #12
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	e7ee      	b.n	800921c <__sfp+0x60>
 800923e:	bf00      	nop
 8009240:	080097d4 	.word	0x080097d4
 8009244:	ffff0001 	.word	0xffff0001

08009248 <_fwalk_reent>:
 8009248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800924c:	4606      	mov	r6, r0
 800924e:	4688      	mov	r8, r1
 8009250:	2700      	movs	r7, #0
 8009252:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800925a:	f1b9 0901 	subs.w	r9, r9, #1
 800925e:	d505      	bpl.n	800926c <_fwalk_reent+0x24>
 8009260:	6824      	ldr	r4, [r4, #0]
 8009262:	2c00      	cmp	r4, #0
 8009264:	d1f7      	bne.n	8009256 <_fwalk_reent+0xe>
 8009266:	4638      	mov	r0, r7
 8009268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926c:	89ab      	ldrh	r3, [r5, #12]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d907      	bls.n	8009282 <_fwalk_reent+0x3a>
 8009272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009276:	3301      	adds	r3, #1
 8009278:	d003      	beq.n	8009282 <_fwalk_reent+0x3a>
 800927a:	4629      	mov	r1, r5
 800927c:	4630      	mov	r0, r6
 800927e:	47c0      	blx	r8
 8009280:	4307      	orrs	r7, r0
 8009282:	3568      	adds	r5, #104	; 0x68
 8009284:	e7e9      	b.n	800925a <_fwalk_reent+0x12>

08009286 <__retarget_lock_init_recursive>:
 8009286:	4770      	bx	lr

08009288 <__retarget_lock_acquire_recursive>:
 8009288:	4770      	bx	lr

0800928a <__retarget_lock_release_recursive>:
 800928a:	4770      	bx	lr

0800928c <__swhatbuf_r>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	460e      	mov	r6, r1
 8009290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009294:	4614      	mov	r4, r2
 8009296:	2900      	cmp	r1, #0
 8009298:	461d      	mov	r5, r3
 800929a:	b096      	sub	sp, #88	; 0x58
 800929c:	da08      	bge.n	80092b0 <__swhatbuf_r+0x24>
 800929e:	2200      	movs	r2, #0
 80092a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092a4:	602a      	str	r2, [r5, #0]
 80092a6:	061a      	lsls	r2, r3, #24
 80092a8:	d410      	bmi.n	80092cc <__swhatbuf_r+0x40>
 80092aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ae:	e00e      	b.n	80092ce <__swhatbuf_r+0x42>
 80092b0:	466a      	mov	r2, sp
 80092b2:	f000 f903 	bl	80094bc <_fstat_r>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	dbf1      	blt.n	800929e <__swhatbuf_r+0x12>
 80092ba:	9a01      	ldr	r2, [sp, #4]
 80092bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092c4:	425a      	negs	r2, r3
 80092c6:	415a      	adcs	r2, r3
 80092c8:	602a      	str	r2, [r5, #0]
 80092ca:	e7ee      	b.n	80092aa <__swhatbuf_r+0x1e>
 80092cc:	2340      	movs	r3, #64	; 0x40
 80092ce:	2000      	movs	r0, #0
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	b016      	add	sp, #88	; 0x58
 80092d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080092d8 <__smakebuf_r>:
 80092d8:	898b      	ldrh	r3, [r1, #12]
 80092da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092dc:	079d      	lsls	r5, r3, #30
 80092de:	4606      	mov	r6, r0
 80092e0:	460c      	mov	r4, r1
 80092e2:	d507      	bpl.n	80092f4 <__smakebuf_r+0x1c>
 80092e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	6123      	str	r3, [r4, #16]
 80092ec:	2301      	movs	r3, #1
 80092ee:	6163      	str	r3, [r4, #20]
 80092f0:	b002      	add	sp, #8
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	466a      	mov	r2, sp
 80092f6:	ab01      	add	r3, sp, #4
 80092f8:	f7ff ffc8 	bl	800928c <__swhatbuf_r>
 80092fc:	9900      	ldr	r1, [sp, #0]
 80092fe:	4605      	mov	r5, r0
 8009300:	4630      	mov	r0, r6
 8009302:	f7ff f969 	bl	80085d8 <_malloc_r>
 8009306:	b948      	cbnz	r0, 800931c <__smakebuf_r+0x44>
 8009308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930c:	059a      	lsls	r2, r3, #22
 800930e:	d4ef      	bmi.n	80092f0 <__smakebuf_r+0x18>
 8009310:	f023 0303 	bic.w	r3, r3, #3
 8009314:	f043 0302 	orr.w	r3, r3, #2
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	e7e3      	b.n	80092e4 <__smakebuf_r+0xc>
 800931c:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <__smakebuf_r+0x7c>)
 800931e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	6020      	str	r0, [r4, #0]
 8009324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009328:	81a3      	strh	r3, [r4, #12]
 800932a:	9b00      	ldr	r3, [sp, #0]
 800932c:	6120      	str	r0, [r4, #16]
 800932e:	6163      	str	r3, [r4, #20]
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	b15b      	cbz	r3, 800934c <__smakebuf_r+0x74>
 8009334:	4630      	mov	r0, r6
 8009336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800933a:	f000 f8d1 	bl	80094e0 <_isatty_r>
 800933e:	b128      	cbz	r0, 800934c <__smakebuf_r+0x74>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f023 0303 	bic.w	r3, r3, #3
 8009346:	f043 0301 	orr.w	r3, r3, #1
 800934a:	81a3      	strh	r3, [r4, #12]
 800934c:	89a0      	ldrh	r0, [r4, #12]
 800934e:	4305      	orrs	r5, r0
 8009350:	81a5      	strh	r5, [r4, #12]
 8009352:	e7cd      	b.n	80092f0 <__smakebuf_r+0x18>
 8009354:	080090e5 	.word	0x080090e5

08009358 <_malloc_usable_size_r>:
 8009358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935c:	1f18      	subs	r0, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	bfbc      	itt	lt
 8009362:	580b      	ldrlt	r3, [r1, r0]
 8009364:	18c0      	addlt	r0, r0, r3
 8009366:	4770      	bx	lr

08009368 <_raise_r>:
 8009368:	291f      	cmp	r1, #31
 800936a:	b538      	push	{r3, r4, r5, lr}
 800936c:	4604      	mov	r4, r0
 800936e:	460d      	mov	r5, r1
 8009370:	d904      	bls.n	800937c <_raise_r+0x14>
 8009372:	2316      	movs	r3, #22
 8009374:	6003      	str	r3, [r0, #0]
 8009376:	f04f 30ff 	mov.w	r0, #4294967295
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800937e:	b112      	cbz	r2, 8009386 <_raise_r+0x1e>
 8009380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009384:	b94b      	cbnz	r3, 800939a <_raise_r+0x32>
 8009386:	4620      	mov	r0, r4
 8009388:	f000 f830 	bl	80093ec <_getpid_r>
 800938c:	462a      	mov	r2, r5
 800938e:	4601      	mov	r1, r0
 8009390:	4620      	mov	r0, r4
 8009392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009396:	f000 b817 	b.w	80093c8 <_kill_r>
 800939a:	2b01      	cmp	r3, #1
 800939c:	d00a      	beq.n	80093b4 <_raise_r+0x4c>
 800939e:	1c59      	adds	r1, r3, #1
 80093a0:	d103      	bne.n	80093aa <_raise_r+0x42>
 80093a2:	2316      	movs	r3, #22
 80093a4:	6003      	str	r3, [r0, #0]
 80093a6:	2001      	movs	r0, #1
 80093a8:	e7e7      	b.n	800937a <_raise_r+0x12>
 80093aa:	2400      	movs	r4, #0
 80093ac:	4628      	mov	r0, r5
 80093ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093b2:	4798      	blx	r3
 80093b4:	2000      	movs	r0, #0
 80093b6:	e7e0      	b.n	800937a <_raise_r+0x12>

080093b8 <raise>:
 80093b8:	4b02      	ldr	r3, [pc, #8]	; (80093c4 <raise+0xc>)
 80093ba:	4601      	mov	r1, r0
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	f7ff bfd3 	b.w	8009368 <_raise_r>
 80093c2:	bf00      	nop
 80093c4:	20000014 	.word	0x20000014

080093c8 <_kill_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	2300      	movs	r3, #0
 80093cc:	4d06      	ldr	r5, [pc, #24]	; (80093e8 <_kill_r+0x20>)
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	4611      	mov	r1, r2
 80093d4:	602b      	str	r3, [r5, #0]
 80093d6:	f7f9 f8c6 	bl	8002566 <_kill>
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	d102      	bne.n	80093e4 <_kill_r+0x1c>
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	b103      	cbz	r3, 80093e4 <_kill_r+0x1c>
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
 80093e6:	bf00      	nop
 80093e8:	20000338 	.word	0x20000338

080093ec <_getpid_r>:
 80093ec:	f7f9 b8b4 	b.w	8002558 <_getpid>

080093f0 <__sread>:
 80093f0:	b510      	push	{r4, lr}
 80093f2:	460c      	mov	r4, r1
 80093f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f8:	f000 f894 	bl	8009524 <_read_r>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	bfab      	itete	ge
 8009400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009402:	89a3      	ldrhlt	r3, [r4, #12]
 8009404:	181b      	addge	r3, r3, r0
 8009406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800940a:	bfac      	ite	ge
 800940c:	6563      	strge	r3, [r4, #84]	; 0x54
 800940e:	81a3      	strhlt	r3, [r4, #12]
 8009410:	bd10      	pop	{r4, pc}

08009412 <__swrite>:
 8009412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009416:	461f      	mov	r7, r3
 8009418:	898b      	ldrh	r3, [r1, #12]
 800941a:	4605      	mov	r5, r0
 800941c:	05db      	lsls	r3, r3, #23
 800941e:	460c      	mov	r4, r1
 8009420:	4616      	mov	r6, r2
 8009422:	d505      	bpl.n	8009430 <__swrite+0x1e>
 8009424:	2302      	movs	r3, #2
 8009426:	2200      	movs	r2, #0
 8009428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942c:	f000 f868 	bl	8009500 <_lseek_r>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	4632      	mov	r2, r6
 8009434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	4628      	mov	r0, r5
 800943c:	463b      	mov	r3, r7
 800943e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009446:	f000 b817 	b.w	8009478 <_write_r>

0800944a <__sseek>:
 800944a:	b510      	push	{r4, lr}
 800944c:	460c      	mov	r4, r1
 800944e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009452:	f000 f855 	bl	8009500 <_lseek_r>
 8009456:	1c43      	adds	r3, r0, #1
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	bf15      	itete	ne
 800945c:	6560      	strne	r0, [r4, #84]	; 0x54
 800945e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009466:	81a3      	strheq	r3, [r4, #12]
 8009468:	bf18      	it	ne
 800946a:	81a3      	strhne	r3, [r4, #12]
 800946c:	bd10      	pop	{r4, pc}

0800946e <__sclose>:
 800946e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009472:	f000 b813 	b.w	800949c <_close_r>
	...

08009478 <_write_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	2200      	movs	r2, #0
 8009482:	4d05      	ldr	r5, [pc, #20]	; (8009498 <_write_r+0x20>)
 8009484:	602a      	str	r2, [r5, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	f7f9 f8a4 	bl	80025d4 <_write>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_write_r+0x1e>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b103      	cbz	r3, 8009496 <_write_r+0x1e>
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20000338 	.word	0x20000338

0800949c <_close_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	2300      	movs	r3, #0
 80094a0:	4d05      	ldr	r5, [pc, #20]	; (80094b8 <_close_r+0x1c>)
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	f7f9 f8b0 	bl	800260c <_close>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_close_r+0x1a>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_close_r+0x1a>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000338 	.word	0x20000338

080094bc <_fstat_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	2300      	movs	r3, #0
 80094c0:	4d06      	ldr	r5, [pc, #24]	; (80094dc <_fstat_r+0x20>)
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	f7f9 f8aa 	bl	8002622 <_fstat>
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	d102      	bne.n	80094d8 <_fstat_r+0x1c>
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	b103      	cbz	r3, 80094d8 <_fstat_r+0x1c>
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop
 80094dc:	20000338 	.word	0x20000338

080094e0 <_isatty_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	2300      	movs	r3, #0
 80094e4:	4d05      	ldr	r5, [pc, #20]	; (80094fc <_isatty_r+0x1c>)
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	602b      	str	r3, [r5, #0]
 80094ec:	f7f9 f8a8 	bl	8002640 <_isatty>
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	d102      	bne.n	80094fa <_isatty_r+0x1a>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	b103      	cbz	r3, 80094fa <_isatty_r+0x1a>
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	20000338 	.word	0x20000338

08009500 <_lseek_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	2200      	movs	r2, #0
 800950a:	4d05      	ldr	r5, [pc, #20]	; (8009520 <_lseek_r+0x20>)
 800950c:	602a      	str	r2, [r5, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f7f9 f8a0 	bl	8002654 <_lseek>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_lseek_r+0x1e>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_lseek_r+0x1e>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	20000338 	.word	0x20000338

08009524 <_read_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	4611      	mov	r1, r2
 800952c:	2200      	movs	r2, #0
 800952e:	4d05      	ldr	r5, [pc, #20]	; (8009544 <_read_r+0x20>)
 8009530:	602a      	str	r2, [r5, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	f7f9 f831 	bl	800259a <_read>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_read_r+0x1e>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_read_r+0x1e>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	20000338 	.word	0x20000338

08009548 <_init>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	bf00      	nop
 800954c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954e:	bc08      	pop	{r3}
 8009550:	469e      	mov	lr, r3
 8009552:	4770      	bx	lr

08009554 <_fini>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	bf00      	nop
 8009558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955a:	bc08      	pop	{r3}
 800955c:	469e      	mov	lr, r3
 800955e:	4770      	bx	lr
