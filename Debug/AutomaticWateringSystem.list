
AutomaticWateringSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009940  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08009a80  08009a80  00019a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a11c  0800a11c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a11c  0800a11c  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a124  0800a124  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a124  0800a124  0001a124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001e4  0800a310  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  0800a310  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fec2  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d1  00000000  00000000  000300cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000327a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00033670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188a3  00000000  00000000  00034460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001192e  00000000  00000000  0004cd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095627  00000000  00000000  0005e631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3c58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000509c  00000000  00000000  000f3ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08009a68 	.word	0x08009a68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08009a68 	.word	0x08009a68

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_uldivmod>:
 8001060:	b953      	cbnz	r3, 8001078 <__aeabi_uldivmod+0x18>
 8001062:	b94a      	cbnz	r2, 8001078 <__aeabi_uldivmod+0x18>
 8001064:	2900      	cmp	r1, #0
 8001066:	bf08      	it	eq
 8001068:	2800      	cmpeq	r0, #0
 800106a:	bf1c      	itt	ne
 800106c:	f04f 31ff 	movne.w	r1, #4294967295
 8001070:	f04f 30ff 	movne.w	r0, #4294967295
 8001074:	f000 b976 	b.w	8001364 <__aeabi_idiv0>
 8001078:	f1ad 0c08 	sub.w	ip, sp, #8
 800107c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001080:	f000 f806 	bl	8001090 <__udivmoddi4>
 8001084:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr

08001090 <__udivmoddi4>:
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001094:	9e08      	ldr	r6, [sp, #32]
 8001096:	460d      	mov	r5, r1
 8001098:	4604      	mov	r4, r0
 800109a:	4688      	mov	r8, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d14d      	bne.n	800113c <__udivmoddi4+0xac>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	4694      	mov	ip, r2
 80010a4:	d968      	bls.n	8001178 <__udivmoddi4+0xe8>
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b152      	cbz	r2, 80010c2 <__udivmoddi4+0x32>
 80010ac:	fa01 f302 	lsl.w	r3, r1, r2
 80010b0:	f1c2 0120 	rsb	r1, r2, #32
 80010b4:	fa20 f101 	lsr.w	r1, r0, r1
 80010b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010bc:	ea41 0803 	orr.w	r8, r1, r3
 80010c0:	4094      	lsls	r4, r2
 80010c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80010c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80010ca:	fa1f fe8c 	uxth.w	lr, ip
 80010ce:	fb01 8817 	mls	r8, r1, r7, r8
 80010d2:	fb07 f00e 	mul.w	r0, r7, lr
 80010d6:	0c23      	lsrs	r3, r4, #16
 80010d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010dc:	4298      	cmp	r0, r3
 80010de:	d90a      	bls.n	80010f6 <__udivmoddi4+0x66>
 80010e0:	eb1c 0303 	adds.w	r3, ip, r3
 80010e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80010e8:	f080 811e 	bcs.w	8001328 <__udivmoddi4+0x298>
 80010ec:	4298      	cmp	r0, r3
 80010ee:	f240 811b 	bls.w	8001328 <__udivmoddi4+0x298>
 80010f2:	3f02      	subs	r7, #2
 80010f4:	4463      	add	r3, ip
 80010f6:	1a1b      	subs	r3, r3, r0
 80010f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80010fc:	fb01 3310 	mls	r3, r1, r0, r3
 8001100:	fb00 fe0e 	mul.w	lr, r0, lr
 8001104:	b2a4      	uxth	r4, r4
 8001106:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800110a:	45a6      	cmp	lr, r4
 800110c:	d90a      	bls.n	8001124 <__udivmoddi4+0x94>
 800110e:	eb1c 0404 	adds.w	r4, ip, r4
 8001112:	f100 33ff 	add.w	r3, r0, #4294967295
 8001116:	f080 8109 	bcs.w	800132c <__udivmoddi4+0x29c>
 800111a:	45a6      	cmp	lr, r4
 800111c:	f240 8106 	bls.w	800132c <__udivmoddi4+0x29c>
 8001120:	4464      	add	r4, ip
 8001122:	3802      	subs	r0, #2
 8001124:	2100      	movs	r1, #0
 8001126:	eba4 040e 	sub.w	r4, r4, lr
 800112a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800112e:	b11e      	cbz	r6, 8001138 <__udivmoddi4+0xa8>
 8001130:	2300      	movs	r3, #0
 8001132:	40d4      	lsrs	r4, r2
 8001134:	e9c6 4300 	strd	r4, r3, [r6]
 8001138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113c:	428b      	cmp	r3, r1
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0xc2>
 8001140:	2e00      	cmp	r6, #0
 8001142:	f000 80ee 	beq.w	8001322 <__udivmoddi4+0x292>
 8001146:	2100      	movs	r1, #0
 8001148:	e9c6 0500 	strd	r0, r5, [r6]
 800114c:	4608      	mov	r0, r1
 800114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001152:	fab3 f183 	clz	r1, r3
 8001156:	2900      	cmp	r1, #0
 8001158:	d14a      	bne.n	80011f0 <__udivmoddi4+0x160>
 800115a:	42ab      	cmp	r3, r5
 800115c:	d302      	bcc.n	8001164 <__udivmoddi4+0xd4>
 800115e:	4282      	cmp	r2, r0
 8001160:	f200 80fc 	bhi.w	800135c <__udivmoddi4+0x2cc>
 8001164:	1a84      	subs	r4, r0, r2
 8001166:	eb65 0303 	sbc.w	r3, r5, r3
 800116a:	2001      	movs	r0, #1
 800116c:	4698      	mov	r8, r3
 800116e:	2e00      	cmp	r6, #0
 8001170:	d0e2      	beq.n	8001138 <__udivmoddi4+0xa8>
 8001172:	e9c6 4800 	strd	r4, r8, [r6]
 8001176:	e7df      	b.n	8001138 <__udivmoddi4+0xa8>
 8001178:	b902      	cbnz	r2, 800117c <__udivmoddi4+0xec>
 800117a:	deff      	udf	#255	; 0xff
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	2a00      	cmp	r2, #0
 8001182:	f040 8091 	bne.w	80012a8 <__udivmoddi4+0x218>
 8001186:	eba1 000c 	sub.w	r0, r1, ip
 800118a:	2101      	movs	r1, #1
 800118c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001190:	fa1f fe8c 	uxth.w	lr, ip
 8001194:	fbb0 f3f7 	udiv	r3, r0, r7
 8001198:	fb07 0013 	mls	r0, r7, r3, r0
 800119c:	0c25      	lsrs	r5, r4, #16
 800119e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011a2:	fb0e f003 	mul.w	r0, lr, r3
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x12c>
 80011aa:	eb1c 0505 	adds.w	r5, ip, r5
 80011ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80011b2:	d202      	bcs.n	80011ba <__udivmoddi4+0x12a>
 80011b4:	42a8      	cmp	r0, r5
 80011b6:	f200 80ce 	bhi.w	8001356 <__udivmoddi4+0x2c6>
 80011ba:	4643      	mov	r3, r8
 80011bc:	1a2d      	subs	r5, r5, r0
 80011be:	fbb5 f0f7 	udiv	r0, r5, r7
 80011c2:	fb07 5510 	mls	r5, r7, r0, r5
 80011c6:	fb0e fe00 	mul.w	lr, lr, r0
 80011ca:	b2a4      	uxth	r4, r4
 80011cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011d0:	45a6      	cmp	lr, r4
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x156>
 80011d4:	eb1c 0404 	adds.w	r4, ip, r4
 80011d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011dc:	d202      	bcs.n	80011e4 <__udivmoddi4+0x154>
 80011de:	45a6      	cmp	lr, r4
 80011e0:	f200 80b6 	bhi.w	8001350 <__udivmoddi4+0x2c0>
 80011e4:	4628      	mov	r0, r5
 80011e6:	eba4 040e 	sub.w	r4, r4, lr
 80011ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011ee:	e79e      	b.n	800112e <__udivmoddi4+0x9e>
 80011f0:	f1c1 0720 	rsb	r7, r1, #32
 80011f4:	408b      	lsls	r3, r1
 80011f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8001202:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001206:	fbba f8f9 	udiv	r8, sl, r9
 800120a:	fa20 f307 	lsr.w	r3, r0, r7
 800120e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001212:	408d      	lsls	r5, r1
 8001214:	fa1f fe8c 	uxth.w	lr, ip
 8001218:	431d      	orrs	r5, r3
 800121a:	fa00 f301 	lsl.w	r3, r0, r1
 800121e:	fb08 f00e 	mul.w	r0, r8, lr
 8001222:	0c2c      	lsrs	r4, r5, #16
 8001224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001228:	42a0      	cmp	r0, r4
 800122a:	fa02 f201 	lsl.w	r2, r2, r1
 800122e:	d90b      	bls.n	8001248 <__udivmoddi4+0x1b8>
 8001230:	eb1c 0404 	adds.w	r4, ip, r4
 8001234:	f108 3aff 	add.w	sl, r8, #4294967295
 8001238:	f080 8088 	bcs.w	800134c <__udivmoddi4+0x2bc>
 800123c:	42a0      	cmp	r0, r4
 800123e:	f240 8085 	bls.w	800134c <__udivmoddi4+0x2bc>
 8001242:	f1a8 0802 	sub.w	r8, r8, #2
 8001246:	4464      	add	r4, ip
 8001248:	1a24      	subs	r4, r4, r0
 800124a:	fbb4 f0f9 	udiv	r0, r4, r9
 800124e:	fb09 4410 	mls	r4, r9, r0, r4
 8001252:	fb00 fe0e 	mul.w	lr, r0, lr
 8001256:	b2ad      	uxth	r5, r5
 8001258:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800125c:	45a6      	cmp	lr, r4
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x1e2>
 8001260:	eb1c 0404 	adds.w	r4, ip, r4
 8001264:	f100 35ff 	add.w	r5, r0, #4294967295
 8001268:	d26c      	bcs.n	8001344 <__udivmoddi4+0x2b4>
 800126a:	45a6      	cmp	lr, r4
 800126c:	d96a      	bls.n	8001344 <__udivmoddi4+0x2b4>
 800126e:	3802      	subs	r0, #2
 8001270:	4464      	add	r4, ip
 8001272:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001276:	fba0 9502 	umull	r9, r5, r0, r2
 800127a:	eba4 040e 	sub.w	r4, r4, lr
 800127e:	42ac      	cmp	r4, r5
 8001280:	46c8      	mov	r8, r9
 8001282:	46ae      	mov	lr, r5
 8001284:	d356      	bcc.n	8001334 <__udivmoddi4+0x2a4>
 8001286:	d053      	beq.n	8001330 <__udivmoddi4+0x2a0>
 8001288:	2e00      	cmp	r6, #0
 800128a:	d069      	beq.n	8001360 <__udivmoddi4+0x2d0>
 800128c:	ebb3 0208 	subs.w	r2, r3, r8
 8001290:	eb64 040e 	sbc.w	r4, r4, lr
 8001294:	fa22 f301 	lsr.w	r3, r2, r1
 8001298:	fa04 f707 	lsl.w	r7, r4, r7
 800129c:	431f      	orrs	r7, r3
 800129e:	40cc      	lsrs	r4, r1
 80012a0:	e9c6 7400 	strd	r7, r4, [r6]
 80012a4:	2100      	movs	r1, #0
 80012a6:	e747      	b.n	8001138 <__udivmoddi4+0xa8>
 80012a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ac:	f1c2 0120 	rsb	r1, r2, #32
 80012b0:	fa25 f301 	lsr.w	r3, r5, r1
 80012b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012b8:	fa20 f101 	lsr.w	r1, r0, r1
 80012bc:	4095      	lsls	r5, r2
 80012be:	430d      	orrs	r5, r1
 80012c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80012c4:	fb07 3311 	mls	r3, r7, r1, r3
 80012c8:	fa1f fe8c 	uxth.w	lr, ip
 80012cc:	0c28      	lsrs	r0, r5, #16
 80012ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012d2:	fb01 f30e 	mul.w	r3, r1, lr
 80012d6:	4283      	cmp	r3, r0
 80012d8:	fa04 f402 	lsl.w	r4, r4, r2
 80012dc:	d908      	bls.n	80012f0 <__udivmoddi4+0x260>
 80012de:	eb1c 0000 	adds.w	r0, ip, r0
 80012e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80012e6:	d22f      	bcs.n	8001348 <__udivmoddi4+0x2b8>
 80012e8:	4283      	cmp	r3, r0
 80012ea:	d92d      	bls.n	8001348 <__udivmoddi4+0x2b8>
 80012ec:	3902      	subs	r1, #2
 80012ee:	4460      	add	r0, ip
 80012f0:	1ac0      	subs	r0, r0, r3
 80012f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80012f6:	fb07 0013 	mls	r0, r7, r3, r0
 80012fa:	b2ad      	uxth	r5, r5
 80012fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001300:	fb03 f00e 	mul.w	r0, r3, lr
 8001304:	42a8      	cmp	r0, r5
 8001306:	d908      	bls.n	800131a <__udivmoddi4+0x28a>
 8001308:	eb1c 0505 	adds.w	r5, ip, r5
 800130c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001310:	d216      	bcs.n	8001340 <__udivmoddi4+0x2b0>
 8001312:	42a8      	cmp	r0, r5
 8001314:	d914      	bls.n	8001340 <__udivmoddi4+0x2b0>
 8001316:	3b02      	subs	r3, #2
 8001318:	4465      	add	r5, ip
 800131a:	1a28      	subs	r0, r5, r0
 800131c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001320:	e738      	b.n	8001194 <__udivmoddi4+0x104>
 8001322:	4631      	mov	r1, r6
 8001324:	4630      	mov	r0, r6
 8001326:	e707      	b.n	8001138 <__udivmoddi4+0xa8>
 8001328:	462f      	mov	r7, r5
 800132a:	e6e4      	b.n	80010f6 <__udivmoddi4+0x66>
 800132c:	4618      	mov	r0, r3
 800132e:	e6f9      	b.n	8001124 <__udivmoddi4+0x94>
 8001330:	454b      	cmp	r3, r9
 8001332:	d2a9      	bcs.n	8001288 <__udivmoddi4+0x1f8>
 8001334:	ebb9 0802 	subs.w	r8, r9, r2
 8001338:	eb65 0e0c 	sbc.w	lr, r5, ip
 800133c:	3801      	subs	r0, #1
 800133e:	e7a3      	b.n	8001288 <__udivmoddi4+0x1f8>
 8001340:	4643      	mov	r3, r8
 8001342:	e7ea      	b.n	800131a <__udivmoddi4+0x28a>
 8001344:	4628      	mov	r0, r5
 8001346:	e794      	b.n	8001272 <__udivmoddi4+0x1e2>
 8001348:	4641      	mov	r1, r8
 800134a:	e7d1      	b.n	80012f0 <__udivmoddi4+0x260>
 800134c:	46d0      	mov	r8, sl
 800134e:	e77b      	b.n	8001248 <__udivmoddi4+0x1b8>
 8001350:	4464      	add	r4, ip
 8001352:	3802      	subs	r0, #2
 8001354:	e747      	b.n	80011e6 <__udivmoddi4+0x156>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	e72f      	b.n	80011bc <__udivmoddi4+0x12c>
 800135c:	4608      	mov	r0, r1
 800135e:	e706      	b.n	800116e <__udivmoddi4+0xde>
 8001360:	4631      	mov	r1, r6
 8001362:	e6e9      	b.n	8001138 <__udivmoddi4+0xa8>

08001364 <__aeabi_idiv0>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <send_to_display>:
/**
  * @brief Send string to LCD-Display
  * @note If \r or \n are detected the string is contiued in the second line.
  * @retval HAL status
  */
HAL_StatusTypeDef send_to_display(I2C_HandleTypeDef *hi2c, char* input_string, uint8_t numchar, uint16_t address){
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	; 0x50
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	4611      	mov	r1, r2
 8001374:	461a      	mov	r2, r3
 8001376:	460b      	mov	r3, r1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	4613      	mov	r3, r2
 800137c:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef returnmessage = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint8_t send_message[ARRAYSIZE] = {0};
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	2229      	movs	r2, #41	; 0x29
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f005 fc89 	bl	8006ca8 <memset>
	uint8_t upordown = 1;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t offset = 16;
 800139c:	2310      	movs	r3, #16
 800139e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	clear_screen(hi2c, address);
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	4619      	mov	r1, r3
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fd28 	bl	8001dfc <clear_screen>

	send_message[0] = LCD_WR;
 80013ac:	2361      	movs	r3, #97	; 0x61
 80013ae:	753b      	strb	r3, [r7, #20]

	for(uint8_t i=0; i<numchar; i++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80013b6:	e063      	b.n	8001480 <send_to_display+0x118>
		if((input_string[i] == '\r') || (input_string[i] == '\n')){
 80013b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b0d      	cmp	r3, #13
 80013c4:	d006      	beq.n	80013d4 <send_to_display+0x6c>
 80013c6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b0a      	cmp	r3, #10
 80013d2:	d10c      	bne.n	80013ee <send_to_display+0x86>
			offset = i;
 80013d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			i++;
 80013dc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013e0:	3301      	adds	r3, #1
 80013e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			upordown = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013ec:	e043      	b.n	8001476 <send_to_display+0x10e>
		}
		else{
			if(i <= 15){
 80013ee:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	d812      	bhi.n	800141c <send_to_display+0xb4>
				send_message[1] = upordown;
 80013f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013fa:	757b      	strb	r3, [r7, #21]
				if(upordown) send_message[2] = i;
 80013fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <send_to_display+0xa4>
 8001404:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001408:	75bb      	strb	r3, [r7, #22]
 800140a:	e017      	b.n	800143c <send_to_display+0xd4>
				else send_message[2] = i-offset;
 800140c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001410:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	75bb      	strb	r3, [r7, #22]
 800141a:	e00f      	b.n	800143c <send_to_display+0xd4>
			}
			else if(i <= 30){
 800141c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001420:	2b1e      	cmp	r3, #30
 8001422:	d809      	bhi.n	8001438 <send_to_display+0xd0>
				send_message[1] = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	757b      	strb	r3, [r7, #21]
				send_message[2] = i-offset;
 8001428:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800142c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	75bb      	strb	r3, [r7, #22]
 8001436:	e001      	b.n	800143c <send_to_display+0xd4>
			}
			else return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e02a      	b.n	8001492 <send_to_display+0x12a>

			send_message[3]=input_string[i];
 800143c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	75fb      	strb	r3, [r7, #23]
			returnmessage = HAL_I2C_Master_Transmit(hi2c, address , send_message, 4, HAL_MAX_DELAY);
 8001448:	f107 0214 	add.w	r2, r7, #20
 800144c:	88b9      	ldrh	r1, [r7, #4]
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2304      	movs	r3, #4
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f002 fcf0 	bl	8003e3c <HAL_I2C_Master_Transmit>
 800145c:	4603      	mov	r3, r0
 800145e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			if(returnmessage != HAL_OK){
 8001462:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <send_to_display+0x108>
				return returnmessage;
 800146a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800146e:	e010      	b.n	8001492 <send_to_display+0x12a>
			}
			HAL_Delay(50);
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f001 fc0b 	bl	8002c8c <HAL_Delay>
	for(uint8_t i=0; i<numchar; i++){
 8001476:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800147a:	3301      	adds	r3, #1
 800147c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001480:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	429a      	cmp	r2, r3
 8001488:	d396      	bcc.n	80013b8 <send_to_display+0x50>
		}
	}
	HAL_Delay(100);
 800148a:	2064      	movs	r0, #100	; 0x64
 800148c:	f001 fbfe 	bl	8002c8c <HAL_Delay>
	return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3748      	adds	r7, #72	; 0x48
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <timer_interrupt_handler>:
  * @brief Interrupt handler for RTC
  * @retval HAL status
  */
HAL_StatusTypeDef timer_interrupt_handler(	UART_HandleTypeDef* huart, ADC_HandleTypeDef* hadc, I2C_HandleTypeDef *hi2c,
											uint16_t waittime, uint16_t* last_time_watered,
											uint16_t LCD16x2_ADDR, RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate){
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b098      	sub	sp, #96	; 0x60
 80014a0:	af06      	add	r7, sp, #24
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	807b      	strh	r3, [r7, #2]
	uint8_t send_message[ARRAYSIZE] = {0};
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2229      	movs	r2, #41	; 0x29
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 fbf6 	bl	8006ca8 <memset>
	uint16_t adc_value = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	HAL_StatusTypeDef returnmessage = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	float voltage;

//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	sprintf((char *) send_message, "Leaving Stop-Mode!\r\n");
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4997      	ldr	r1, [pc, #604]	; (800172c <timer_interrupt_handler+0x290>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f006 f852 	bl	8007578 <siprintf>
	HAL_UART_Transmit(huart, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe fe51 	bl	8000180 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f107 0114 	add.w	r1, r7, #20
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f004 fe71 	bl	80061d2 <HAL_UART_Transmit>

	get_time((char *) send_message, hrtc, sTime, sDate);
 80014f0:	f107 0514 	add.w	r5, r7, #20
 80014f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014f6:	9303      	str	r3, [sp, #12]
 80014f8:	466c      	mov	r4, sp
 80014fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001506:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800150a:	cb0c      	ldmia	r3, {r2, r3}
 800150c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800150e:	4628      	mov	r0, r5
 8001510:	f000 fbd0 	bl	8001cb4 <get_time>
	send_to_display(hi2c, (char*) send_message, strlen((char *) send_message), LCD16x2_ADDR);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe31 	bl	8000180 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b2da      	uxtb	r2, r3
 8001522:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001526:	f107 0114 	add.w	r1, r7, #20
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff1c 	bl	8001368 <send_to_display>

	  //Get Voltage from Moisture Sensor
	  if(HAL_ADC_Start(hadc) != HAL_OK){
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f001 fd2f 	bl	8002f94 <HAL_ADC_Start>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d015      	beq.n	8001568 <timer_interrupt_handler+0xcc>
		  sprintf((char *) send_message, "ADC not OK!\r\n");
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	497b      	ldr	r1, [pc, #492]	; (8001730 <timer_interrupt_handler+0x294>)
 8001542:	4618      	mov	r0, r3
 8001544:	f006 f818 	bl	8007578 <siprintf>
		  HAL_UART_Transmit(huart, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fe17 	bl	8000180 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	b29a      	uxth	r2, r3
 8001556:	f107 0114 	add.w	r1, r7, #20
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f004 fe37 	bl	80061d2 <HAL_UART_Transmit>
		  return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0dd      	b.n	8001724 <timer_interrupt_handler+0x288>
	  }
	  else{
		  returnmessage = HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f001 fd71 	bl	8003054 <HAL_ADC_PollForConversion>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		  if (returnmessage == HAL_OK){
 8001578:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800157c:	2b00      	cmp	r3, #0
 800157e:	d140      	bne.n	8001602 <timer_interrupt_handler+0x166>
			  adc_value = HAL_ADC_GetValue(hadc);
 8001580:	68b8      	ldr	r0, [r7, #8]
 8001582:	f001 fdf7 	bl	8003174 <HAL_ADC_GetValue>
 8001586:	4603      	mov	r3, r0
 8001588:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			  voltage = (adc_value / 4096.0f) * 3.3f;
 800158c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fb4b 	bl	8000c2c <__aeabi_i2f>
 8001596:	4603      	mov	r3, r0
 8001598:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fc4d 	bl	8000e3c <__aeabi_fdiv>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4963      	ldr	r1, [pc, #396]	; (8001734 <timer_interrupt_handler+0x298>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb94 	bl	8000cd4 <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
			  sprintf((char *)send_message, "Voltage:\r\n%lfV\r\n", voltage);
 80015b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015b2:	f7fe ff51 	bl	8000458 <__aeabi_f2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	f107 0014 	add.w	r0, r7, #20
 80015be:	495e      	ldr	r1, [pc, #376]	; (8001738 <timer_interrupt_handler+0x29c>)
 80015c0:	f005 ffda 	bl	8007578 <siprintf>
			  HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe fdd9 	bl	8000180 <strlen>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	f107 0114 	add.w	r1, r7, #20
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f004 fdf9 	bl	80061d2 <HAL_UART_Transmit>
			  send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe fdcb 	bl	8000180 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3b02      	subs	r3, #2
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015f6:	f107 0114 	add.w	r1, r7, #20
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff feb4 	bl	8001368 <send_to_display>
 8001600:	e015      	b.n	800162e <timer_interrupt_handler+0x192>
		  }
		  else{
			  sprintf((char *)send_message,"Error! ADC returned: 0x%x\r\n", returnmessage);
 8001602:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	494c      	ldr	r1, [pc, #304]	; (800173c <timer_interrupt_handler+0x2a0>)
 800160c:	4618      	mov	r0, r3
 800160e:	f005 ffb3 	bl	8007578 <siprintf>
			  HAL_UART_Transmit(huart, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fdb2 	bl	8000180 <strlen>
 800161c:	4603      	mov	r3, r0
 800161e:	b29a      	uxth	r2, r3
 8001620:	f107 0114 	add.w	r1, r7, #20
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f004 fdd2 	bl	80061d2 <HAL_UART_Transmit>

	  /* Logic to power pump on low moisture voltage. Also don't water to often :)
	   *
	   * Moisture ~ 1/U
	   */
	  if(voltage > MIN_MOISTURE_VOLTAGE && !should_water(last_time_watered, (uint16_t) waittime, hrtc, sTime, sDate)){
 800162e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001632:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001634:	f7ff fd0a 	bl	800104c <__aeabi_fcmpgt>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d071      	beq.n	8001722 <timer_interrupt_handler+0x286>
 800163e:	887d      	ldrh	r5, [r7, #2]
 8001640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001642:	9304      	str	r3, [sp, #16]
 8001644:	466c      	mov	r4, sp
 8001646:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800164a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001654:	4629      	mov	r1, r5
 8001656:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001658:	f000 fb91 	bl	8001d7e <should_water>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d15f      	bne.n	8001722 <timer_interrupt_handler+0x286>
		  //start pump, also led for debugging reasons
		  HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2140      	movs	r1, #64	; 0x40
 8001666:	4836      	ldr	r0, [pc, #216]	; (8001740 <timer_interrupt_handler+0x2a4>)
 8001668:	f002 fa74 	bl	8003b54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2120      	movs	r1, #32
 8001670:	4833      	ldr	r0, [pc, #204]	; (8001740 <timer_interrupt_handler+0x2a4>)
 8001672:	f002 fa6f 	bl	8003b54 <HAL_GPIO_WritePin>

		  sprintf((char *)send_message, "Pump: ON\r\n\n");
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4932      	ldr	r1, [pc, #200]	; (8001744 <timer_interrupt_handler+0x2a8>)
 800167c:	4618      	mov	r0, r3
 800167e:	f005 ff7b 	bl	8007578 <siprintf>
		  HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fd7a 	bl	8000180 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 0114 	add.w	r1, r7, #20
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f004 fd9a 	bl	80061d2 <HAL_UART_Transmit>
		  send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-3, LCD16x2_ADDR);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fd6c 	bl	8000180 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3b03      	subs	r3, #3
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80016b4:	f107 0114 	add.w	r1, r7, #20
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fe55 	bl	8001368 <send_to_display>

		  HAL_Delay(1000 * TIMEPUMPISRUNNING_IN_S);
 80016be:	f241 3088 	movw	r0, #5000	; 0x1388
 80016c2:	f001 fae3 	bl	8002c8c <HAL_Delay>

		  //stop pump
		  HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	481d      	ldr	r0, [pc, #116]	; (8001740 <timer_interrupt_handler+0x2a4>)
 80016cc:	f002 fa42 	bl	8003b54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2120      	movs	r1, #32
 80016d4:	481a      	ldr	r0, [pc, #104]	; (8001740 <timer_interrupt_handler+0x2a4>)
 80016d6:	f002 fa3d 	bl	8003b54 <HAL_GPIO_WritePin>

		  sprintf((char *)send_message, "Pump: OFF\r\n\n");
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	491a      	ldr	r1, [pc, #104]	; (8001748 <timer_interrupt_handler+0x2ac>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f005 ff49 	bl	8007578 <siprintf>
		  HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fd48 	bl	8000180 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f107 0114 	add.w	r1, r7, #20
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f004 fd68 	bl	80061d2 <HAL_UART_Transmit>
		  send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-3, LCD16x2_ADDR);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fd3a 	bl	8000180 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3b03      	subs	r3, #3
 8001712:	b2da      	uxtb	r2, r3
 8001714:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001718:	f107 0114 	add.w	r1, r7, #20
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fe23 	bl	8001368 <send_to_display>
	  }

	  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3748      	adds	r7, #72	; 0x48
 8001728:	46bd      	mov	sp, r7
 800172a:	bdb0      	pop	{r4, r5, r7, pc}
 800172c:	08009a80 	.word	0x08009a80
 8001730:	08009a98 	.word	0x08009a98
 8001734:	40533333 	.word	0x40533333
 8001738:	08009aa8 	.word	0x08009aa8
 800173c:	08009abc 	.word	0x08009abc
 8001740:	40020000 	.word	0x40020000
 8001744:	08009ad8 	.word	0x08009ad8
 8001748:	08009ae4 	.word	0x08009ae4

0800174c <uart_interrupt_handler>:
/**
  * @brief Interrupt Handler for UART
  * @note UART cannot wake up uC from stop mode
  * @retval HAL status
  */
HAL_StatusTypeDef uart_interrupt_handler(char uart_message, UART_HandleTypeDef* huart, I2C_HandleTypeDef* hi2c, uint16_t LCD16x2_ADDR){
 800174c:	b580      	push	{r7, lr}
 800174e:	b090      	sub	sp, #64	; 0x40
 8001750:	af00      	add	r7, sp, #0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	461a      	mov	r2, r3
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	4613      	mov	r3, r2
 800175e:	81bb      	strh	r3, [r7, #12]
	uint8_t send_message[ARRAYSIZE] = {0};
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2229      	movs	r2, #41	; 0x29
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f005 fa9b 	bl	8006ca8 <memset>

	if(uart_message == 'y'){
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b79      	cmp	r3, #121	; 0x79
 8001776:	d12d      	bne.n	80017d4 <uart_interrupt_handler+0x88>
		HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	4852      	ldr	r0, [pc, #328]	; (80018c8 <uart_interrupt_handler+0x17c>)
 800177e:	f002 f9e9 	bl	8003b54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	2120      	movs	r1, #32
 8001786:	4850      	ldr	r0, [pc, #320]	; (80018c8 <uart_interrupt_handler+0x17c>)
 8001788:	f002 f9e4 	bl	8003b54 <HAL_GPIO_WritePin>
		sprintf((char *) send_message, "Pump: on\r\n");
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	494e      	ldr	r1, [pc, #312]	; (80018cc <uart_interrupt_handler+0x180>)
 8001792:	4618      	mov	r0, r3
 8001794:	f005 fef0 	bl	8007578 <siprintf>
		HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fcef 	bl	8000180 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f107 0110 	add.w	r1, r7, #16
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	68b8      	ldr	r0, [r7, #8]
 80017b0:	f004 fd0f 	bl	80061d2 <HAL_UART_Transmit>
		send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fce1 	bl	8000180 <strlen>
 80017be:	4603      	mov	r3, r0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	3b02      	subs	r3, #2
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	89bb      	ldrh	r3, [r7, #12]
 80017c8:	f107 0110 	add.w	r1, r7, #16
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fdcb 	bl	8001368 <send_to_display>
 80017d2:	e074      	b.n	80018be <uart_interrupt_handler+0x172>
	}
	else if (uart_message == 'n'){
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b6e      	cmp	r3, #110	; 0x6e
 80017d8:	d12d      	bne.n	8001836 <uart_interrupt_handler+0xea>
		HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	483a      	ldr	r0, [pc, #232]	; (80018c8 <uart_interrupt_handler+0x17c>)
 80017e0:	f002 f9b8 	bl	8003b54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2120      	movs	r1, #32
 80017e8:	4837      	ldr	r0, [pc, #220]	; (80018c8 <uart_interrupt_handler+0x17c>)
 80017ea:	f002 f9b3 	bl	8003b54 <HAL_GPIO_WritePin>
		sprintf((char *)send_message, "Pump: off\r\n");
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	4937      	ldr	r1, [pc, #220]	; (80018d0 <uart_interrupt_handler+0x184>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f005 febf 	bl	8007578 <siprintf>
		HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fcbe 	bl	8000180 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	f107 0110 	add.w	r1, r7, #16
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f004 fcde 	bl	80061d2 <HAL_UART_Transmit>
		send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fcb0 	bl	8000180 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	3b02      	subs	r3, #2
 8001826:	b2da      	uxtb	r2, r3
 8001828:	89bb      	ldrh	r3, [r7, #12]
 800182a:	f107 0110 	add.w	r1, r7, #16
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fd9a 	bl	8001368 <send_to_display>
 8001834:	e043      	b.n	80018be <uart_interrupt_handler+0x172>
	}
	else{
		HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	4823      	ldr	r0, [pc, #140]	; (80018c8 <uart_interrupt_handler+0x17c>)
 800183c:	f002 f98a 	bl	8003b54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2120      	movs	r1, #32
 8001844:	4820      	ldr	r0, [pc, #128]	; (80018c8 <uart_interrupt_handler+0x17c>)
 8001846:	f002 f985 	bl	8003b54 <HAL_GPIO_WritePin>
		sprintf((char *)send_message, "Couldn't recognize command.\r\n");
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4921      	ldr	r1, [pc, #132]	; (80018d4 <uart_interrupt_handler+0x188>)
 8001850:	4618      	mov	r0, r3
 8001852:	f005 fe91 	bl	8007578 <siprintf>
		HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fc90 	bl	8000180 <strlen>
 8001860:	4603      	mov	r3, r0
 8001862:	b29a      	uxth	r2, r3
 8001864:	f107 0110 	add.w	r1, r7, #16
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f004 fcb0 	bl	80061d2 <HAL_UART_Transmit>
		sprintf((char *)send_message, "Received: %d, Pump: off\r\n", uart_message);
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4917      	ldr	r1, [pc, #92]	; (80018d8 <uart_interrupt_handler+0x18c>)
 800187a:	4618      	mov	r0, r3
 800187c:	f005 fe7c 	bl	8007578 <siprintf>
		HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fc7b 	bl	8000180 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0110 	add.w	r1, r7, #16
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	68b8      	ldr	r0, [r7, #8]
 8001898:	f004 fc9b 	bl	80061d2 <HAL_UART_Transmit>
		send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fc6d 	bl	8000180 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3b02      	subs	r3, #2
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	89bb      	ldrh	r3, [r7, #12]
 80018b0:	f107 0110 	add.w	r1, r7, #16
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fd57 	bl	8001368 <send_to_display>
		return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <uart_interrupt_handler+0x174>
	}

	  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3740      	adds	r7, #64	; 0x40
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000
 80018cc:	08009af4 	.word	0x08009af4
 80018d0:	08009b00 	.word	0x08009b00
 80018d4:	08009b0c 	.word	0x08009b0c
 80018d8:	08009b2c 	.word	0x08009b2c

080018dc <gpio_interrupt_handler>:
  * 	  One Button has to be pressed after feedback
  * 	  Timeout after 10s.
  * @retval HAL status
  */
HAL_StatusTypeDef gpio_interrupt_handler(	UART_HandleTypeDef* huart, ADC_HandleTypeDef* hadc, I2C_HandleTypeDef *hi2c,
											uint16_t LCD16x2_ADDR, RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate){
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b098      	sub	sp, #96	; 0x60
 80018e0:	af04      	add	r7, sp, #16
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	807b      	strh	r3, [r7, #2]
	uint32_t reftime = HAL_GetTick();
 80018ea:	f001 f9c5 	bl	8002c78 <HAL_GetTick>
 80018ee:	64f8      	str	r0, [r7, #76]	; 0x4c
	button_input button = NOBUTTON;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t send_message[ARRAYSIZE] = {0};
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	2229      	movs	r2, #41	; 0x29
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f005 f9d0 	bl	8006ca8 <memset>

	set_bl_lcd(hi2c, LCD16x2_ADDR, BACKLIGHT_ON);
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	22ff      	movs	r2, #255	; 0xff
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f9b2 	bl	8001c78 <set_bl_lcd>

	sprintf((char *) send_message, "Wait for input\r\n");
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	49b2      	ldr	r1, [pc, #712]	; (8001be4 <gpio_interrupt_handler+0x308>)
 800191a:	4618      	mov	r0, r3
 800191c:	f005 fe2c 	bl	8007578 <siprintf>
	HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fc2b 	bl	8000180 <strlen>
 800192a:	4603      	mov	r3, r0
 800192c:	b29a      	uxth	r2, r3
 800192e:	f107 0114 	add.w	r1, r7, #20
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f004 fc4b 	bl	80061d2 <HAL_UART_Transmit>
	send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fc1d 	bl	8000180 <strlen>
 8001946:	4603      	mov	r3, r0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	3b02      	subs	r3, #2
 800194c:	b2da      	uxtb	r2, r3
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	f107 0114 	add.w	r1, r7, #20
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fd07 	bl	8001368 <send_to_display>

	while(reftime + TIMEBUTTONTIMEOUT > HAL_GetTick()){
 800195a:	e0f9      	b.n	8001b50 <gpio_interrupt_handler+0x274>
		/*
		 * get state of buttons till timeout is reached
		 */
		button = get_button_input(hi2c, LCD16x2_ADDR);
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f94f 	bl	8001c04 <get_button_input>
 8001966:	4603      	mov	r3, r0
 8001968:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(button != NOBUTTON){
 800196c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80ed 	beq.w	8001b50 <gpio_interrupt_handler+0x274>
			if(button == BUTTON_1){
 8001976:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800197a:	2b01      	cmp	r3, #1
 800197c:	d11a      	bne.n	80019b4 <gpio_interrupt_handler+0xd8>
				uint8_t timebuf[1];
				get_time((char*) timebuf, hrtc, sTime, sDate);
 800197e:	f107 0510 	add.w	r5, r7, #16
 8001982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001984:	9303      	str	r3, [sp, #12]
 8001986:	466c      	mov	r4, sp
 8001988:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800198c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001998:	cb0c      	ldmia	r3, {r2, r3}
 800199a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800199c:	4628      	mov	r0, r5
 800199e:	f000 f989 	bl	8001cb4 <get_time>
				sprintf((char *)send_message, "%s\r\n", timebuf);
 80019a2:	f107 0210 	add.w	r2, r7, #16
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	498f      	ldr	r1, [pc, #572]	; (8001be8 <gpio_interrupt_handler+0x30c>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 fde3 	bl	8007578 <siprintf>
 80019b2:	e08f      	b.n	8001ad4 <gpio_interrupt_handler+0x1f8>
			}
			else if(button == BUTTON_2){
 80019b4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d12d      	bne.n	8001a18 <gpio_interrupt_handler+0x13c>
				float voltage;
				uint16_t adc_value = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

				HAL_ADC_Start(hadc);
 80019c2:	68b8      	ldr	r0, [r7, #8]
 80019c4:	f001 fae6 	bl	8002f94 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f001 fb41 	bl	8003054 <HAL_ADC_PollForConversion>
				adc_value = HAL_ADC_GetValue(hadc);
 80019d2:	68b8      	ldr	r0, [r7, #8]
 80019d4:	f001 fbce 	bl	8003174 <HAL_ADC_GetValue>
 80019d8:	4603      	mov	r3, r0
 80019da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				voltage = (adc_value / 4096.0f) * 3.3f;
 80019de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f922 	bl	8000c2c <__aeabi_i2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fa24 	bl	8000e3c <__aeabi_fdiv>
 80019f4:	4603      	mov	r3, r0
 80019f6:	497d      	ldr	r1, [pc, #500]	; (8001bec <gpio_interrupt_handler+0x310>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f96b 	bl	8000cd4 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
				sprintf((char *)send_message, "%lfV\r\n", voltage);
 8001a02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a04:	f7fe fd28 	bl	8000458 <__aeabi_f2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	f107 0014 	add.w	r0, r7, #20
 8001a10:	4977      	ldr	r1, [pc, #476]	; (8001bf0 <gpio_interrupt_handler+0x314>)
 8001a12:	f005 fdb1 	bl	8007578 <siprintf>
 8001a16:	e05d      	b.n	8001ad4 <gpio_interrupt_handler+0x1f8>
			}
			else if(button == BUTTON_3){
 8001a18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d159      	bne.n	8001ad4 <gpio_interrupt_handler+0x1f8>
				//start pump
				HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2140      	movs	r1, #64	; 0x40
 8001a24:	4873      	ldr	r0, [pc, #460]	; (8001bf4 <gpio_interrupt_handler+0x318>)
 8001a26:	f002 f895 	bl	8003b54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	4871      	ldr	r0, [pc, #452]	; (8001bf4 <gpio_interrupt_handler+0x318>)
 8001a30:	f002 f890 	bl	8003b54 <HAL_GPIO_WritePin>

				sprintf((char *)send_message, "Pump: ON\r\n");
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	496f      	ldr	r1, [pc, #444]	; (8001bf8 <gpio_interrupt_handler+0x31c>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f005 fd9c 	bl	8007578 <siprintf>
				HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fb9b 	bl	8000180 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f107 0114 	add.w	r1, r7, #20
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f004 fbbb 	bl	80061d2 <HAL_UART_Transmit>
				send_to_display(hi2c, (char*) send_message, strlen((char *) send_message), LCD16x2_ADDR);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fb8d 	bl	8000180 <strlen>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	f107 0114 	add.w	r1, r7, #20
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fc79 	bl	8001368 <send_to_display>

				HAL_Delay(1000 * TIMEPUMPISRUNNING_IN_S);
 8001a76:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a7a:	f001 f907 	bl	8002c8c <HAL_Delay>

				//stop pump
				HAL_GPIO_WritePin(Optokoppler_GPIO_Port, Optokoppler_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2140      	movs	r1, #64	; 0x40
 8001a82:	485c      	ldr	r0, [pc, #368]	; (8001bf4 <gpio_interrupt_handler+0x318>)
 8001a84:	f002 f866 	bl	8003b54 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2120      	movs	r1, #32
 8001a8c:	4859      	ldr	r0, [pc, #356]	; (8001bf4 <gpio_interrupt_handler+0x318>)
 8001a8e:	f002 f861 	bl	8003b54 <HAL_GPIO_WritePin>

				sprintf((char *)send_message, "Pump: OFF\r\n");
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4959      	ldr	r1, [pc, #356]	; (8001bfc <gpio_interrupt_handler+0x320>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fd6d 	bl	8007578 <siprintf>
				HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fb6c 	bl	8000180 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f107 0114 	add.w	r1, r7, #20
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f004 fb8c 	bl	80061d2 <HAL_UART_Transmit>
				send_to_display(hi2c, (char*) send_message, strlen((char *) send_message), LCD16x2_ADDR);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fb5e 	bl	8000180 <strlen>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	f107 0114 	add.w	r1, r7, #20
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fc4a 	bl	8001368 <send_to_display>
			}

			/*
			 * Buffers bouncing button
			 */
			get_button_input(hi2c, LCD16x2_ADDR);
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f893 	bl	8001c04 <get_button_input>

			HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fb4c 	bl	8000180 <strlen>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	f107 0114 	add.w	r1, r7, #20
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f004 fb6c 	bl	80061d2 <HAL_UART_Transmit>
			send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb3e 	bl	8000180 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	f107 0114 	add.w	r1, r7, #20
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fc28 	bl	8001368 <send_to_display>

			while(1){
				if(get_button_input(hi2c, LCD16x2_ADDR) != NOBUTTON) break;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f871 	bl	8001c04 <get_button_input>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d100      	bne.n	8001b2a <gpio_interrupt_handler+0x24e>
 8001b28:	e7f6      	b.n	8001b18 <gpio_interrupt_handler+0x23c>
 8001b2a:	bf00      	nop
			}

			/*
			 * Buffers bouncing button
			 */
			get_button_input(hi2c, LCD16x2_ADDR);
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f867 	bl	8001c04 <get_button_input>

			/*
			 * Backlight off, clears screen and return
			 */
			clear_screen(hi2c, LCD16x2_ADDR);
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f95e 	bl	8001dfc <clear_screen>
			set_bl_lcd(hi2c, LCD16x2_ADDR, BACKLIGHT_OFF);
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	2200      	movs	r2, #0
 8001b44:	4619      	mov	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f896 	bl	8001c78 <set_bl_lcd>
			return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e045      	b.n	8001bdc <gpio_interrupt_handler+0x300>
	while(reftime + TIMEBUTTONTIMEOUT > HAL_GetTick()){
 8001b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b52:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8001b56:	3410      	adds	r4, #16
 8001b58:	f001 f88e 	bl	8002c78 <HAL_GetTick>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	f63f aefc 	bhi.w	800195c <gpio_interrupt_handler+0x80>
		}
	}

	sprintf((char *) send_message, "Timeout.\r\n");
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4925      	ldr	r1, [pc, #148]	; (8001c00 <gpio_interrupt_handler+0x324>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f005 fd04 	bl	8007578 <siprintf>
	HAL_UART_Transmit(huart, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fb03 	bl	8000180 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	f107 0114 	add.w	r1, r7, #20
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f004 fb23 	bl	80061d2 <HAL_UART_Transmit>
	send_to_display(hi2c, (char*) send_message, strlen((char *) send_message)-2, LCD16x2_ADDR);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe faf5 	bl	8000180 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3b02      	subs	r3, #2
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	f107 0114 	add.w	r1, r7, #20
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff fbdf 	bl	8001368 <send_to_display>

	while(1){
		if(get_button_input(hi2c, LCD16x2_ADDR) != NOBUTTON) break;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f828 	bl	8001c04 <get_button_input>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <gpio_interrupt_handler+0x2e6>
		else HAL_Delay(10);
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f001 f866 	bl	8002c8c <HAL_Delay>
		if(get_button_input(hi2c, LCD16x2_ADDR) != NOBUTTON) break;
 8001bc0:	e7f3      	b.n	8001baa <gpio_interrupt_handler+0x2ce>
 8001bc2:	bf00      	nop
	}

	/*
	 * Backlight off, clears screen and return
	 */
	clear_screen(hi2c, LCD16x2_ADDR);
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f917 	bl	8001dfc <clear_screen>
	set_bl_lcd(hi2c, LCD16x2_ADDR, BACKLIGHT_OFF);
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f84f 	bl	8001c78 <set_bl_lcd>
	return HAL_TIMEOUT; //Timeout
 8001bda:	2303      	movs	r3, #3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3750      	adds	r7, #80	; 0x50
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bdb0      	pop	{r4, r5, r7, pc}
 8001be4:	08009b48 	.word	0x08009b48
 8001be8:	08009b5c 	.word	0x08009b5c
 8001bec:	40533333 	.word	0x40533333
 8001bf0:	08009b64 	.word	0x08009b64
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	08009b6c 	.word	0x08009b6c
 8001bfc:	08009b78 	.word	0x08009b78
 8001c00:	08009b84 	.word	0x08009b84

08001c04 <get_button_input>:
/**
  * @brief Request status of buttons
  * @note Can only decode one button at a time
  * @retval Code of button
  */
button_input get_button_input(I2C_HandleTypeDef *hi2c, uint16_t LCD16x2_ADDR){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
	uint8_t send_message[] = {GET_BUT};
 8001c10:	2305      	movs	r3, #5
 8001c12:	733b      	strb	r3, [r7, #12]
	int buttonstate[] = {0xf};
 8001c14:	230f      	movs	r3, #15
 8001c16:	60bb      	str	r3, [r7, #8]

	/*
	 * request and receive button states
	 */
	HAL_I2C_Master_Transmit(hi2c, LCD16x2_ADDR , send_message, 1, HAL_MAX_DELAY);
 8001c18:	f107 020c 	add.w	r2, r7, #12
 8001c1c:	8879      	ldrh	r1, [r7, #2]
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2301      	movs	r3, #1
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f002 f908 	bl	8003e3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, LCD16x2_ADDR , (uint8_t *) buttonstate, 1, HAL_MAX_DELAY);
 8001c2c:	f107 0208 	add.w	r2, r7, #8
 8001c30:	8879      	ldrh	r1, [r7, #2]
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f002 f9fc 	bl	8004038 <HAL_I2C_Master_Receive>

	HAL_Delay(100);
 8001c40:	2064      	movs	r0, #100	; 0x64
 8001c42:	f001 f823 	bl	8002c8c <HAL_Delay>

	if(buttonstate[0] == 0xe) return BUTTON_1;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b0e      	cmp	r3, #14
 8001c4a:	d101      	bne.n	8001c50 <get_button_input+0x4c>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e00f      	b.n	8001c70 <get_button_input+0x6c>
	else if(buttonstate[0] == 0xd) return BUTTON_2;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b0d      	cmp	r3, #13
 8001c54:	d101      	bne.n	8001c5a <get_button_input+0x56>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e00a      	b.n	8001c70 <get_button_input+0x6c>
	else if(buttonstate[0] == 0xb) return BUTTON_3;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b0b      	cmp	r3, #11
 8001c5e:	d101      	bne.n	8001c64 <get_button_input+0x60>
 8001c60:	2303      	movs	r3, #3
 8001c62:	e005      	b.n	8001c70 <get_button_input+0x6c>
	else if(buttonstate[0] == 0x7) return BUTTON_4;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b07      	cmp	r3, #7
 8001c68:	d101      	bne.n	8001c6e <get_button_input+0x6a>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e000      	b.n	8001c70 <get_button_input+0x6c>
	else return NOBUTTON;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <set_bl_lcd>:
/**
  * @brief Set Background of LCD-Display
  * @note value should be in range from 0 to 255
  * @retval none
  */
void set_bl_lcd(I2C_HandleTypeDef *hi2c, uint16_t LCD16x2_ADDR, uint8_t value){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
	uint8_t send_message[2];

	send_message[0] = SET_BL;
 8001c88:	2362      	movs	r3, #98	; 0x62
 8001c8a:	733b      	strb	r3, [r7, #12]
	send_message[1] = value;
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(hi2c, LCD16x2_ADDR, send_message, 2, HAL_MAX_DELAY);
 8001c90:	f107 020c 	add.w	r2, r7, #12
 8001c94:	8879      	ldrh	r1, [r7, #2]
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f002 f8cc 	bl	8003e3c <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001ca4:	2064      	movs	r0, #100	; 0x64
 8001ca6:	f000 fff1 	bl	8002c8c <HAL_Delay>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <get_time>:
/**
  * @brief Get time
  * @note Format: dd:hh:mm:ss
  * @retval none
  */
void get_time(char* string, RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate){
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af02      	add	r7, sp, #8
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
 8001cc0:	f107 0110 	add.w	r1, r7, #16
 8001cc4:	e881 000c 	stmia.w	r1, {r2, r3}
//	uint8_t days   = (uint8_t) ((milliseconds / (1000*60*60*24)));
//	//sprintf(string, "%d:%d:%d:%d:%d", days, hours, minutes, seconds, milliseconds); //with milliseconds
//	sprintf(string, "%02d:%02d:%02d:%02d", days, hours, minutes, seconds);	//without milliseconds

	/*Use feature from stm. Realtime clock, counts even in stop/sleep mode*/
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f107 0110 	add.w	r1, r7, #16
 8001cce:	6838      	ldr	r0, [r7, #0]
 8001cd0:	f003 ff83 	bl	8005bda <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6838      	ldr	r0, [r7, #0]
 8001cde:	f004 f877 	bl	8005dd0 <HAL_RTC_GetDate>
	sprintf(string, "%02d:%02d:%02d:%02d", sDate.WeekDay-1, sTime.Hours, sTime.Minutes, sTime.Seconds);	//without milliseconds
 8001ce2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ce6:	1e5a      	subs	r2, r3, #1
 8001ce8:	7c3b      	ldrb	r3, [r7, #16]
 8001cea:	4618      	mov	r0, r3
 8001cec:	7c7b      	ldrb	r3, [r7, #17]
 8001cee:	7cb9      	ldrb	r1, [r7, #18]
 8001cf0:	9101      	str	r1, [sp, #4]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4905      	ldr	r1, [pc, #20]	; (8001d0c <get_time+0x58>)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f005 fc3d 	bl	8007578 <siprintf>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d08:	b002      	add	sp, #8
 8001d0a:	4770      	bx	lr
 8001d0c:	08009b90 	.word	0x08009b90

08001d10 <get_time_in_int>:
/**
  * @brief Get time in seconds
  * @note Better to be compared to other times
  * @retval none
  */
void get_time_in_int(uint16_t* time, RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate){
 8001d10:	b082      	sub	sp, #8
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
 8001d1c:	f107 0110 	add.w	r1, r7, #16
 8001d20:	e881 000c 	stmia.w	r1, {r2, r3}
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f107 0110 	add.w	r1, r7, #16
 8001d2a:	6838      	ldr	r0, [r7, #0]
 8001d2c:	f003 ff55 	bl	8005bda <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 8001d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d34:	2200      	movs	r2, #0
 8001d36:	4619      	mov	r1, r3
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f004 f849 	bl	8005dd0 <HAL_RTC_GetDate>
	*time = sTime.Seconds + sTime.Minutes*60 + sTime.Hours*60*60;
 8001d3e:	7cbb      	ldrb	r3, [r7, #18]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	7c3b      	ldrb	r3, [r7, #16]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4619      	mov	r1, r3
 8001d48:	0109      	lsls	r1, r1, #4
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	0109      	lsls	r1, r1, #4
 8001d50:	1acb      	subs	r3, r1, r3
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	b299      	uxth	r1, r3
 8001d56:	7c7b      	ldrb	r3, [r7, #17]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	0100      	lsls	r0, r0, #4
 8001d5e:	1ac3      	subs	r3, r0, r3
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	440b      	add	r3, r1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	801a      	strh	r2, [r3, #0]
	// maybe weekday and month have also be added or rtc reset after some time
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d7a:	b002      	add	sp, #8
 8001d7c:	4770      	bx	lr

08001d7e <should_water>:

/**
  * @brief Decides if plant should be watered based on the time of last watering
  * @retval bool
  */
int should_water(uint16_t* previous_time, uint16_t waittime, RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate){
 8001d7e:	b082      	sub	sp, #8
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	817b      	strh	r3, [r7, #10]
	uint16_t currenttime=0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	82fb      	strh	r3, [r7, #22]

	get_time_in_int(&currenttime, hrtc, sTime, sDate);
 8001d94:	f107 0516 	add.w	r5, r7, #22
 8001d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9a:	9303      	str	r3, [sp, #12]
 8001d9c:	466c      	mov	r4, sp
 8001d9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dae:	cb0c      	ldmia	r3, {r2, r3}
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4628      	mov	r0, r5
 8001db4:	f7ff ffac 	bl	8001d10 <get_time_in_int>

	if(*previous_time + waittime < currenttime){
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	897b      	ldrh	r3, [r7, #10]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	8afa      	ldrh	r2, [r7, #22]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	da11      	bge.n	8001dec <should_water+0x6e>
		get_time_in_int(previous_time, hrtc, sTime, sDate); // write current time in variable previous_time of watering
 8001dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dca:	9303      	str	r3, [sp, #12]
 8001dcc:	466c      	mov	r4, sp
 8001dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	cb0c      	ldmia	r3, {r2, r3}
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff ff94 	bl	8001d10 <get_time_in_int>
		return 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <should_water+0x70>
	}
//	else if(sTime.Hours>20) return 0; //dont't water after 20:00. Real time has to be initialized
	else return 1;
 8001dec:	2301      	movs	r3, #1
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001df8:	b002      	add	sp, #8
 8001dfa:	4770      	bx	lr

08001dfc <clear_screen>:

/**
  * @brief Clears all contents of screen
  * @retval Hal status
  */
HAL_StatusTypeDef clear_screen(I2C_HandleTypeDef *hi2c, uint16_t LCD16x2_ADDR){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
	  uint8_t send_message[] = {LCD_CLR};
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	733b      	strb	r3, [r7, #12]
	  if(HAL_I2C_Master_Transmit(hi2c, LCD16x2_ADDR , send_message, 1, HAL_MAX_DELAY) != HAL_OK) return HAL_ERROR;
 8001e0c:	f107 020c 	add.w	r2, r7, #12
 8001e10:	8879      	ldrh	r1, [r7, #2]
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f002 f80e 	bl	8003e3c <HAL_I2C_Master_Transmit>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <clear_screen+0x2e>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e003      	b.n	8001e32 <clear_screen+0x36>
	  HAL_Delay(100);
 8001e2a:	2064      	movs	r0, #100	; 0x64
 8001e2c:	f000 ff2e 	bl	8002c8c <HAL_Delay>
	  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

/*
 * Interrupt Handler for serial Connection with PC for manually control pump, can't trigger exti-interrupt to wake up currently. Only nvic
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	/*
	 * Restart System Clock after it was disabled in stop mode
	 */
	SystemClock_Config ();
 8001e44:	f000 fa36 	bl	80022b4 <SystemClock_Config>
	HAL_ResumeTick();
 8001e48:	f000 ff50 	bl	8002cec <HAL_ResumeTick>

	mode=KEYBOARD_INTERRUPT;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_UART_RxCpltCallback+0x20>)
 8001e4e:	2205      	movs	r2, #5
 8001e50:	701a      	strb	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000000 	.word	0x20000000

08001e60 <HAL_RTCEx_WakeUpTimerEventCallback>:


/*
 * Interrupt Handler for RTC WakeUp
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	/*
	 * Restart System Clock after it was disabled in stop mode
	 */
	SystemClock_Config();
 8001e68:	f000 fa24 	bl	80022b4 <SystemClock_Config>
	HAL_ResumeTick();
 8001e6c:	f000 ff3e 	bl	8002cec <HAL_ResumeTick>
	/*
	 * RTC Interrupt should not interrupt other interrupt handlers
	 */
	if(mode==UNKNOWN) mode=TIMER_INTERRUPT;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b07      	cmp	r3, #7
 8001e76:	d102      	bne.n	8001e7e <HAL_RTCEx_WakeUpTimerEventCallback+0x1e>
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_SetWakeUpTimer_IT(hrtc, 0x708000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000000 	.word	0x20000000

08001e8c <HAL_GPIO_EXTI_Callback>:

/*
 * Interrupt Handler for external gpio interrupt with button on lcd-display
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
	/*
	 * Restart System Clock after it was disabled in stop mode
	 */
	SystemClock_Config();
 8001e96:	f000 fa0d 	bl	80022b4 <SystemClock_Config>
	HAL_ResumeTick();
 8001e9a:	f000 ff27 	bl	8002cec <HAL_ResumeTick>

	if(GPIO_Pin == LCD_Botton_Pin){
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	2b40      	cmp	r3, #64	; 0x40
 8001ea2:	d102      	bne.n	8001eaa <HAL_GPIO_EXTI_Callback+0x1e>
		mode=BUTTON_3_INTERRUPT;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	701a      	strb	r2, [r3, #0]
	}
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	b09b      	sub	sp, #108	; 0x6c
 8001ebc:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	uint8_t send_message[ARRAYSIZE] = {0};
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	2229      	movs	r2, #41	; 0x29
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 feec 	bl	8006ca8 <memset>
	HAL_StatusTypeDef returnmessage = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint16_t waittime = TIMEAFTERWATERING_IN_MIN * 60;
 8001ed6:	233c      	movs	r3, #60	; 0x3c
 8001ed8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eda:	f000 fe68 	bl	8002bae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ede:	f000 f9e9 	bl	80022b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee2:	f000 fb63 	bl	80025ac <MX_GPIO_Init>
  MX_ADC_Init();
 8001ee6:	f000 fa49 	bl	800237c <MX_ADC_Init>
  MX_I2C1_Init();
 8001eea:	f000 fa9f 	bl	800242c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001eee:	f000 fb33 	bl	8002558 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001ef2:	f000 fac9 	bl	8002488 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_UART_Receive_IT(&huart2, receive_message_buf, sizeof(receive_message_buf)) != HAL_OK) {
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	49b8      	ldr	r1, [pc, #736]	; (80021dc <main+0x324>)
 8001efa:	48b9      	ldr	r0, [pc, #740]	; (80021e0 <main+0x328>)
 8001efc:	f004 f9fb 	bl	80062f6 <HAL_UART_Receive_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d013      	beq.n	8001f2e <main+0x76>
    	sprintf((char *) send_message, "Error UART IT!\r\n");
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	49b6      	ldr	r1, [pc, #728]	; (80021e4 <main+0x32c>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 fb33 	bl	8007578 <siprintf>
    	HAL_UART_Transmit(&huart2, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe f932 	bl	8000180 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f107 0108 	add.w	r1, r7, #8
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	48ad      	ldr	r0, [pc, #692]	; (80021e0 <main+0x328>)
 8001f2a:	f004 f952 	bl	80061d2 <HAL_UART_Transmit>
//  }

  /*
   * Initialize last_time_watered
   */
  get_time_in_int(&last_time_watered, &hrtc, sTime, sDate);
 8001f2e:	4bae      	ldr	r3, [pc, #696]	; (80021e8 <main+0x330>)
 8001f30:	4aae      	ldr	r2, [pc, #696]	; (80021ec <main+0x334>)
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	9203      	str	r2, [sp, #12]
 8001f36:	466c      	mov	r4, sp
 8001f38:	f103 0208 	add.w	r2, r3, #8
 8001f3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f42:	cb0c      	ldmia	r3, {r2, r3}
 8001f44:	49aa      	ldr	r1, [pc, #680]	; (80021f0 <main+0x338>)
 8001f46:	48ab      	ldr	r0, [pc, #684]	; (80021f4 <main+0x33c>)
 8001f48:	f7ff fee2 	bl	8001d10 <get_time_in_int>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  //LCD_Write test message
	  HAL_Delay(100);
 8001f4c:	2064      	movs	r0, #100	; 0x64
 8001f4e:	f000 fe9d 	bl	8002c8c <HAL_Delay>
	  char* test = "uC is running!";
 8001f52:	4ba9      	ldr	r3, [pc, #676]	; (80021f8 <main+0x340>)
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
	  returnmessage = send_to_display(&hi2c1, test, strlen((char *) test), LCD16x2_ADDR);
 8001f56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f58:	f7fe f912 	bl	8000180 <strlen>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	2360      	movs	r3, #96	; 0x60
 8001f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f64:	48a5      	ldr	r0, [pc, #660]	; (80021fc <main+0x344>)
 8001f66:	f7ff f9ff 	bl	8001368 <send_to_display>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  if(returnmessage != HAL_OK){
 8001f70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d015      	beq.n	8001fa4 <main+0xec>
		  sprintf((char *)send_message,"Error write: 0x%x\r\n", returnmessage);
 8001f78:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	499f      	ldr	r1, [pc, #636]	; (8002200 <main+0x348>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f005 faf8 	bl	8007578 <siprintf>
		  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe f8f7 	bl	8000180 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	f107 0108 	add.w	r1, r7, #8
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	4890      	ldr	r0, [pc, #576]	; (80021e0 <main+0x328>)
 8001fa0:	f004 f917 	bl	80061d2 <HAL_UART_Transmit>

	  /*
	   * Check if Flag was set and which one
	   * On first run this sequence is run, to ensure connection to display
	   */
	  if(mode==FIRST_BOOT){
 8001fa4:	4b97      	ldr	r3, [pc, #604]	; (8002204 <main+0x34c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b06      	cmp	r3, #6
 8001faa:	d16b      	bne.n	8002084 <main+0x1cc>
		  sprintf((char *) send_message, "Controller was restarted or firstly booted\r\n");
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	4995      	ldr	r1, [pc, #596]	; (8002208 <main+0x350>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f005 fae0 	bl	8007578 <siprintf>
		  HAL_UART_Transmit(&huart2, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe f8df 	bl	8000180 <strlen>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	f107 0108 	add.w	r1, r7, #8
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	4884      	ldr	r0, [pc, #528]	; (80021e0 <main+0x328>)
 8001fd0:	f004 f8ff 	bl	80061d2 <HAL_UART_Transmit>

		  /*
		   * LCD16x2 get ID to ensure that display is connected correctly, doesn't work on first run??
		   */
		  send_message[0] = GET_ID;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	723b      	strb	r3, [r7, #8]

		  returnmessage = HAL_I2C_Master_Transmit(&hi2c1, LCD16x2_ADDR , send_message, 1, HAL_MAX_DELAY);
 8001fd8:	2160      	movs	r1, #96	; 0x60
 8001fda:	f107 0208 	add.w	r2, r7, #8
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	4885      	ldr	r0, [pc, #532]	; (80021fc <main+0x344>)
 8001fe8:	f001 ff28 	bl	8003e3c <HAL_I2C_Master_Transmit>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  if(returnmessage != HAL_OK){
 8001ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <main+0x154>
			  sprintf((char *)send_message,"Error ID Tx: 0x%x\r\n", returnmessage);
 8001ffa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	4982      	ldr	r1, [pc, #520]	; (800220c <main+0x354>)
 8002004:	4618      	mov	r0, r3
 8002006:	f005 fab7 	bl	8007578 <siprintf>
 800200a:	e02c      	b.n	8002066 <main+0x1ae>
		  }
		  else{
			  returnmessage = HAL_I2C_Master_Receive(&hi2c1, LCD16x2_ADDR, send_message, 1, HAL_MAX_DELAY);
 800200c:	2160      	movs	r1, #96	; 0x60
 800200e:	f107 0208 	add.w	r2, r7, #8
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	4878      	ldr	r0, [pc, #480]	; (80021fc <main+0x344>)
 800201c:	f002 f80c 	bl	8004038 <HAL_I2C_Master_Receive>
 8002020:	4603      	mov	r3, r0
 8002022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			  if(returnmessage != HAL_OK) sprintf((char *)send_message,"Error ID Rx: 0x%x\r\n", returnmessage);
 8002026:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <main+0x186>
 800202e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	4976      	ldr	r1, [pc, #472]	; (8002210 <main+0x358>)
 8002038:	4618      	mov	r0, r3
 800203a:	f005 fa9d 	bl	8007578 <siprintf>
			  if(send_message[0]==0x65) sprintf((char *)send_message,"Display connected correct. LCD-ID: 0x%x\r\n", send_message[0]);
 800203e:	7a3b      	ldrb	r3, [r7, #8]
 8002040:	2b65      	cmp	r3, #101	; 0x65
 8002042:	d108      	bne.n	8002056 <main+0x19e>
 8002044:	7a3b      	ldrb	r3, [r7, #8]
 8002046:	461a      	mov	r2, r3
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	4971      	ldr	r1, [pc, #452]	; (8002214 <main+0x35c>)
 800204e:	4618      	mov	r0, r3
 8002050:	f005 fa92 	bl	8007578 <siprintf>
 8002054:	e007      	b.n	8002066 <main+0x1ae>
			  else sprintf((char *)send_message,"Display connected incorrect. LCD-ID: 0x%x\r\n", send_message[0]);
 8002056:	7a3b      	ldrb	r3, [r7, #8]
 8002058:	461a      	mov	r2, r3
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	496e      	ldr	r1, [pc, #440]	; (8002218 <main+0x360>)
 8002060:	4618      	mov	r0, r3
 8002062:	f005 fa89 	bl	8007578 <siprintf>
		  }
		  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe f888 	bl	8000180 <strlen>
 8002070:	4603      	mov	r3, r0
 8002072:	b29a      	uxth	r2, r3
 8002074:	f107 0108 	add.w	r1, r7, #8
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	4858      	ldr	r0, [pc, #352]	; (80021e0 <main+0x328>)
 800207e:	f004 f8a8 	bl	80061d2 <HAL_UART_Transmit>
 8002082:	e0e7      	b.n	8002254 <main+0x39c>
	  }
	  // Sequence for interrupt triggered by rtc-timer
	  else if(mode==TIMER_INTERRUPT){
 8002084:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <main+0x34c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d137      	bne.n	80020fc <main+0x244>
		  returnmessage = timer_interrupt_handler(&huart2, &hadc, &hi2c1, waittime, &last_time_watered, LCD16x2_ADDR, &hrtc, sTime, sDate);
 800208c:	2360      	movs	r3, #96	; 0x60
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 8002092:	4b56      	ldr	r3, [pc, #344]	; (80021ec <main+0x334>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	9308      	str	r3, [sp, #32]
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <main+0x330>)
 800209a:	ac03      	add	r4, sp, #12
 800209c:	461d      	mov	r5, r3
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	682b      	ldr	r3, [r5, #0]
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <main+0x338>)
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	4b51      	ldr	r3, [pc, #324]	; (80021f4 <main+0x33c>)
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4633      	mov	r3, r6
 80020b4:	4a51      	ldr	r2, [pc, #324]	; (80021fc <main+0x344>)
 80020b6:	4959      	ldr	r1, [pc, #356]	; (800221c <main+0x364>)
 80020b8:	4849      	ldr	r0, [pc, #292]	; (80021e0 <main+0x328>)
 80020ba:	f7ff f9ef 	bl	800149c <timer_interrupt_handler>
 80020be:	4603      	mov	r3, r0
 80020c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  if(returnmessage != HAL_OK){
 80020c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80c3 	beq.w	8002254 <main+0x39c>
			  sprintf((char *)send_message,"Error timinthandl: 0x%x\r\n", returnmessage);
 80020ce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	4952      	ldr	r1, [pc, #328]	; (8002220 <main+0x368>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f005 fa4d 	bl	8007578 <siprintf>
			  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f84c 	bl	8000180 <strlen>
 80020e8:	4603      	mov	r3, r0
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	f107 0108 	add.w	r1, r7, #8
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	483a      	ldr	r0, [pc, #232]	; (80021e0 <main+0x328>)
 80020f6:	f004 f86c 	bl	80061d2 <HAL_UART_Transmit>
 80020fa:	e0ab      	b.n	8002254 <main+0x39c>

	  /*
	   * sequence triggered by buttons on lcd-display, i2c slave cannot trigger interrupt at master.
	   * Solder wire from button to gpio pin of uC to trigger interrupt that way
	   */
	  else if(mode==BUTTON_1_INTERRUPT || mode==BUTTON_2_INTERRUPT || mode==BUTTON_3_INTERRUPT || mode==BUTTON_4_INTERRUPT){
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <main+0x34c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d00b      	beq.n	800211c <main+0x264>
 8002104:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <main+0x34c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d007      	beq.n	800211c <main+0x264>
 800210c:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <main+0x34c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d003      	beq.n	800211c <main+0x264>
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <main+0x34c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d131      	bne.n	8002180 <main+0x2c8>
		  returnmessage = gpio_interrupt_handler(&huart2, &hadc, &hi2c1, LCD16x2_ADDR, &hrtc, sTime, sDate);
 800211c:	2660      	movs	r6, #96	; 0x60
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <main+0x334>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	9306      	str	r3, [sp, #24]
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <main+0x330>)
 8002126:	ac01      	add	r4, sp, #4
 8002128:	461d      	mov	r5, r3
 800212a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212e:	682b      	ldr	r3, [r5, #0]
 8002130:	6023      	str	r3, [r4, #0]
 8002132:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <main+0x338>)
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4633      	mov	r3, r6
 8002138:	4a30      	ldr	r2, [pc, #192]	; (80021fc <main+0x344>)
 800213a:	4938      	ldr	r1, [pc, #224]	; (800221c <main+0x364>)
 800213c:	4828      	ldr	r0, [pc, #160]	; (80021e0 <main+0x328>)
 800213e:	f7ff fbcd 	bl	80018dc <gpio_interrupt_handler>
 8002142:	4603      	mov	r3, r0
 8002144:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  if(returnmessage != HAL_OK){
 8002148:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8081 	beq.w	8002254 <main+0x39c>
			  sprintf((char *)send_message,"Error button inthandl: 0x%x\r\n", returnmessage);
 8002152:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002156:	f107 0308 	add.w	r3, r7, #8
 800215a:	4932      	ldr	r1, [pc, #200]	; (8002224 <main+0x36c>)
 800215c:	4618      	mov	r0, r3
 800215e:	f005 fa0b 	bl	8007578 <siprintf>
			  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f80a 	bl	8000180 <strlen>
 800216c:	4603      	mov	r3, r0
 800216e:	b29a      	uxth	r2, r3
 8002170:	f107 0108 	add.w	r1, r7, #8
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	4819      	ldr	r0, [pc, #100]	; (80021e0 <main+0x328>)
 800217a:	f004 f82a 	bl	80061d2 <HAL_UART_Transmit>
		  if(returnmessage != HAL_OK){
 800217e:	e069      	b.n	8002254 <main+0x39c>
		  }
	  }
	  // sequence for UART interrupt, cannot wake up uC, because uses global nvic interrupt not exti line
	  else if(mode==KEYBOARD_INTERRUPT){
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <main+0x34c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d151      	bne.n	800222c <main+0x374>
		  returnmessage = uart_interrupt_handler(receive_message_buf[0], &huart2, &hi2c1, LCD16x2_ADDR);
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <main+0x324>)
 800218a:	7818      	ldrb	r0, [r3, #0]
 800218c:	2360      	movs	r3, #96	; 0x60
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <main+0x344>)
 8002190:	4913      	ldr	r1, [pc, #76]	; (80021e0 <main+0x328>)
 8002192:	f7ff fadb 	bl	800174c <uart_interrupt_handler>
 8002196:	4603      	mov	r3, r0
 8002198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		  if(returnmessage != HAL_OK){
 800219c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <main+0x318>
			  sprintf((char *)send_message,"Error uartinthandl: 0x%x\r\n", returnmessage);
 80021a4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	491e      	ldr	r1, [pc, #120]	; (8002228 <main+0x370>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 f9e2 	bl	8007578 <siprintf>
			  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fd ffe1 	bl	8000180 <strlen>
 80021be:	4603      	mov	r3, r0
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	f107 0108 	add.w	r1, r7, #8
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <main+0x328>)
 80021cc:	f004 f801 	bl	80061d2 <HAL_UART_Transmit>
		  }
		  HAL_UART_Receive_IT(&huart2, receive_message_buf, sizeof(receive_message_buf));
 80021d0:	2201      	movs	r2, #1
 80021d2:	4902      	ldr	r1, [pc, #8]	; (80021dc <main+0x324>)
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <main+0x328>)
 80021d6:	f004 f88e 	bl	80062f6 <HAL_UART_Receive_IT>
 80021da:	e03b      	b.n	8002254 <main+0x39c>
 80021dc:	20000004 	.word	0x20000004
 80021e0:	200002cc 	.word	0x200002cc
 80021e4:	08009ba4 	.word	0x08009ba4
 80021e8:	20000310 	.word	0x20000310
 80021ec:	20000324 	.word	0x20000324
 80021f0:	200002ac 	.word	0x200002ac
 80021f4:	20000200 	.word	0x20000200
 80021f8:	08009bb8 	.word	0x08009bb8
 80021fc:	20000258 	.word	0x20000258
 8002200:	08009bc8 	.word	0x08009bc8
 8002204:	20000000 	.word	0x20000000
 8002208:	08009bdc 	.word	0x08009bdc
 800220c:	08009c0c 	.word	0x08009c0c
 8002210:	08009c20 	.word	0x08009c20
 8002214:	08009c34 	.word	0x08009c34
 8002218:	08009c60 	.word	0x08009c60
 800221c:	20000204 	.word	0x20000204
 8002220:	08009c8c 	.word	0x08009c8c
 8002224:	08009ca8 	.word	0x08009ca8
 8002228:	08009cc8 	.word	0x08009cc8
	  }
	  else{
		  sprintf((char *)send_message, "Something unexpected happend!\r\n");
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	491b      	ldr	r1, [pc, #108]	; (80022a0 <main+0x3e8>)
 8002232:	4618      	mov	r0, r3
 8002234:	f005 f9a0 	bl	8007578 <siprintf>
		  HAL_UART_Transmit(&huart2, send_message, strlen((char*)send_message), HAL_MAX_DELAY);
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	4618      	mov	r0, r3
 800223e:	f7fd ff9f 	bl	8000180 <strlen>
 8002242:	4603      	mov	r3, r0
 8002244:	b29a      	uxth	r2, r3
 8002246:	f107 0108 	add.w	r1, r7, #8
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	4815      	ldr	r0, [pc, #84]	; (80022a4 <main+0x3ec>)
 8002250:	f003 ffbf 	bl	80061d2 <HAL_UART_Transmit>
	  }

	  //LCD_Clear Display
	  clear_screen(&hi2c1, LCD16x2_ADDR);
 8002254:	2360      	movs	r3, #96	; 0x60
 8002256:	4619      	mov	r1, r3
 8002258:	4813      	ldr	r0, [pc, #76]	; (80022a8 <main+0x3f0>)
 800225a:	f7ff fdcf 	bl	8001dfc <clear_screen>
//		  HAL_UART_Transmit(&huart2, send_message, strlen((char*) send_message), HAL_MAX_DELAY);
//	  }
//
//	  HAL_Delay(100);

	  mode=UNKNOWN; //Reset interrupt_mode typedef
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <main+0x3f4>)
 8002260:	2207      	movs	r2, #7
 8002262:	701a      	strb	r2, [r3, #0]

	  sprintf((char *) send_message, "Entering Stop-Mode!\r\n");
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	4911      	ldr	r1, [pc, #68]	; (80022b0 <main+0x3f8>)
 800226a:	4618      	mov	r0, r3
 800226c:	f005 f984 	bl	8007578 <siprintf>
	  HAL_UART_Transmit(&huart2, send_message, strlen((char *) send_message), HAL_MAX_DELAY);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4618      	mov	r0, r3
 8002276:	f7fd ff83 	bl	8000180 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	f107 0108 	add.w	r1, r7, #8
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	4807      	ldr	r0, [pc, #28]	; (80022a4 <main+0x3ec>)
 8002288:	f003 ffa3 	bl	80061d2 <HAL_UART_Transmit>
	  /*Suspend Sys-Clock, because it would wake uC up on first pulse*/
	  HAL_SuspendTick();
 800228c:	f000 fd20 	bl	8002cd0 <HAL_SuspendTick>
	  /*Enter Stop-Mode*/
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002290:	2101      	movs	r1, #1
 8002292:	2001      	movs	r0, #1
 8002294:	f002 fc22 	bl	8004adc <HAL_PWR_EnterSTOPMode>
	  HAL_ResumeTick();
 8002298:	f000 fd28 	bl	8002cec <HAL_ResumeTick>
  {
 800229c:	e656      	b.n	8001f4c <main+0x94>
 800229e:	bf00      	nop
 80022a0:	08009ce4 	.word	0x08009ce4
 80022a4:	200002cc 	.word	0x200002cc
 80022a8:	20000258 	.word	0x20000258
 80022ac:	20000000 	.word	0x20000000
 80022b0:	08009d04 	.word	0x08009d04

080022b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b096      	sub	sp, #88	; 0x58
 80022b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022be:	2234      	movs	r2, #52	; 0x34
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 fcf0 	bl	8006ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e2:	4b25      	ldr	r3, [pc, #148]	; (8002378 <SystemClock_Config+0xc4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80022ea:	4a23      	ldr	r2, [pc, #140]	; (8002378 <SystemClock_Config+0xc4>)
 80022ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80022f2:	2306      	movs	r3, #6
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022f6:	2301      	movs	r3, #1
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022fa:	2301      	movs	r3, #1
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fe:	2310      	movs	r3, #16
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002302:	2302      	movs	r3, #2
 8002304:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002306:	2300      	movs	r3, #0
 8002308:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800230a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800230e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002310:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002314:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fc18 	bl	8004b50 <HAL_RCC_OscConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002326:	f000 f9f1 	bl	800270c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800232a:	230f      	movs	r3, #15
 800232c:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232e:	2303      	movs	r3, #3
 8002330:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f002 ff33 	bl	80051b0 <HAL_RCC_ClockConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002350:	f000 f9dc 	bl	800270c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002354:	2301      	movs	r3, #1
 8002356:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f003 f9eb 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800236c:	f000 f9ce 	bl	800270c <Error_Handler>
  }
}
 8002370:	bf00      	nop
 8002372:	3758      	adds	r7, #88	; 0x58
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40007000 	.word	0x40007000

0800237c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <MX_ADC_Init+0xa8>)
 800238e:	4a26      	ldr	r2, [pc, #152]	; (8002428 <MX_ADC_Init+0xac>)
 8002390:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <MX_ADC_Init+0xa8>)
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <MX_ADC_Init+0xa8>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <MX_ADC_Init+0xa8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <MX_ADC_Init+0xa8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <MX_ADC_Init+0xa8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <MX_ADC_Init+0xa8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <MX_ADC_Init+0xa8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <MX_ADC_Init+0xa8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_ADC_Init+0xa8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <MX_ADC_Init+0xa8>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <MX_ADC_Init+0xa8>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <MX_ADC_Init+0xa8>)
 80023da:	2210      	movs	r2, #16
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_ADC_Init+0xa8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_ADC_Init+0xa8>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80023ec:	480d      	ldr	r0, [pc, #52]	; (8002424 <MX_ADC_Init+0xa8>)
 80023ee:	f000 fc8b 	bl	8002d08 <HAL_ADC_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80023f8:	f000 f988 	bl	800270c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80023fc:	2304      	movs	r3, #4
 80023fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002400:	2301      	movs	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_ADC_Init+0xa8>)
 800240e:	f000 febd 	bl	800318c <HAL_ADC_ConfigChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8002418:	f000 f978 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000204 	.word	0x20000204
 8002428:	40012400 	.word	0x40012400

0800242c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <MX_I2C1_Init+0x50>)
 8002432:	4a13      	ldr	r2, [pc, #76]	; (8002480 <MX_I2C1_Init+0x54>)
 8002434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_I2C1_Init+0x50>)
 8002438:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_I2C1_Init+0x58>)
 800243a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MX_I2C1_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 96;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MX_I2C1_Init+0x50>)
 8002444:	2260      	movs	r2, #96	; 0x60
 8002446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_I2C1_Init+0x50>)
 800244a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800244e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <MX_I2C1_Init+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_I2C1_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <MX_I2C1_Init+0x50>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_I2C1_Init+0x50>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_I2C1_Init+0x50>)
 800246a:	f001 fba3 	bl	8003bb4 <HAL_I2C_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002474:	f000 f94a 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000258 	.word	0x20000258
 8002480:	40005400 	.word	0x40005400
 8002484:	000186a0 	.word	0x000186a0

08002488 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800249c:	2300      	movs	r3, #0
 800249e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <MX_RTC_Init+0xc8>)
 80024a2:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <MX_RTC_Init+0xcc>)
 80024a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <MX_RTC_Init+0xc8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <MX_RTC_Init+0xc8>)
 80024ae:	227c      	movs	r2, #124	; 0x7c
 80024b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 295;
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <MX_RTC_Init+0xc8>)
 80024b4:	f240 1227 	movw	r2, #295	; 0x127
 80024b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <MX_RTC_Init+0xc8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <MX_RTC_Init+0xc8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <MX_RTC_Init+0xc8>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024cc:	4820      	ldr	r0, [pc, #128]	; (8002550 <MX_RTC_Init+0xc8>)
 80024ce:	f003 fa3f 	bl	8005950 <HAL_RTC_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80024d8:	f000 f918 	bl	800270c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80024dc:	2300      	movs	r3, #0
 80024de:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2201      	movs	r2, #1
 80024f4:	4619      	mov	r1, r3
 80024f6:	4816      	ldr	r0, [pc, #88]	; (8002550 <MX_RTC_Init+0xc8>)
 80024f8:	f003 fabb 	bl	8005a72 <HAL_RTC_SetTime>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8002502:	f000 f903 	bl	800270c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002506:	2301      	movs	r3, #1
 8002508:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800250a:	2301      	movs	r3, #1
 800250c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800250e:	2301      	movs	r3, #1
 8002510:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002512:	2300      	movs	r3, #0
 8002514:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002516:	463b      	mov	r3, r7
 8002518:	2201      	movs	r2, #1
 800251a:	4619      	mov	r1, r3
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <MX_RTC_Init+0xc8>)
 800251e:	f003 fbb9 	bl	8005c94 <HAL_RTC_SetDate>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002528:	f000 f8f0 	bl	800270c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, SLEEPTIME, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800252c:	2200      	movs	r2, #0
 800252e:	f44f 31f0 	mov.w	r1, #122880	; 0x1e000
 8002532:	4807      	ldr	r0, [pc, #28]	; (8002550 <MX_RTC_Init+0xc8>)
 8002534:	f003 fd2a 	bl	8005f8c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_RTC_Init+0xba>
  {
    Error_Handler();
 800253e:	f000 f8e5 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_PWR_DisableSleepOnExit();
 8002542:	f002 faf7 	bl	8004b34 <HAL_PWR_DisableSleepOnExit>

  /* USER CODE END RTC_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200002ac 	.word	0x200002ac
 8002554:	40002800 	.word	0x40002800

08002558 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <MX_USART2_UART_Init+0x50>)
 8002560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 8002564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 800257e:	220c      	movs	r2, #12
 8002580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_USART2_UART_Init+0x4c>)
 8002590:	f003 fdd2 	bl	8006138 <HAL_UART_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800259a:	f000 f8b7 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002cc 	.word	0x200002cc
 80025a8:	40004400 	.word	0x40004400

080025ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	4b4d      	ldr	r3, [pc, #308]	; (80026f8 <MX_GPIO_Init+0x14c>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <MX_GPIO_Init+0x14c>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <MX_GPIO_Init+0x14c>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <MX_GPIO_Init+0x14c>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	4a46      	ldr	r2, [pc, #280]	; (80026f8 <MX_GPIO_Init+0x14c>)
 80025e0:	f043 0320 	orr.w	r3, r3, #32
 80025e4:	61d3      	str	r3, [r2, #28]
 80025e6:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <MX_GPIO_Init+0x14c>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <MX_GPIO_Init+0x14c>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <MX_GPIO_Init+0x14c>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	61d3      	str	r3, [r2, #28]
 80025fe:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <MX_GPIO_Init+0x14c>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <MX_GPIO_Init+0x14c>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4a3a      	ldr	r2, [pc, #232]	; (80026f8 <MX_GPIO_Init+0x14c>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	61d3      	str	r3, [r2, #28]
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <MX_GPIO_Init+0x14c>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <MX_GPIO_Init+0x14c>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <MX_GPIO_Init+0x14c>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <MX_GPIO_Init+0x14c>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Optokoppler_Pin, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	2160      	movs	r1, #96	; 0x60
 800263e:	482f      	ldr	r0, [pc, #188]	; (80026fc <MX_GPIO_Init+0x150>)
 8002640:	f001 fa88 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8002644:	f643 73bf 	movw	r3, #16319	; 0x3fbf
 8002648:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800264a:	2303      	movs	r3, #3
 800264c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4619      	mov	r1, r3
 8002658:	4829      	ldr	r0, [pc, #164]	; (8002700 <MX_GPIO_Init+0x154>)
 800265a:	f001 f8eb 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8
 800265e:	f649 7383 	movw	r3, #40835	; 0x9f83
 8002662:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002664:	2303      	movs	r3, #3
 8002666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4619      	mov	r1, r3
 8002672:	4822      	ldr	r0, [pc, #136]	; (80026fc <MX_GPIO_Init+0x150>)
 8002674:	f001 f8de 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Optokoppler_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Optokoppler_Pin;
 8002678:	2360      	movs	r3, #96	; 0x60
 800267a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267c:	2301      	movs	r3, #1
 800267e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	481b      	ldr	r0, [pc, #108]	; (80026fc <MX_GPIO_Init+0x150>)
 8002690:	f001 f8d0 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002694:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8002698:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800269a:	2303      	movs	r3, #3
 800269c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	4816      	ldr	r0, [pc, #88]	; (8002704 <MX_GPIO_Init+0x158>)
 80026aa:	f001 f8c3 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Botton_Pin */
  GPIO_InitStruct.Pin = LCD_Botton_Pin;
 80026ae:	2340      	movs	r3, #64	; 0x40
 80026b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_Botton_GPIO_Port, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	480f      	ldr	r0, [pc, #60]	; (8002700 <MX_GPIO_Init+0x154>)
 80026c4:	f001 f8b6 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026c8:	2304      	movs	r3, #4
 80026ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026cc:	2303      	movs	r3, #3
 80026ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	480b      	ldr	r0, [pc, #44]	; (8002708 <MX_GPIO_Init+0x15c>)
 80026dc:	f001 f8aa 	bl	8003834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2100      	movs	r1, #0
 80026e4:	2017      	movs	r0, #23
 80026e6:	f000 fff0 	bl	80036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026ea:	2017      	movs	r0, #23
 80026ec:	f001 f809 	bl	8003702 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020800 	.word	0x40020800
 8002704:	40020400 	.word	0x40020400
 8002708:	40020c00 	.word	0x40020c00

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002714:	e7fe      	b.n	8002714 <Error_Handler+0x8>
	...

08002718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_MspInit+0x5c>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_MspInit+0x5c>)
 8002724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002728:	6253      	str	r3, [r2, #36]	; 0x24
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_MspInit+0x5c>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_MspInit+0x5c>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_MspInit+0x5c>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_MspInit+0x5c>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_MspInit+0x5c>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_MspInit+0x5c>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6253      	str	r3, [r2, #36]	; 0x24
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_MspInit+0x5c>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002766:	2007      	movs	r0, #7
 8002768:	f000 ffa4 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a15      	ldr	r2, [pc, #84]	; (80027ec <HAL_ADC_MspInit+0x74>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d123      	bne.n	80027e2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	61d3      	str	r3, [r2, #28]
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_ADC_MspInit+0x78>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ca:	2310      	movs	r3, #16
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ce:	2303      	movs	r3, #3
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <HAL_ADC_MspInit+0x7c>)
 80027de:	f001 f829 	bl	8003834 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	; 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40012400 	.word	0x40012400
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000

080027f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a17      	ldr	r2, [pc, #92]	; (8002874 <HAL_I2C_MspInit+0x7c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d128      	bne.n	800286c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_I2C_MspInit+0x80>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a16      	ldr	r2, [pc, #88]	; (8002878 <HAL_I2C_MspInit+0x80>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	61d3      	str	r3, [r2, #28]
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_I2C_MspInit+0x80>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002838:	2312      	movs	r3, #18
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002844:	2304      	movs	r3, #4
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	480b      	ldr	r0, [pc, #44]	; (800287c <HAL_I2C_MspInit+0x84>)
 8002850:	f000 fff0 	bl	8003834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_I2C_MspInit+0x80>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_I2C_MspInit+0x80>)
 800285a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800285e:	6253      	str	r3, [r2, #36]	; 0x24
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_I2C_MspInit+0x80>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800286c:	bf00      	nop
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40005400 	.word	0x40005400
 8002878:	40023800 	.word	0x40023800
 800287c:	40020400 	.word	0x40020400

08002880 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_RTC_MspInit+0x30>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10a      	bne.n	80028a8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <HAL_RTC_MspInit+0x34>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	2003      	movs	r0, #3
 800289e:	f000 ff14 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80028a2:	2003      	movs	r0, #3
 80028a4:	f000 ff2d 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40002800 	.word	0x40002800
 80028b4:	424706d8 	.word	0x424706d8

080028b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_UART_MspInit+0x8c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d12f      	bne.n	800293a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_UART_MspInit+0x90>)
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	4a1a      	ldr	r2, [pc, #104]	; (8002948 <HAL_UART_MspInit+0x90>)
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	6253      	str	r3, [r2, #36]	; 0x24
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_UART_MspInit+0x90>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_UART_MspInit+0x90>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4a14      	ldr	r2, [pc, #80]	; (8002948 <HAL_UART_MspInit+0x90>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	61d3      	str	r3, [r2, #28]
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_UART_MspInit+0x90>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800290a:	230c      	movs	r3, #12
 800290c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002916:	2303      	movs	r3, #3
 8002918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800291a:	2307      	movs	r3, #7
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	4809      	ldr	r0, [pc, #36]	; (800294c <HAL_UART_MspInit+0x94>)
 8002926:	f000 ff85 	bl	8003834 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2026      	movs	r0, #38	; 0x26
 8002930:	f000 fecb 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002934:	2026      	movs	r0, #38	; 0x26
 8002936:	f000 fee4 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40004400 	.word	0x40004400
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <NMI_Handler+0x4>

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002996:	f000 f95d 	bl	8002c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <RTC_WKUP_IRQHandler+0x10>)
 80029a6:	f003 fba3 	bl	80060f0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200002ac 	.word	0x200002ac

080029b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_Botton_Pin);
 80029b8:	2040      	movs	r0, #64	; 0x40
 80029ba:	f001 f8e3 	bl	8003b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <USART2_IRQHandler+0x10>)
 80029ca:	f003 fcc5 	bl	8006358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200002cc 	.word	0x200002cc

080029d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return 1;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <_kill>:

int _kill(int pid, int sig)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029f0:	f004 f930 	bl	8006c54 <__errno>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2216      	movs	r2, #22
 80029f8:	601a      	str	r2, [r3, #0]
  return -1;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_exit>:

void _exit (int status)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffe7 	bl	80029e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a18:	e7fe      	b.n	8002a18 <_exit+0x12>

08002a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e00a      	b.n	8002a42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a2c:	f3af 8000 	nop.w
 8002a30:	4601      	mov	r1, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	60ba      	str	r2, [r7, #8]
 8002a38:	b2ca      	uxtb	r2, r1
 8002a3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	dbf0      	blt.n	8002a2c <_read+0x12>
  }

  return len;
 8002a4a:	687b      	ldr	r3, [r7, #4]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e009      	b.n	8002a7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	60ba      	str	r2, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3301      	adds	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	dbf1      	blt.n	8002a66 <_write+0x12>
  }
  return len;
 8002a82:	687b      	ldr	r3, [r7, #4]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <_close>:

int _close(int file)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <_isatty>:

int _isatty(int file)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <_sbrk+0x5c>)
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <_sbrk+0x60>)
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <_sbrk+0x64>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <_sbrk+0x64>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <_sbrk+0x68>)
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d207      	bcs.n	8002b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b1c:	f004 f89a 	bl	8006c54 <__errno>
 8002b20:	4603      	mov	r3, r0
 8002b22:	220c      	movs	r2, #12
 8002b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e009      	b.n	8002b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <_sbrk+0x64>)
 8002b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20014000 	.word	0x20014000
 8002b4c:	00000400 	.word	0x00000400
 8002b50:	20000328 	.word	0x20000328
 8002b54:	20000340 	.word	0x20000340

08002b58 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b64:	480c      	ldr	r0, [pc, #48]	; (8002b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b66:	490d      	ldr	r1, [pc, #52]	; (8002b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b8a:	f7ff ffe5 	bl	8002b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b8e:	f004 f867 	bl	8006c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b92:	f7ff f991 	bl	8001eb8 <main>
  bx lr
 8002b96:	4770      	bx	lr
  ldr r0, =_sdata
 8002b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b9c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002ba0:	0800a12c 	.word	0x0800a12c
  ldr r2, =_sbss
 8002ba4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002ba8:	20000340 	.word	0x20000340

08002bac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bac:	e7fe      	b.n	8002bac <ADC1_IRQHandler>

08002bae <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb8:	2003      	movs	r0, #3
 8002bba:	f000 fd7b 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 f80e 	bl	8002be0 <HAL_InitTick>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	71fb      	strb	r3, [r7, #7]
 8002bce:	e001      	b.n	8002bd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bd0:	f7ff fda2 	bl	8002718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_InitTick+0x68>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d022      	beq.n	8002c3a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_InitTick+0x6c>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_InitTick+0x68>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fd88 	bl	800371e <HAL_SYSTICK_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10f      	bne.n	8002c34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	d809      	bhi.n	8002c2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c22:	f000 fd52 	bl	80036ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_InitTick+0x70>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e007      	b.n	8002c3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	e004      	b.n	8002c3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e001      	b.n	8002c3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000010 	.word	0x20000010
 8002c4c:	20000008 	.word	0x20000008
 8002c50:	2000000c 	.word	0x2000000c

08002c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_IncTick+0x1c>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_IncTick+0x20>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <HAL_IncTick+0x1c>)
 8002c64:	6013      	str	r3, [r2, #0]
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	2000032c 	.word	0x2000032c
 8002c74:	20000010 	.word	0x20000010

08002c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c7c:	4b02      	ldr	r3, [pc, #8]	; (8002c88 <HAL_GetTick+0x10>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	2000032c 	.word	0x2000032c

08002c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff fff0 	bl	8002c78 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d004      	beq.n	8002cb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_Delay+0x40>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4413      	add	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cb0:	bf00      	nop
 8002cb2:	f7ff ffe1 	bl	8002c78 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d8f7      	bhi.n	8002cb2 <HAL_Delay+0x26>
  {
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000010 	.word	0x20000010

08002cd0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_SuspendTick+0x18>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a03      	ldr	r2, [pc, #12]	; (8002ce8 <HAL_SuspendTick+0x18>)
 8002cda:	f023 0302 	bic.w	r3, r3, #2
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e010 	.word	0xe000e010

08002cec <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_ResumeTick+0x18>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a03      	ldr	r2, [pc, #12]	; (8002d04 <HAL_ResumeTick+0x18>)
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	e000e010 	.word	0xe000e010

08002d08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08e      	sub	sp, #56	; 0x38
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e127      	b.n	8002f78 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d115      	bne.n	8002d62 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d44:	4b8e      	ldr	r3, [pc, #568]	; (8002f80 <HAL_ADC_Init+0x278>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a8d      	ldr	r2, [pc, #564]	; (8002f80 <HAL_ADC_Init+0x278>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	4b8b      	ldr	r3, [pc, #556]	; (8002f80 <HAL_ADC_Init+0x278>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff fd0b 	bl	8002778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 80ff 	bne.w	8002f6e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d78:	f023 0302 	bic.w	r3, r3, #2
 8002d7c:	f043 0202 	orr.w	r2, r3, #2
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002d84:	4b7f      	ldr	r3, [pc, #508]	; (8002f84 <HAL_ADC_Init+0x27c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	497c      	ldr	r1, [pc, #496]	; (8002f84 <HAL_ADC_Init+0x27c>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002d9e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	4619      	mov	r1, r3
 8002da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dac:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002dc2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002dc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002dea:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dee:	4313      	orrs	r3, r2
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d007      	beq.n	8002e0a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002e02:	4313      	orrs	r3, r2
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	4313      	orrs	r3, r2
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d04f      	beq.n	8002eb8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e2a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6912      	ldr	r2, [r2, #16]
 8002e30:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002e34:	d003      	beq.n	8002e3e <HAL_ADC_Init+0x136>
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6912      	ldr	r2, [r2, #16]
 8002e3a:	2a01      	cmp	r2, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_ADC_Init+0x13c>
 8002e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_Init+0x13e>
 8002e44:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002e46:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d125      	bne.n	8002ea4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d114      	bne.n	8002e8c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002e6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	fa92 f2a2 	rbit	r2, r2
 8002e74:	617a      	str	r2, [r7, #20]
  return result;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	4093      	lsls	r3, r2
 8002e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e86:	4313      	orrs	r3, r2
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8a:	e00b      	b.n	8002ea4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_ADC_Init+0x280>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <HAL_ADC_Init+0x284>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed4:	d003      	beq.n	8002ede <HAL_ADC_Init+0x1d6>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d119      	bne.n	8002f12 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	3b01      	subs	r3, #1
 8002eee:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002ef2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	fa92 f2a2 	rbit	r2, r2
 8002efa:	60fa      	str	r2, [r7, #12]
  return result;
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	fab2 f282 	clz	r2, r2
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	fa03 f202 	lsl.w	r2, r3, r2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f10:	e007      	b.n	8002f22 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_ADC_Init+0x288>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d10b      	bne.n	8002f4a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3c:	f023 0303 	bic.w	r3, r3, #3
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f48:	e014      	b.n	8002f74 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	f023 0312 	bic.w	r3, r3, #18
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f6c:	e002      	b.n	8002f74 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3738      	adds	r7, #56	; 0x38
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40012700 	.word	0x40012700
 8002f88:	fcfc16ff 	.word	0xfcfc16ff
 8002f8c:	c0fff189 	.word	0xc0fff189
 8002f90:	bf80fffe 	.word	0xbf80fffe

08002f94 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Start+0x1a>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e04e      	b.n	800304c <HAL_ADC_Start+0xb8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa54 	bl	8003464 <ADC_Enable>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d141      	bne.n	800304a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ff0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003004:	d106      	bne.n	8003014 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	f023 0206 	bic.w	r2, r3, #6
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	651a      	str	r2, [r3, #80]	; 0x50
 8003012:	e002      	b.n	800301a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800302a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003048:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003070:	d113      	bne.n	800309a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800307c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003080:	d10b      	bne.n	800309a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e068      	b.n	800316c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800309a:	f7ff fded 	bl	8002c78 <HAL_GetTick>
 800309e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030a0:	e021      	b.n	80030e6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d01d      	beq.n	80030e6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_ADC_PollForConversion+0x6c>
 80030b0:	f7ff fde2 	bl	8002c78 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d212      	bcs.n	80030e6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10b      	bne.n	80030e6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	f043 0204 	orr.w	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e042      	b.n	800316c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0d6      	beq.n	80030a2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0212 	mvn.w	r2, #18
 8003104:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d124      	bne.n	800316a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11f      	bne.n	800316a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003142:	2b00      	cmp	r3, #0
 8003144:	d111      	bne.n	800316a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x20>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e14f      	b.n	800344c <HAL_ADC_ConfigChannel+0x2c0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d81c      	bhi.n	80031f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b05      	subs	r3, #5
 80031ce:	221f      	movs	r2, #31
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	4019      	ands	r1, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	3b05      	subs	r3, #5
 80031e8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
 80031f4:	e07e      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d81c      	bhi.n	8003238 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3b23      	subs	r3, #35	; 0x23
 8003210:	221f      	movs	r2, #31
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	4019      	ands	r1, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	3b23      	subs	r3, #35	; 0x23
 800322a:	fa00 f203 	lsl.w	r2, r0, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	63da      	str	r2, [r3, #60]	; 0x3c
 8003236:	e05d      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d81c      	bhi.n	800327a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	3b41      	subs	r3, #65	; 0x41
 8003252:	221f      	movs	r2, #31
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	4019      	ands	r1, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	3b41      	subs	r3, #65	; 0x41
 800326c:	fa00 f203 	lsl.w	r2, r0, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
 8003278:	e03c      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b18      	cmp	r3, #24
 8003280:	d81c      	bhi.n	80032bc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3b5f      	subs	r3, #95	; 0x5f
 8003294:	221f      	movs	r2, #31
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	4019      	ands	r1, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	3b5f      	subs	r3, #95	; 0x5f
 80032ae:	fa00 f203 	lsl.w	r2, r0, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ba:	e01b      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	3b7d      	subs	r3, #125	; 0x7d
 80032ce:	221f      	movs	r2, #31
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4019      	ands	r1, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b7d      	subs	r3, #125	; 0x7d
 80032e8:	fa00 f203 	lsl.w	r2, r0, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b09      	cmp	r3, #9
 80032fa:	d81a      	bhi.n	8003332 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6959      	ldr	r1, [r3, #20]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	2207      	movs	r2, #7
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	4019      	ands	r1, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6898      	ldr	r0, [r3, #8]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	fa00 f203 	lsl.w	r2, r0, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	615a      	str	r2, [r3, #20]
 8003330:	e05d      	b.n	80033ee <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b13      	cmp	r3, #19
 8003338:	d81c      	bhi.n	8003374 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6919      	ldr	r1, [r3, #16]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	3b1e      	subs	r3, #30
 800334c:	2207      	movs	r2, #7
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	4019      	ands	r1, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6898      	ldr	r0, [r3, #8]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	3b1e      	subs	r3, #30
 8003366:	fa00 f203 	lsl.w	r2, r0, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
 8003372:	e03c      	b.n	80033ee <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b1d      	cmp	r3, #29
 800337a:	d81c      	bhi.n	80033b6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	3b3c      	subs	r3, #60	; 0x3c
 800338e:	2207      	movs	r2, #7
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	4019      	ands	r1, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6898      	ldr	r0, [r3, #8]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	3b3c      	subs	r3, #60	; 0x3c
 80033a8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	e01b      	b.n	80033ee <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	3b5a      	subs	r3, #90	; 0x5a
 80033c8:	2207      	movs	r2, #7
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	4019      	ands	r1, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6898      	ldr	r0, [r3, #8]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b5a      	subs	r3, #90	; 0x5a
 80033e2:	fa00 f203 	lsl.w	r2, r0, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d003      	beq.n	80033fe <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033fa:	2b11      	cmp	r3, #17
 80033fc:	d121      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_ADC_ConfigChannel+0x2cc>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11b      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_ADC_ConfigChannel+0x2cc>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <HAL_ADC_ConfigChannel+0x2cc>)
 8003410:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003414:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b10      	cmp	r3, #16
 800341c:	d111      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800341e:	4b0f      	ldr	r3, [pc, #60]	; (800345c <HAL_ADC_ConfigChannel+0x2d0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <HAL_ADC_ConfigChannel+0x2d4>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	0c9a      	lsrs	r2, r3, #18
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003434:	e002      	b.n	800343c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3b01      	subs	r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f9      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40012700 	.word	0x40012700
 800345c:	20000008 	.word	0x20000008
 8003460:	431bde83 	.word	0x431bde83

08003464 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d043      	beq.n	800350a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <ADC_Enable+0xb0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a20      	ldr	r2, [pc, #128]	; (8003518 <ADC_Enable+0xb4>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	0c9a      	lsrs	r2, r3, #18
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80034a6:	e002      	b.n	80034ae <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f9      	bne.n	80034a8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80034b4:	f7ff fbe0 	bl	8002c78 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034ba:	e01f      	b.n	80034fc <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80034bc:	f7ff fbdc 	bl	8002c78 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d918      	bls.n	80034fc <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d011      	beq.n	80034fc <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034dc:	f043 0210 	orr.w	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d1d8      	bne.n	80034bc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000008 	.word	0x20000008
 8003518:	431bde83 	.word	0x431bde83

0800351c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <__NVIC_SetPriorityGrouping+0x44>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003538:	4013      	ands	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800354e:	4a04      	ldr	r2, [pc, #16]	; (8003560 <__NVIC_SetPriorityGrouping+0x44>)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	60d3      	str	r3, [r2, #12]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <__NVIC_GetPriorityGrouping+0x18>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	f003 0307 	and.w	r3, r3, #7
}
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	2b00      	cmp	r3, #0
 8003590:	db0b      	blt.n	80035aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	f003 021f 	and.w	r2, r3, #31
 8003598:	4906      	ldr	r1, [pc, #24]	; (80035b4 <__NVIC_EnableIRQ+0x34>)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2001      	movs	r0, #1
 80035a2:	fa00 f202 	lsl.w	r2, r0, r2
 80035a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	e000e100 	.word	0xe000e100

080035b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	6039      	str	r1, [r7, #0]
 80035c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	db0a      	blt.n	80035e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	490c      	ldr	r1, [pc, #48]	; (8003604 <__NVIC_SetPriority+0x4c>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	0112      	lsls	r2, r2, #4
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	440b      	add	r3, r1
 80035dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035e0:	e00a      	b.n	80035f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	4908      	ldr	r1, [pc, #32]	; (8003608 <__NVIC_SetPriority+0x50>)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	3b04      	subs	r3, #4
 80035f0:	0112      	lsls	r2, r2, #4
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	440b      	add	r3, r1
 80035f6:	761a      	strb	r2, [r3, #24]
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800360c:	b480      	push	{r7}
 800360e:	b089      	sub	sp, #36	; 0x24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f1c3 0307 	rsb	r3, r3, #7
 8003626:	2b04      	cmp	r3, #4
 8003628:	bf28      	it	cs
 800362a:	2304      	movcs	r3, #4
 800362c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3304      	adds	r3, #4
 8003632:	2b06      	cmp	r3, #6
 8003634:	d902      	bls.n	800363c <NVIC_EncodePriority+0x30>
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3b03      	subs	r3, #3
 800363a:	e000      	b.n	800363e <NVIC_EncodePriority+0x32>
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	f04f 32ff 	mov.w	r2, #4294967295
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43da      	mvns	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	401a      	ands	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003654:	f04f 31ff 	mov.w	r1, #4294967295
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	43d9      	mvns	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	4313      	orrs	r3, r2
         );
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d301      	bcc.n	8003686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003682:	2301      	movs	r3, #1
 8003684:	e00f      	b.n	80036a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <SysTick_Config+0x40>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368e:	210f      	movs	r1, #15
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	f7ff ff90 	bl	80035b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SysTick_Config+0x40>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <SysTick_Config+0x40>)
 80036a0:	2207      	movs	r2, #7
 80036a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	e000e010 	.word	0xe000e010

080036b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff2d 	bl	800351c <__NVIC_SetPriorityGrouping>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036dc:	f7ff ff42 	bl	8003564 <__NVIC_GetPriorityGrouping>
 80036e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7ff ff90 	bl	800360c <NVIC_EncodePriority>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff5f 	bl	80035b8 <__NVIC_SetPriority>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff35 	bl	8003580 <__NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffa2 	bl	8003670 <SysTick_Config>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d008      	beq.n	8003760 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2204      	movs	r2, #4
 8003752:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e022      	b.n	80037a6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 020e 	bic.w	r2, r2, #14
 800376e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f003 021c 	and.w	r2, r3, #28
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	2101      	movs	r1, #1
 800378e:	fa01 f202 	lsl.w	r2, r1, r2
 8003792:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d005      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2204      	movs	r2, #4
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e029      	b.n	8003828 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020e 	bic.w	r2, r2, #14
 80037e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f003 021c 	and.w	r2, r3, #28
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f202 	lsl.w	r2, r1, r2
 8003806:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
    }
  }
  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800384a:	e160      	b.n	8003b0e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8152 	beq.w	8003b08 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d005      	beq.n	800387c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003878:	2b02      	cmp	r3, #2
 800387a:	d130      	bne.n	80038de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80038b2:	2201      	movs	r2, #1
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 0201 	and.w	r2, r3, #1
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d017      	beq.n	800391a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d123      	bne.n	800396e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003932:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	220f      	movs	r2, #15
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	08da      	lsrs	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3208      	adds	r2, #8
 8003968:	6939      	ldr	r1, [r7, #16]
 800396a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0203 	and.w	r2, r3, #3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80ac 	beq.w	8003b08 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b0:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_GPIO_Init+0x2f8>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4a5d      	ldr	r2, [pc, #372]	; (8003b2c <HAL_GPIO_Init+0x2f8>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6213      	str	r3, [r2, #32]
 80039bc:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <HAL_GPIO_Init+0x2f8>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80039c8:	4a59      	ldr	r2, [pc, #356]	; (8003b30 <HAL_GPIO_Init+0x2fc>)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a51      	ldr	r2, [pc, #324]	; (8003b34 <HAL_GPIO_Init+0x300>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d025      	beq.n	8003a40 <HAL_GPIO_Init+0x20c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a50      	ldr	r2, [pc, #320]	; (8003b38 <HAL_GPIO_Init+0x304>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d01f      	beq.n	8003a3c <HAL_GPIO_Init+0x208>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a4f      	ldr	r2, [pc, #316]	; (8003b3c <HAL_GPIO_Init+0x308>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d019      	beq.n	8003a38 <HAL_GPIO_Init+0x204>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a4e      	ldr	r2, [pc, #312]	; (8003b40 <HAL_GPIO_Init+0x30c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_GPIO_Init+0x200>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a4d      	ldr	r2, [pc, #308]	; (8003b44 <HAL_GPIO_Init+0x310>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00d      	beq.n	8003a30 <HAL_GPIO_Init+0x1fc>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a4c      	ldr	r2, [pc, #304]	; (8003b48 <HAL_GPIO_Init+0x314>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <HAL_GPIO_Init+0x1f8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a4b      	ldr	r2, [pc, #300]	; (8003b4c <HAL_GPIO_Init+0x318>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_GPIO_Init+0x1f4>
 8003a24:	2306      	movs	r3, #6
 8003a26:	e00c      	b.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a28:	2307      	movs	r3, #7
 8003a2a:	e00a      	b.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a2c:	2305      	movs	r3, #5
 8003a2e:	e008      	b.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a30:	2304      	movs	r3, #4
 8003a32:	e006      	b.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a34:	2303      	movs	r3, #3
 8003a36:	e004      	b.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e002      	b.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a40:	2300      	movs	r3, #0
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	f002 0203 	and.w	r2, r2, #3
 8003a48:	0092      	lsls	r2, r2, #2
 8003a4a:	4093      	lsls	r3, r2
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a52:	4937      	ldr	r1, [pc, #220]	; (8003b30 <HAL_GPIO_Init+0x2fc>)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	3302      	adds	r3, #2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a60:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a84:	4a32      	ldr	r2, [pc, #200]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a8a:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aae:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b02:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f47f ae97 	bne.w	800384c <HAL_GPIO_Init+0x18>
  }
}
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40020400 	.word	0x40020400
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	40020c00 	.word	0x40020c00
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40021400 	.word	0x40021400
 8003b4c:	40021800 	.word	0x40021800
 8003b50:	40010400 	.word	0x40010400

08003b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
 8003b60:	4613      	mov	r3, r2
 8003b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b64:	787b      	ldrb	r3, [r7, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003b70:	e003      	b.n	8003b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	041a      	lsls	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	619a      	str	r2, [r3, #24]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b9a:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe f972 	bl	8001e8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40010400 	.word	0x40010400

08003bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e12b      	b.n	8003e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fe fe0c 	bl	80027f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c18:	f001 fd08 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8003c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4a81      	ldr	r2, [pc, #516]	; (8003e28 <HAL_I2C_Init+0x274>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d807      	bhi.n	8003c38 <HAL_I2C_Init+0x84>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a80      	ldr	r2, [pc, #512]	; (8003e2c <HAL_I2C_Init+0x278>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf94      	ite	ls
 8003c30:	2301      	movls	r3, #1
 8003c32:	2300      	movhi	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e006      	b.n	8003c46 <HAL_I2C_Init+0x92>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a7d      	ldr	r2, [pc, #500]	; (8003e30 <HAL_I2C_Init+0x27c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	bf94      	ite	ls
 8003c40:	2301      	movls	r3, #1
 8003c42:	2300      	movhi	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0e7      	b.n	8003e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a78      	ldr	r2, [pc, #480]	; (8003e34 <HAL_I2C_Init+0x280>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0c9b      	lsrs	r3, r3, #18
 8003c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a6a      	ldr	r2, [pc, #424]	; (8003e28 <HAL_I2C_Init+0x274>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d802      	bhi.n	8003c88 <HAL_I2C_Init+0xd4>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3301      	adds	r3, #1
 8003c86:	e009      	b.n	8003c9c <HAL_I2C_Init+0xe8>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	4a69      	ldr	r2, [pc, #420]	; (8003e38 <HAL_I2C_Init+0x284>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	495c      	ldr	r1, [pc, #368]	; (8003e28 <HAL_I2C_Init+0x274>)
 8003cb8:	428b      	cmp	r3, r1
 8003cba:	d819      	bhi.n	8003cf0 <HAL_I2C_Init+0x13c>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e59      	subs	r1, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cca:	1c59      	adds	r1, r3, #1
 8003ccc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cd0:	400b      	ands	r3, r1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_I2C_Init+0x138>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1e59      	subs	r1, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cea:	e051      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003cec:	2304      	movs	r3, #4
 8003cee:	e04f      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d111      	bne.n	8003d1c <HAL_I2C_Init+0x168>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1e58      	subs	r0, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	440b      	add	r3, r1
 8003d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e012      	b.n	8003d42 <HAL_I2C_Init+0x18e>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1e58      	subs	r0, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	0099      	lsls	r1, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Init+0x196>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e022      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10e      	bne.n	8003d70 <HAL_I2C_Init+0x1bc>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1e58      	subs	r0, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6859      	ldr	r1, [r3, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	440b      	add	r3, r1
 8003d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	e00f      	b.n	8003d90 <HAL_I2C_Init+0x1dc>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e58      	subs	r0, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	0099      	lsls	r1, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	6809      	ldr	r1, [r1, #0]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6911      	ldr	r1, [r2, #16]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68d2      	ldr	r2, [r2, #12]
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	000186a0 	.word	0x000186a0
 8003e2c:	001e847f 	.word	0x001e847f
 8003e30:	003d08ff 	.word	0x003d08ff
 8003e34:	431bde83 	.word	0x431bde83
 8003e38:	10624dd3 	.word	0x10624dd3

08003e3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	461a      	mov	r2, r3
 8003e48:	460b      	mov	r3, r1
 8003e4a:	817b      	strh	r3, [r7, #10]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e50:	f7fe ff12 	bl	8002c78 <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	f040 80e0 	bne.w	8004024 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2319      	movs	r3, #25
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4970      	ldr	r1, [pc, #448]	; (8004030 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fc58 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e0d3      	b.n	8004026 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_I2C_Master_Transmit+0x50>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e0cc      	b.n	8004026 <HAL_I2C_Master_Transmit+0x1ea>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d007      	beq.n	8003eb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2221      	movs	r2, #33	; 0x21
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	893a      	ldrh	r2, [r7, #8]
 8003ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a50      	ldr	r2, [pc, #320]	; (8004034 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ef4:	8979      	ldrh	r1, [r7, #10]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fac2 	bl	8004484 <I2C_MasterRequestWrite>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e08d      	b.n	8004026 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f20:	e066      	b.n	8003ff0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fcd2 	bl	80048d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d107      	bne.n	8003f4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e06b      	b.n	8004026 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_I2C_Master_Transmit+0x188>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d017      	beq.n	8003fc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	6a39      	ldr	r1, [r7, #32]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fcc2 	bl	8004952 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d107      	bne.n	8003fec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e01a      	b.n	8004026 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d194      	bne.n	8003f22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	00100002 	.word	0x00100002
 8004034:	ffff0000 	.word	0xffff0000

08004038 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08c      	sub	sp, #48	; 0x30
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	461a      	mov	r2, r3
 8004044:	460b      	mov	r3, r1
 8004046:	817b      	strh	r3, [r7, #10]
 8004048:	4613      	mov	r3, r2
 800404a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7fe fe14 	bl	8002c78 <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b20      	cmp	r3, #32
 800405c:	f040 820b 	bne.w	8004476 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2319      	movs	r3, #25
 8004066:	2201      	movs	r2, #1
 8004068:	497c      	ldr	r1, [pc, #496]	; (800425c <HAL_I2C_Master_Receive+0x224>)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fb5a 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	e1fe      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_I2C_Master_Receive+0x50>
 8004084:	2302      	movs	r3, #2
 8004086:	e1f7      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d007      	beq.n	80040ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2222      	movs	r2, #34	; 0x22
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2210      	movs	r2, #16
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	893a      	ldrh	r2, [r7, #8]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a5c      	ldr	r2, [pc, #368]	; (8004260 <HAL_I2C_Master_Receive+0x228>)
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040f0:	8979      	ldrh	r1, [r7, #10]
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fa46 	bl	8004588 <I2C_MasterRequestRead>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1b8      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d113      	bne.n	8004136 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e18c      	b.n	8004450 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	2b01      	cmp	r3, #1
 800413c:	d11b      	bne.n	8004176 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e16c      	b.n	8004450 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	2b02      	cmp	r3, #2
 800417c:	d11b      	bne.n	80041b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	e14c      	b.n	8004450 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041dc:	e138      	b.n	8004450 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	f200 80f1 	bhi.w	80043ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d123      	bne.n	8004238 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fbed 	bl	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e139      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004236:	e10b      	b.n	8004450 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	2b02      	cmp	r3, #2
 800423e:	d14e      	bne.n	80042de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	4906      	ldr	r1, [pc, #24]	; (8004264 <HAL_I2C_Master_Receive+0x22c>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fa6a 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e10e      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
 800425a:	bf00      	nop
 800425c:	00100002 	.word	0x00100002
 8004260:	ffff0000 	.word	0xffff0000
 8004264:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042dc:	e0b8      	b.n	8004450 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2200      	movs	r2, #0
 80042e6:	4966      	ldr	r1, [pc, #408]	; (8004480 <HAL_I2C_Master_Receive+0x448>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fa1b 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0bf      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	2200      	movs	r2, #0
 8004342:	494f      	ldr	r1, [pc, #316]	; (8004480 <HAL_I2C_Master_Receive+0x448>)
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f9ed 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e091      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043c8:	e042      	b.n	8004450 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fb00 	bl	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e04c      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b04      	cmp	r3, #4
 800441c:	d118      	bne.n	8004450 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f aec2 	bne.w	80041de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3728      	adds	r7, #40	; 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	00010004 	.word	0x00010004

08004484 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	460b      	mov	r3, r1
 8004492:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d006      	beq.n	80044ae <I2C_MasterRequestWrite+0x2a>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d003      	beq.n	80044ae <I2C_MasterRequestWrite+0x2a>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044ac:	d108      	bne.n	80044c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e00b      	b.n	80044d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	2b12      	cmp	r3, #18
 80044c6:	d107      	bne.n	80044d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f91d 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fe:	d103      	bne.n	8004508 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e035      	b.n	8004578 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004514:	d108      	bne.n	8004528 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004516:	897b      	ldrh	r3, [r7, #10]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004524:	611a      	str	r2, [r3, #16]
 8004526:	e01b      	b.n	8004560 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004528:	897b      	ldrh	r3, [r7, #10]
 800452a:	11db      	asrs	r3, r3, #7
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0306 	and.w	r3, r3, #6
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f063 030f 	orn	r3, r3, #15
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	490e      	ldr	r1, [pc, #56]	; (8004580 <I2C_MasterRequestWrite+0xfc>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f943 	bl	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e010      	b.n	8004578 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4907      	ldr	r1, [pc, #28]	; (8004584 <I2C_MasterRequestWrite+0x100>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f933 	bl	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	00010008 	.word	0x00010008
 8004584:	00010002 	.word	0x00010002

08004588 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	460b      	mov	r3, r1
 8004596:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d006      	beq.n	80045c2 <I2C_MasterRequestRead+0x3a>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d003      	beq.n	80045c2 <I2C_MasterRequestRead+0x3a>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045c0:	d108      	bne.n	80045d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e00b      	b.n	80045ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	2b11      	cmp	r3, #17
 80045da:	d107      	bne.n	80045ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f893 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004612:	d103      	bne.n	800461c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800461a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e079      	b.n	8004714 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004628:	d108      	bne.n	800463c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800462a:	897b      	ldrh	r3, [r7, #10]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	611a      	str	r2, [r3, #16]
 800463a:	e05f      	b.n	80046fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800463c:	897b      	ldrh	r3, [r7, #10]
 800463e:	11db      	asrs	r3, r3, #7
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0306 	and.w	r3, r3, #6
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f063 030f 	orn	r3, r3, #15
 800464c:	b2da      	uxtb	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4930      	ldr	r1, [pc, #192]	; (800471c <I2C_MasterRequestRead+0x194>)
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8b9 	bl	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e054      	b.n	8004714 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800466a:	897b      	ldrh	r3, [r7, #10]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4929      	ldr	r1, [pc, #164]	; (8004720 <I2C_MasterRequestRead+0x198>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f8a9 	bl	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e044      	b.n	8004714 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f831 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	d103      	bne.n	80046e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e017      	b.n	8004714 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046e4:	897b      	ldrh	r3, [r7, #10]
 80046e6:	11db      	asrs	r3, r3, #7
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0306 	and.w	r3, r3, #6
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f063 030e 	orn	r3, r3, #14
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4907      	ldr	r1, [pc, #28]	; (8004720 <I2C_MasterRequestRead+0x198>)
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f865 	bl	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	00010008 	.word	0x00010008
 8004720:	00010002 	.word	0x00010002

08004724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004734:	e025      	b.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473c:	d021      	beq.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473e:	f7fe fa9b 	bl	8002c78 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d116      	bne.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f043 0220 	orr.w	r2, r3, #32
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e023      	b.n	80047ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10d      	bne.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	43da      	mvns	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	e00c      	b.n	80047c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	43da      	mvns	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d0b6      	beq.n	8004736 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047e0:	e051      	b.n	8004886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f0:	d123      	bne.n	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004800:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800480a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f043 0204 	orr.w	r2, r3, #4
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e046      	b.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d021      	beq.n	8004886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004842:	f7fe fa19 	bl	8002c78 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d302      	bcc.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d116      	bne.n	8004886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f043 0220 	orr.w	r2, r3, #32
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e020      	b.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10c      	bne.n	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	43da      	mvns	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	bf14      	ite	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	2300      	moveq	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	e00b      	b.n	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	43da      	mvns	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4013      	ands	r3, r2
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d18d      	bne.n	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048dc:	e02d      	b.n	800493a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f8ce 	bl	8004a80 <I2C_IsAcknowledgeFailed>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e02d      	b.n	800494a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d021      	beq.n	800493a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7fe f9bf 	bl	8002c78 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d116      	bne.n	800493a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f043 0220 	orr.w	r2, r3, #32
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e007      	b.n	800494a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b80      	cmp	r3, #128	; 0x80
 8004946:	d1ca      	bne.n	80048de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800495e:	e02d      	b.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f88d 	bl	8004a80 <I2C_IsAcknowledgeFailed>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e02d      	b.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d021      	beq.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004978:	f7fe f97e 	bl	8002c78 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d302      	bcc.n	800498e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d116      	bne.n	80049bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f043 0220 	orr.w	r2, r3, #32
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e007      	b.n	80049cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d1ca      	bne.n	8004960 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049e0:	e042      	b.n	8004a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d119      	bne.n	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0210 	mvn.w	r2, #16
 80049f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e029      	b.n	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a24:	f7fe f928 	bl	8002c78 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d302      	bcc.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d116      	bne.n	8004a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d1b5      	bne.n	80049e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a96:	d11b      	bne.n	8004ad0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f043 0204 	orr.w	r2, r3, #4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_PWR_EnterSTOPMode+0x50>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 0203 	bic.w	r2, r3, #3
 8004af0:	490e      	ldr	r1, [pc, #56]	; (8004b2c <HAL_PWR_EnterSTOPMode+0x50>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <HAL_PWR_EnterSTOPMode+0x54>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	4a0c      	ldr	r2, [pc, #48]	; (8004b30 <HAL_PWR_EnterSTOPMode+0x54>)
 8004afe:	f043 0304 	orr.w	r3, r3, #4
 8004b02:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004b0a:	bf30      	wfi
 8004b0c:	e002      	b.n	8004b14 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004b0e:	bf40      	sev
    __WFE();
 8004b10:	bf20      	wfe
    __WFE();
 8004b12:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_PWR_EnterSTOPMode+0x54>)
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	4a05      	ldr	r2, [pc, #20]	; (8004b30 <HAL_PWR_EnterSTOPMode+0x54>)
 8004b1a:	f023 0304 	bic.w	r3, r3, #4
 8004b1e:	6113      	str	r3, [r2, #16]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <HAL_PWR_DisableSleepOnExit+0x18>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4a03      	ldr	r2, [pc, #12]	; (8004b4c <HAL_PWR_DisableSleepOnExit+0x18>)
 8004b3e:	f023 0302 	bic.w	r3, r3, #2
 8004b42:	6113      	str	r3, [r2, #16]
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e31d      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b62:	4b94      	ldr	r3, [pc, #592]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b6c:	4b91      	ldr	r3, [pc, #580]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d07b      	beq.n	8004c7a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d006      	beq.n	8004b96 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d10f      	bne.n	8004bae <HAL_RCC_OscConfig+0x5e>
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d10b      	bne.n	8004bae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b96:	4b87      	ldr	r3, [pc, #540]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d06a      	beq.n	8004c78 <HAL_RCC_OscConfig+0x128>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d166      	bne.n	8004c78 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e2f7      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x74>
 8004bb6:	4b7f      	ldr	r3, [pc, #508]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a7e      	ldr	r2, [pc, #504]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e02d      	b.n	8004c20 <HAL_RCC_OscConfig+0xd0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10c      	bne.n	8004be6 <HAL_RCC_OscConfig+0x96>
 8004bcc:	4b79      	ldr	r3, [pc, #484]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a78      	ldr	r2, [pc, #480]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b76      	ldr	r3, [pc, #472]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a75      	ldr	r2, [pc, #468]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e01c      	b.n	8004c20 <HAL_RCC_OscConfig+0xd0>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0xb8>
 8004bee:	4b71      	ldr	r3, [pc, #452]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a70      	ldr	r2, [pc, #448]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b6e      	ldr	r3, [pc, #440]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6d      	ldr	r2, [pc, #436]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0xd0>
 8004c08:	4b6a      	ldr	r3, [pc, #424]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a69      	ldr	r2, [pc, #420]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b67      	ldr	r3, [pc, #412]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a66      	ldr	r2, [pc, #408]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c28:	f7fe f826 	bl	8002c78 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fe f822 	bl	8002c78 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e2ad      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c42:	4b5c      	ldr	r3, [pc, #368]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0xe0>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fe f812 	bl	8002c78 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fe f80e 	bl	8002c78 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e299      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c6a:	4b52      	ldr	r3, [pc, #328]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x108>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d05a      	beq.n	8004d3c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d119      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x176>
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d116      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c98:	4b46      	ldr	r3, [pc, #280]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x160>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e276      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb0:	4b40      	ldr	r3, [pc, #256]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	493d      	ldr	r1, [pc, #244]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc4:	e03a      	b.n	8004d3c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d020      	beq.n	8004d10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cce:	4b3a      	ldr	r3, [pc, #232]	; (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fd ffd0 	bl	8002c78 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fd ffcc 	bl	8002c78 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e257      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cee:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfa:	4b2e      	ldr	r3, [pc, #184]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	492a      	ldr	r1, [pc, #168]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	604b      	str	r3, [r1, #4]
 8004d0e:	e015      	b.n	8004d3c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d10:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d16:	f7fd ffaf 	bl	8002c78 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fd ffab 	bl	8002c78 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e236      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d30:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f0      	bne.n	8004d1e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80b8 	beq.w	8004eba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d170      	bne.n	8004e32 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d50:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_RCC_OscConfig+0x218>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e21a      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1a      	ldr	r2, [r3, #32]
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d921      	bls.n	8004dbc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fc7d 	bl	800567c <RCC_SetFlashLatencyFromMSIRange>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e208      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	4906      	ldr	r1, [pc, #24]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	061b      	lsls	r3, r3, #24
 8004dac:	4901      	ldr	r1, [pc, #4]	; (8004db4 <HAL_RCC_OscConfig+0x264>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	604b      	str	r3, [r1, #4]
 8004db2:	e020      	b.n	8004df6 <HAL_RCC_OscConfig+0x2a6>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dbc:	4b99      	ldr	r3, [pc, #612]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4996      	ldr	r1, [pc, #600]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dce:	4b95      	ldr	r3, [pc, #596]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	4991      	ldr	r1, [pc, #580]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fc48 	bl	800567c <RCC_SetFlashLatencyFromMSIRange>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1d3      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	0b5b      	lsrs	r3, r3, #13
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004e06:	4a87      	ldr	r2, [pc, #540]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	0912      	lsrs	r2, r2, #4
 8004e0c:	f002 020f 	and.w	r2, r2, #15
 8004e10:	4985      	ldr	r1, [pc, #532]	; (8005028 <HAL_RCC_OscConfig+0x4d8>)
 8004e12:	5c8a      	ldrb	r2, [r1, r2]
 8004e14:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e16:	4a85      	ldr	r2, [pc, #532]	; (800502c <HAL_RCC_OscConfig+0x4dc>)
 8004e18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e1a:	4b85      	ldr	r3, [pc, #532]	; (8005030 <HAL_RCC_OscConfig+0x4e0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fede 	bl	8002be0 <HAL_InitTick>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d045      	beq.n	8004eba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	e1b5      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d029      	beq.n	8004e8e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e3a:	4b7e      	ldr	r3, [pc, #504]	; (8005034 <HAL_RCC_OscConfig+0x4e4>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd ff1a 	bl	8002c78 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e48:	f7fd ff16 	bl	8002c78 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e1a1      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e5a:	4b72      	ldr	r3, [pc, #456]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e66:	4b6f      	ldr	r3, [pc, #444]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	496c      	ldr	r1, [pc, #432]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e78:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	4967      	ldr	r1, [pc, #412]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
 8004e8c:	e015      	b.n	8004eba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e8e:	4b69      	ldr	r3, [pc, #420]	; (8005034 <HAL_RCC_OscConfig+0x4e4>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fd fef0 	bl	8002c78 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e9c:	f7fd feec 	bl	8002c78 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e177      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004eae:	4b5d      	ldr	r3, [pc, #372]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d030      	beq.n	8004f28 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ece:	4b5a      	ldr	r3, [pc, #360]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7fd fed0 	bl	8002c78 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fd fecc 	bl	8002c78 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e157      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eee:	4b4d      	ldr	r3, [pc, #308]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x38c>
 8004efa:	e015      	b.n	8004f28 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004efc:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f02:	f7fd feb9 	bl	8002c78 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f0a:	f7fd feb5 	bl	8002c78 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e140      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f1c:	4b41      	ldr	r3, [pc, #260]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80b5 	beq.w	80050a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f36:	2300      	movs	r3, #0
 8004f38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f3a:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	4b37      	ldr	r3, [pc, #220]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	4a36      	ldr	r2, [pc, #216]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f50:	6253      	str	r3, [r2, #36]	; 0x24
 8004f52:	4b34      	ldr	r3, [pc, #208]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f62:	4b36      	ldr	r3, [pc, #216]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d118      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f6e:	4b33      	ldr	r3, [pc, #204]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a32      	ldr	r2, [pc, #200]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7a:	f7fd fe7d 	bl	8002c78 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f82:	f7fd fe79 	bl	8002c78 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b64      	cmp	r3, #100	; 0x64
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e104      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	4b29      	ldr	r3, [pc, #164]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d106      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x466>
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fac:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb2:	6353      	str	r3, [r2, #52]	; 0x34
 8004fb4:	e02d      	b.n	8005012 <HAL_RCC_OscConfig+0x4c2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x488>
 8004fbe:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc2:	4a18      	ldr	r2, [pc, #96]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc8:	6353      	str	r3, [r2, #52]	; 0x34
 8004fca:	4b16      	ldr	r3, [pc, #88]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	4a15      	ldr	r2, [pc, #84]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fd4:	6353      	str	r3, [r2, #52]	; 0x34
 8004fd6:	e01c      	b.n	8005012 <HAL_RCC_OscConfig+0x4c2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b05      	cmp	r3, #5
 8004fde:	d10c      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4aa>
 8004fe0:	4b10      	ldr	r3, [pc, #64]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	4a0f      	ldr	r2, [pc, #60]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fea:	6353      	str	r3, [r2, #52]	; 0x34
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff6:	6353      	str	r3, [r2, #52]	; 0x34
 8004ff8:	e00b      	b.n	8005012 <HAL_RCC_OscConfig+0x4c2>
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffe:	4a09      	ldr	r2, [pc, #36]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8005000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005004:	6353      	str	r3, [r2, #52]	; 0x34
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 8005008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500a:	4a06      	ldr	r2, [pc, #24]	; (8005024 <HAL_RCC_OscConfig+0x4d4>)
 800500c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005010:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d024      	beq.n	8005064 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501a:	f7fd fe2d 	bl	8002c78 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005020:	e019      	b.n	8005056 <HAL_RCC_OscConfig+0x506>
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	08009d28 	.word	0x08009d28
 800502c:	20000008 	.word	0x20000008
 8005030:	2000000c 	.word	0x2000000c
 8005034:	42470020 	.word	0x42470020
 8005038:	42470680 	.word	0x42470680
 800503c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005040:	f7fd fe1a 	bl	8002c78 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	; 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e0a3      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005056:	4b54      	ldr	r3, [pc, #336]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0ee      	beq.n	8005040 <HAL_RCC_OscConfig+0x4f0>
 8005062:	e014      	b.n	800508e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005064:	f7fd fe08 	bl	8002c78 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fd fe04 	bl	8002c78 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e08d      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005082:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ee      	bne.n	800506c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800508e:	7ffb      	ldrb	r3, [r7, #31]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d105      	bne.n	80050a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005094:	4b44      	ldr	r3, [pc, #272]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	4a43      	ldr	r2, [pc, #268]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d079      	beq.n	800519c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d056      	beq.n	800515c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d13b      	bne.n	800512e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_RCC_OscConfig+0x65c>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050bc:	f7fd fddc 	bl	8002c78 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fd fdd8 	bl	8002c78 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e063      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050d6:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e2:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	4319      	orrs	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	430b      	orrs	r3, r1
 80050fa:	492b      	ldr	r1, [pc, #172]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005100:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <HAL_RCC_OscConfig+0x65c>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005106:	f7fd fdb7 	bl	8002c78 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510e:	f7fd fdb3 	bl	8002c78 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e03e      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005120:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x5be>
 800512c:	e036      	b.n	800519c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512e:	4b1f      	ldr	r3, [pc, #124]	; (80051ac <HAL_RCC_OscConfig+0x65c>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fd fda0 	bl	8002c78 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800513c:	f7fd fd9c 	bl	8002c78 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e027      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800514e:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x5ec>
 800515a:	e01f      	b.n	800519c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e01a      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <HAL_RCC_OscConfig+0x658>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	429a      	cmp	r2, r3
 800517a:	d10d      	bne.n	8005198 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d106      	bne.n	8005198 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
 80051ac:	42470060 	.word	0x42470060

080051b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e11a      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051c4:	4b8f      	ldr	r3, [pc, #572]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d919      	bls.n	8005206 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d105      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x34>
 80051d8:	4b8a      	ldr	r3, [pc, #552]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a89      	ldr	r2, [pc, #548]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 80051de:	f043 0304 	orr.w	r3, r3, #4
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	4b87      	ldr	r3, [pc, #540]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f023 0201 	bic.w	r2, r3, #1
 80051ec:	4985      	ldr	r1, [pc, #532]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f4:	4b83      	ldr	r3, [pc, #524]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d001      	beq.n	8005206 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0f9      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005212:	4b7d      	ldr	r3, [pc, #500]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	497a      	ldr	r1, [pc, #488]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 8005220:	4313      	orrs	r3, r2
 8005222:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 808e 	beq.w	800534e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800523a:	4b73      	ldr	r3, [pc, #460]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d121      	bne.n	800528a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0d7      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005252:	4b6d      	ldr	r3, [pc, #436]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d115      	bne.n	800528a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0cb      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d107      	bne.n	800527a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800526a:	4b67      	ldr	r3, [pc, #412]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e0bf      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800527a:	4b63      	ldr	r3, [pc, #396]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0b7      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800528a:	4b5f      	ldr	r3, [pc, #380]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f023 0203 	bic.w	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	495c      	ldr	r1, [pc, #368]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800529c:	f7fd fcec 	bl	8002c78 <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d112      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ac:	f7fd fce4 	bl	8002c78 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e09b      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052c2:	4b51      	ldr	r3, [pc, #324]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d1ee      	bne.n	80052ac <HAL_RCC_ClockConfig+0xfc>
 80052ce:	e03e      	b.n	800534e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d112      	bne.n	80052fe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052da:	f7fd fccd 	bl	8002c78 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e084      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f0:	4b45      	ldr	r3, [pc, #276]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	d1ee      	bne.n	80052da <HAL_RCC_ClockConfig+0x12a>
 80052fc:	e027      	b.n	800534e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d11d      	bne.n	8005342 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005306:	e00a      	b.n	800531e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005308:	f7fd fcb6 	bl	8002c78 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f241 3288 	movw	r2, #5000	; 0x1388
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e06d      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800531e:	4b3a      	ldr	r3, [pc, #232]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b04      	cmp	r3, #4
 8005328:	d1ee      	bne.n	8005308 <HAL_RCC_ClockConfig+0x158>
 800532a:	e010      	b.n	800534e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532c:	f7fd fca4 	bl	8002c78 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e05b      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005342:	4b31      	ldr	r3, [pc, #196]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 030c 	and.w	r3, r3, #12
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ee      	bne.n	800532c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800534e:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d219      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <HAL_RCC_ClockConfig+0x1be>
 8005362:	4b28      	ldr	r3, [pc, #160]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a27      	ldr	r2, [pc, #156]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 8005368:	f043 0304 	orr.w	r3, r3, #4
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b25      	ldr	r3, [pc, #148]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 0201 	bic.w	r2, r3, #1
 8005376:	4923      	ldr	r1, [pc, #140]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <HAL_RCC_ClockConfig+0x254>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e034      	b.n	80053fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4917      	ldr	r1, [pc, #92]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ba:	4b13      	ldr	r3, [pc, #76]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	490f      	ldr	r1, [pc, #60]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ce:	f000 f823 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053d2:	4602      	mov	r2, r0
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <HAL_RCC_ClockConfig+0x258>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	490b      	ldr	r1, [pc, #44]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 80053e0:	5ccb      	ldrb	r3, [r1, r3]
 80053e2:	fa22 f303 	lsr.w	r3, r2, r3
 80053e6:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80053e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_RCC_ClockConfig+0x264>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fd fbf6 	bl	8002be0 <HAL_InitTick>
 80053f4:	4603      	mov	r3, r0
 80053f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80053f8:	7afb      	ldrb	r3, [r7, #11]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40023c00 	.word	0x40023c00
 8005408:	40023800 	.word	0x40023800
 800540c:	08009d28 	.word	0x08009d28
 8005410:	20000008 	.word	0x20000008
 8005414:	2000000c 	.word	0x2000000c

08005418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800541c:	b092      	sub	sp, #72	; 0x48
 800541e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005420:	4b79      	ldr	r3, [pc, #484]	; (8005608 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005428:	f003 030c 	and.w	r3, r3, #12
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d00d      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x34>
 8005430:	2b0c      	cmp	r3, #12
 8005432:	f200 80d5 	bhi.w	80055e0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8005436:	2b04      	cmp	r3, #4
 8005438:	d002      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x28>
 800543a:	2b08      	cmp	r3, #8
 800543c:	d003      	beq.n	8005446 <HAL_RCC_GetSysClockFreq+0x2e>
 800543e:	e0cf      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005440:	4b72      	ldr	r3, [pc, #456]	; (800560c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005442:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005444:	e0da      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005446:	4b72      	ldr	r3, [pc, #456]	; (8005610 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005448:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800544a:	e0d7      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800544c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544e:	0c9b      	lsrs	r3, r3, #18
 8005450:	f003 020f 	and.w	r2, r3, #15
 8005454:	4b6f      	ldr	r3, [pc, #444]	; (8005614 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005456:	5c9b      	ldrb	r3, [r3, r2]
 8005458:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	0d9b      	lsrs	r3, r3, #22
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	3301      	adds	r3, #1
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005466:	4b68      	ldr	r3, [pc, #416]	; (8005608 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d05d      	beq.n	800552e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	2200      	movs	r2, #0
 8005476:	4618      	mov	r0, r3
 8005478:	4611      	mov	r1, r2
 800547a:	4604      	mov	r4, r0
 800547c:	460d      	mov	r5, r1
 800547e:	4622      	mov	r2, r4
 8005480:	462b      	mov	r3, r5
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	0159      	lsls	r1, r3, #5
 800548c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005490:	0150      	lsls	r0, r2, #5
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4621      	mov	r1, r4
 8005498:	1a51      	subs	r1, r2, r1
 800549a:	6139      	str	r1, [r7, #16]
 800549c:	4629      	mov	r1, r5
 800549e:	eb63 0301 	sbc.w	r3, r3, r1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054b0:	4659      	mov	r1, fp
 80054b2:	018b      	lsls	r3, r1, #6
 80054b4:	4651      	mov	r1, sl
 80054b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ba:	4651      	mov	r1, sl
 80054bc:	018a      	lsls	r2, r1, #6
 80054be:	46d4      	mov	ip, sl
 80054c0:	ebb2 080c 	subs.w	r8, r2, ip
 80054c4:	4659      	mov	r1, fp
 80054c6:	eb63 0901 	sbc.w	r9, r3, r1
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054de:	4690      	mov	r8, r2
 80054e0:	4699      	mov	r9, r3
 80054e2:	4623      	mov	r3, r4
 80054e4:	eb18 0303 	adds.w	r3, r8, r3
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	462b      	mov	r3, r5
 80054ec:	eb49 0303 	adc.w	r3, r9, r3
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054fe:	4629      	mov	r1, r5
 8005500:	024b      	lsls	r3, r1, #9
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	4604      	mov	r4, r0
 8005508:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800550c:	4601      	mov	r1, r0
 800550e:	024a      	lsls	r2, r1, #9
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	2200      	movs	r2, #0
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
 800551a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800551c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005520:	f7fb fd9e 	bl	8001060 <__aeabi_uldivmod>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4613      	mov	r3, r2
 800552a:	647b      	str	r3, [r7, #68]	; 0x44
 800552c:	e055      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	2200      	movs	r2, #0
 8005532:	623b      	str	r3, [r7, #32]
 8005534:	627a      	str	r2, [r7, #36]	; 0x24
 8005536:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800553a:	4642      	mov	r2, r8
 800553c:	464b      	mov	r3, r9
 800553e:	f04f 0000 	mov.w	r0, #0
 8005542:	f04f 0100 	mov.w	r1, #0
 8005546:	0159      	lsls	r1, r3, #5
 8005548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800554c:	0150      	lsls	r0, r2, #5
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	46c4      	mov	ip, r8
 8005554:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005558:	4640      	mov	r0, r8
 800555a:	4649      	mov	r1, r9
 800555c:	468c      	mov	ip, r1
 800555e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800556e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005572:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005576:	ebb2 040a 	subs.w	r4, r2, sl
 800557a:	eb63 050b 	sbc.w	r5, r3, fp
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	00eb      	lsls	r3, r5, #3
 8005588:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800558c:	00e2      	lsls	r2, r4, #3
 800558e:	4614      	mov	r4, r2
 8005590:	461d      	mov	r5, r3
 8005592:	4603      	mov	r3, r0
 8005594:	18e3      	adds	r3, r4, r3
 8005596:	603b      	str	r3, [r7, #0]
 8005598:	460b      	mov	r3, r1
 800559a:	eb45 0303 	adc.w	r3, r5, r3
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ac:	4629      	mov	r1, r5
 80055ae:	028b      	lsls	r3, r1, #10
 80055b0:	4620      	mov	r0, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	4604      	mov	r4, r0
 80055b6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80055ba:	4601      	mov	r1, r0
 80055bc:	028a      	lsls	r2, r1, #10
 80055be:	4610      	mov	r0, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	2200      	movs	r2, #0
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	61fa      	str	r2, [r7, #28]
 80055ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ce:	f7fb fd47 	bl	8001060 <__aeabi_uldivmod>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4613      	mov	r3, r2
 80055d8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80055da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80055de:	e00d      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80055e0:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	0b5b      	lsrs	r3, r3, #13
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	3301      	adds	r3, #1
 80055f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80055fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3748      	adds	r7, #72	; 0x48
 8005602:	46bd      	mov	sp, r7
 8005604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	00f42400 	.word	0x00f42400
 8005610:	007a1200 	.word	0x007a1200
 8005614:	08009d1c 	.word	0x08009d1c

08005618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800561c:	4b02      	ldr	r3, [pc, #8]	; (8005628 <HAL_RCC_GetHCLKFreq+0x10>)
 800561e:	681b      	ldr	r3, [r3, #0]
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	20000008 	.word	0x20000008

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005630:	f7ff fff2 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4903      	ldr	r1, [pc, #12]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40023800 	.word	0x40023800
 8005650:	08009d38 	.word	0x08009d38

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005658:	f7ff ffde 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0adb      	lsrs	r3, r3, #11
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	08009d38 	.word	0x08009d38

0800567c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005688:	4b29      	ldr	r3, [pc, #164]	; (8005730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d12c      	bne.n	80056ee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005694:	4b26      	ldr	r3, [pc, #152]	; (8005730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80056a0:	4b24      	ldr	r3, [pc, #144]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e016      	b.n	80056da <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	4b20      	ldr	r3, [pc, #128]	; (8005730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b6:	6253      	str	r3, [r2, #36]	; 0x24
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80056c4:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80056cc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ce:	4b18      	ldr	r3, [pc, #96]	; (8005730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	4a17      	ldr	r2, [pc, #92]	; (8005730 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80056e0:	d105      	bne.n	80056ee <RCC_SetFlashLatencyFromMSIRange+0x72>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056e8:	d101      	bne.n	80056ee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80056ea:	2301      	movs	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d105      	bne.n	8005700 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80056f4:	4b10      	ldr	r3, [pc, #64]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0f      	ldr	r2, [pc, #60]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056fa:	f043 0304 	orr.w	r3, r3, #4
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f023 0201 	bic.w	r2, r3, #1
 8005708:	490b      	ldr	r1, [pc, #44]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	429a      	cmp	r2, r3
 800571c:	d001      	beq.n	8005722 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40023800 	.word	0x40023800
 8005734:	40007000 	.word	0x40007000
 8005738:	40023c00 	.word	0x40023c00

0800573c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80ed 	beq.w	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800575e:	2300      	movs	r3, #0
 8005760:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005762:	4b78      	ldr	r3, [pc, #480]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10d      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576e:	4b75      	ldr	r3, [pc, #468]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	4a74      	ldr	r2, [pc, #464]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005778:	6253      	str	r3, [r2, #36]	; 0x24
 800577a:	4b72      	ldr	r3, [pc, #456]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005786:	2301      	movs	r3, #1
 8005788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578a:	4b6f      	ldr	r3, [pc, #444]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d118      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005796:	4b6c      	ldr	r3, [pc, #432]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a6b      	ldr	r2, [pc, #428]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800579c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a2:	f7fd fa69 	bl	8002c78 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	e008      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057aa:	f7fd fa65 	bl	8002c78 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b64      	cmp	r3, #100	; 0x64
 80057b6:	d901      	bls.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e0be      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057bc:	4b62      	ldr	r3, [pc, #392]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80057c8:	4b5e      	ldr	r3, [pc, #376]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80057d0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d106      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d00f      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057fa:	d108      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057fc:	4b51      	ldr	r3, [pc, #324]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005808:	d101      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e095      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800580e:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005816:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d041      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	429a      	cmp	r2, r3
 800582a:	d005      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10c      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	429a      	cmp	r2, r3
 8005844:	d02d      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d027      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005852:	4b3c      	ldr	r3, [pc, #240]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800585a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800585c:	4b3b      	ldr	r3, [pc, #236]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005862:	4b3a      	ldr	r3, [pc, #232]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005868:	4a36      	ldr	r2, [pc, #216]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d014      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fd f9fe 	bl	8002c78 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800587e:	e00a      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005880:	f7fd f9fa 	bl	8002c78 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e051      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005896:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0ee      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058ba:	d10a      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058bc:	4b21      	ldr	r3, [pc, #132]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80058cc:	491d      	ldr	r1, [pc, #116]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058de:	4919      	ldr	r1, [pc, #100]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058fc:	d10a      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80058fe:	4b11      	ldr	r3, [pc, #68]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800590e:	490d      	ldr	r1, [pc, #52]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005910:	4313      	orrs	r3, r2
 8005912:	600b      	str	r3, [r1, #0]
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005920:	4908      	ldr	r1, [pc, #32]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005922:	4313      	orrs	r3, r2
 8005924:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d105      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	4a04      	ldr	r2, [pc, #16]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005936:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40023800 	.word	0x40023800
 8005948:	40007000 	.word	0x40007000
 800594c:	424706dc 	.word	0x424706dc

08005950 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e083      	b.n	8005a6a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	7f5b      	ldrb	r3, [r3, #29]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fc ff84 	bl	8002880 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	22ca      	movs	r2, #202	; 0xca
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2253      	movs	r2, #83	; 0x53
 800598c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fa98 	bl	8005ec4 <RTC_EnterInitMode>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d008      	beq.n	80059ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	22ff      	movs	r2, #255	; 0xff
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e05e      	b.n	8005a6a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6899      	ldr	r1, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68d2      	ldr	r2, [r2, #12]
 80059e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6919      	ldr	r1, [r3, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	041a      	lsls	r2, r3, #16
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a0a:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10e      	bne.n	8005a38 <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa25 	bl	8005e6a <HAL_RTC_WaitForSynchro>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2204      	movs	r2, #4
 8005a32:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e018      	b.n	8005a6a <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	22ff      	movs	r2, #255	; 0xff
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a72:	b590      	push	{r4, r7, lr}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	7f1b      	ldrb	r3, [r3, #28]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_RTC_SetTime+0x18>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e0a3      	b.n	8005bd2 <HAL_RTC_SetTime+0x160>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2202      	movs	r2, #2
 8005a94:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d126      	bne.n	8005aea <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fa2f 	bl	8005f18 <RTC_ByteToBcd2>
 8005aba:	4603      	mov	r3, r0
 8005abc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fa28 	bl	8005f18 <RTC_ByteToBcd2>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005acc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	789b      	ldrb	r3, [r3, #2]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fa20 	bl	8005f18 <RTC_ByteToBcd2>
 8005ad8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ada:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	78db      	ldrb	r3, [r3, #3]
 8005ae2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e018      	b.n	8005b1c <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2200      	movs	r2, #0
 8005afc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b0a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b10:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	78db      	ldrb	r3, [r3, #3]
 8005b16:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	22ca      	movs	r2, #202	; 0xca
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2253      	movs	r2, #83	; 0x53
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f9c9 	bl	8005ec4 <RTC_EnterInitMode>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	22ff      	movs	r2, #255	; 0xff
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2204      	movs	r2, #4
 8005b44:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e040      	b.n	8005bd2 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b5a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b5e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b6e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6899      	ldr	r1, [r3, #8]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b96:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f966 	bl	8005e6a <HAL_RTC_WaitForSynchro>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	22ff      	movs	r2, #255	; 0xff
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e00a      	b.n	8005bd2 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	22ff      	movs	r2, #255	; 0xff
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}

08005bda <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	0c1b      	lsrs	r3, r3, #16
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	0a1b      	lsrs	r3, r3, #8
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11a      	bne.n	8005c8a <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 f97c 	bl	8005f56 <RTC_Bcd2ToByte>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	461a      	mov	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f973 	bl	8005f56 <RTC_Bcd2ToByte>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	789b      	ldrb	r3, [r3, #2]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f96a 	bl	8005f56 <RTC_Bcd2ToByte>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c94:	b590      	push	{r4, r7, lr}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	7f1b      	ldrb	r3, [r3, #28]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_RTC_SetDate+0x18>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e08d      	b.n	8005dc8 <HAL_RTC_SetDate+0x134>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10e      	bne.n	8005cdc <HAL_RTC_SetDate+0x48>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	f023 0310 	bic.w	r3, r3, #16
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	330a      	adds	r3, #10
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d11c      	bne.n	8005d1c <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	78db      	ldrb	r3, [r3, #3]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f916 	bl	8005f18 <RTC_ByteToBcd2>
 8005cec:	4603      	mov	r3, r0
 8005cee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 f90f 	bl	8005f18 <RTC_ByteToBcd2>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005cfe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	789b      	ldrb	r3, [r3, #2]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f907 	bl	8005f18 <RTC_ByteToBcd2>
 8005d0a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d0c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e00e      	b.n	8005d3a <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	22ca      	movs	r2, #202	; 0xca
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2253      	movs	r2, #83	; 0x53
 8005d48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f8ba 	bl	8005ec4 <RTC_EnterInitMode>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	22ff      	movs	r2, #255	; 0xff
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2204      	movs	r2, #4
 8005d62:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e02c      	b.n	8005dc8 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8c:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f86b 	bl	8005e6a <HAL_RTC_WaitForSynchro>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	22ff      	movs	r2, #255	; 0xff
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2204      	movs	r2, #4
 8005da6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e00a      	b.n	8005dc8 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	22ff      	movs	r2, #255	; 0xff
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
  }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd90      	pop	{r4, r7, pc}

08005dd0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005de6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	0b5b      	lsrs	r3, r3, #13
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d11a      	bne.n	8005e60 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	78db      	ldrb	r3, [r3, #3]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f891 	bl	8005f56 <RTC_Bcd2ToByte>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 f888 	bl	8005f56 <RTC_Bcd2ToByte>
 8005e46:	4603      	mov	r3, r0
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	789b      	ldrb	r3, [r3, #2]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 f87f 	bl	8005f56 <RTC_Bcd2ToByte>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11c      	bne.n	8005eba <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e90:	f7fc fef2 	bl	8002c78 <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e96:	e009      	b.n	8005eac <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005e98:	f7fc feee 	bl	8002c78 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea6:	d901      	bls.n	8005eac <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e007      	b.n	8005ebc <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0ee      	beq.n	8005e98 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d119      	bne.n	8005f0e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ee4:	f7fc fec8 	bl	8002c78 <HAL_GetTick>
 8005ee8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005eea:	e009      	b.n	8005f00 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005eec:	f7fc fec4 	bl	8002c78 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005efa:	d901      	bls.n	8005f00 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e007      	b.n	8005f10 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0ee      	beq.n	8005eec <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8005f2a:	e005      	b.n	8005f38 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005f32:	7afb      	ldrb	r3, [r7, #11]
 8005f34:	3b0a      	subs	r3, #10
 8005f36:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8005f38:	7afb      	ldrb	r3, [r7, #11]
 8005f3a:	2b09      	cmp	r3, #9
 8005f3c:	d8f6      	bhi.n	8005f2c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	b2db      	uxtb	r3, r3
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr

08005f56 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	b2db      	uxtb	r3, r3
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	7f1b      	ldrb	r3, [r3, #28]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e09e      	b.n	80060e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2202      	movs	r2, #2
 8005fae:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	22ca      	movs	r2, #202	; 0xca
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2253      	movs	r2, #83	; 0x53
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01e      	beq.n	800600c <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
  {
    tickstart = HAL_GetTick();
 8005fce:	f7fc fe53 	bl	8002c78 <HAL_GetTick>
 8005fd2:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005fd4:	e013      	b.n	8005ffe <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fd6:	f7fc fe4f 	bl	8002c78 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe4:	d90b      	bls.n	8005ffe <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	22ff      	movs	r2, #255	; 0xff
 8005fec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e071      	b.n	80060e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e4      	bne.n	8005fd6 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601a:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800602c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800602e:	f7fc fe23 	bl	8002c78 <HAL_GetTick>
 8006032:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006034:	e013      	b.n	800605e <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006036:	f7fc fe1f 	bl	8002c78 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006044:	d90b      	bls.n	800605e <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	22ff      	movs	r2, #255	; 0xff
 800604c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2203      	movs	r2, #3
 8006052:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e041      	b.n	80060e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x156>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0e4      	beq.n	8006036 <HAL_RTCEx_SetWakeUpTimer_IT+0xaa>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0207 	bic.w	r2, r2, #7
 8006082:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6899      	ldr	r1, [r3, #8]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	430a      	orrs	r2, r1
 8006092:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006094:	4b15      	ldr	r3, [pc, #84]	; (80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a14      	ldr	r2, [pc, #80]	; (80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 800609a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800609e:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a11      	ldr	r2, [pc, #68]	; (80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x160>)
 80060a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060aa:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ba:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060ca:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	22ff      	movs	r2, #255	; 0xff
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40010400 	.word	0x40010400

080060f0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fb feaa 	bl	8001e60 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800611c:	60da      	str	r2, [r3, #12]
  }


  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800611e:	4b05      	ldr	r3, [pc, #20]	; (8006134 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8006120:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006124:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	775a      	strb	r2, [r3, #29]
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40010400 	.word	0x40010400

08006138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e03f      	b.n	80061ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fc fbaa 	bl	80028b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2224      	movs	r2, #36	; 0x24
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800617a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fc85 	bl	8006a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b08a      	sub	sp, #40	; 0x28
 80061d6:	af02      	add	r7, sp, #8
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d17c      	bne.n	80062ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_UART_Transmit+0x2c>
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e075      	b.n	80062ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_UART_Transmit+0x3e>
 800620c:	2302      	movs	r3, #2
 800620e:	e06e      	b.n	80062ee <HAL_UART_Transmit+0x11c>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2221      	movs	r2, #33	; 0x21
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006226:	f7fc fd27 	bl	8002c78 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	88fa      	ldrh	r2, [r7, #6]
 8006230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	88fa      	ldrh	r2, [r7, #6]
 8006236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d108      	bne.n	8006254 <HAL_UART_Transmit+0x82>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	e003      	b.n	800625c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006264:	e02a      	b.n	80062bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2200      	movs	r2, #0
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fa38 	bl	80066e6 <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e036      	b.n	80062ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	3302      	adds	r3, #2
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e007      	b.n	80062ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1cf      	bne.n	8006266 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	2140      	movs	r1, #64	; 0x40
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fa08 	bl	80066e6 <UART_WaitOnFlagUntilTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e006      	b.n	80062ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	4613      	mov	r3, r2
 8006302:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b20      	cmp	r3, #32
 800630e:	d11d      	bne.n	800634c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_UART_Receive_IT+0x26>
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e016      	b.n	800634e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UART_Receive_IT+0x38>
 800632a:	2302      	movs	r3, #2
 800632c:	e00f      	b.n	800634e <HAL_UART_Receive_IT+0x58>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	461a      	mov	r2, r3
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fa19 	bl	800677a <UART_Start_Receive_IT>
 8006348:	4603      	mov	r3, r0
 800634a:	e000      	b.n	800634e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800634c:	2302      	movs	r3, #2
  }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006378:	2300      	movs	r3, #0
 800637a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10d      	bne.n	80063aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <HAL_UART_IRQHandler+0x52>
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fac9 	bl	800693a <UART_Receive_IT>
      return;
 80063a8:	e17b      	b.n	80066a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80b1 	beq.w	8006514 <HAL_UART_IRQHandler+0x1bc>
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <HAL_UART_IRQHandler+0x70>
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 80a6 	beq.w	8006514 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_UART_IRQHandler+0x90>
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	f043 0201 	orr.w	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_UART_IRQHandler+0xb0>
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	f043 0202 	orr.w	r2, r3, #2
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HAL_UART_IRQHandler+0xd0>
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	f043 0204 	orr.w	r2, r3, #4
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00f      	beq.n	8006452 <HAL_UART_IRQHandler+0xfa>
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_UART_IRQHandler+0xee>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f043 0208 	orr.w	r2, r3, #8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 811e 	beq.w	8006698 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <HAL_UART_IRQHandler+0x11e>
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fa62 	bl	800693a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <HAL_UART_IRQHandler+0x146>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d031      	beq.n	8006502 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f9a4 	bl	80067ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d123      	bne.n	80064fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d013      	beq.n	80064f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	4a76      	ldr	r2, [pc, #472]	; (80066a8 <HAL_UART_IRQHandler+0x350>)
 80064d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fd f96a 	bl	80037b0 <HAL_DMA_Abort_IT>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d016      	beq.n	8006510 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064ec:	4610      	mov	r0, r2
 80064ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f0:	e00e      	b.n	8006510 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f8e3 	bl	80066be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	e00a      	b.n	8006510 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8df 	bl	80066be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	e006      	b.n	8006510 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8db 	bl	80066be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800650e:	e0c3      	b.n	8006698 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006510:	bf00      	nop
    return;
 8006512:	e0c1      	b.n	8006698 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	2b01      	cmp	r3, #1
 800651a:	f040 80a1 	bne.w	8006660 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 809b 	beq.w	8006660 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8095 	beq.w	8006660 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d14e      	bne.n	80065f8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006564:	8a3b      	ldrh	r3, [r7, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8098 	beq.w	800669c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006570:	8a3a      	ldrh	r2, [r7, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	f080 8092 	bcs.w	800669c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8a3a      	ldrh	r2, [r7, #16]
 800657c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	2b20      	cmp	r3, #32
 8006586:	d02b      	beq.n	80065e0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006596:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695a      	ldr	r2, [r3, #20]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0210 	bic.w	r2, r2, #16
 80065d4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fd f8ab 	bl	8003736 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f86d 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80065f6:	e051      	b.n	800669c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006600:	b29b      	uxth	r3, r3
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d047      	beq.n	80066a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006610:	8a7b      	ldrh	r3, [r7, #18]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d044      	beq.n	80066a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006624:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0201 	bic.w	r2, r2, #1
 8006634:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0210 	bic.w	r2, r2, #16
 8006652:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006654:	8a7b      	ldrh	r3, [r7, #18]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f839 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800665e:	e01f      	b.n	80066a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <HAL_UART_IRQHandler+0x324>
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f8f9 	bl	800686c <UART_Transmit_IT>
    return;
 800667a:	e012      	b.n	80066a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <HAL_UART_IRQHandler+0x34a>
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f93a 	bl	800690a <UART_EndTransmit_IT>
    return;
 8006696:	e004      	b.n	80066a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80066a0:	bf00      	nop
  }
}
 80066a2:	3728      	adds	r7, #40	; 0x28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	08006845 	.word	0x08006845

080066ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr

080066be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f6:	e02c      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d028      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0x30>
 8006706:	f7fc fab7 	bl	8002c78 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	429a      	cmp	r2, r3
 8006714:	d21d      	bcs.n	8006752 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006724:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695a      	ldr	r2, [r3, #20]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e00f      	b.n	8006772 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4013      	ands	r3, r2
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	429a      	cmp	r2, r3
 800676e:	d0c3      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	4613      	mov	r3, r2
 8006786:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2222      	movs	r2, #34	; 0x22
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067be:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0201 	orr.w	r2, r2, #1
 80067ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0220 	orr.w	r2, r2, #32
 80067de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006802:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0201 	bic.w	r2, r2, #1
 8006812:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	2b01      	cmp	r3, #1
 800681a:	d107      	bne.n	800682c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0210 	bic.w	r2, r2, #16
 800682a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	; 0x30
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff ff2d 	bl	80066be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b21      	cmp	r3, #33	; 0x21
 800687e:	d13e      	bne.n	80068fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006888:	d114      	bne.n	80068b4 <UART_Transmit_IT+0x48>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d110      	bne.n	80068b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]
 80068b2:	e008      	b.n	80068c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	1c59      	adds	r1, r3, #1
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6211      	str	r1, [r2, #32]
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4619      	mov	r1, r3
 80068d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10f      	bne.n	80068fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068fe:	2302      	movs	r3, #2
  }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006920:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff febe 	bl	80066ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b22      	cmp	r3, #34	; 0x22
 800694c:	f040 8099 	bne.w	8006a82 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006958:	d117      	bne.n	800698a <UART_Receive_IT+0x50>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d113      	bne.n	800698a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006978:	b29a      	uxth	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	1c9a      	adds	r2, r3, #2
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	629a      	str	r2, [r3, #40]	; 0x28
 8006988:	e026      	b.n	80069d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699c:	d007      	beq.n	80069ae <UART_Receive_IT+0x74>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <UART_Receive_IT+0x82>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	e008      	b.n	80069ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4619      	mov	r1, r3
 80069e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d148      	bne.n	8006a7e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0220 	bic.w	r2, r2, #32
 80069fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695a      	ldr	r2, [r3, #20]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d123      	bne.n	8006a74 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0210 	bic.w	r2, r2, #16
 8006a40:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d10a      	bne.n	8006a66 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fe2f 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
 8006a72:	e002      	b.n	8006a7a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fb f9e1 	bl	8001e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e002      	b.n	8006a84 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e000      	b.n	8006a84 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006a82:	2302      	movs	r3, #2
  }
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006acc:	f023 030c 	bic.w	r3, r3, #12
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a55      	ldr	r2, [pc, #340]	; (8006c4c <UART_SetConfig+0x1c0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d103      	bne.n	8006b02 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006afa:	f7fe fdab 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	e002      	b.n	8006b08 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b02:	f7fe fd93 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8006b06:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b10:	d14c      	bne.n	8006bac <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009a      	lsls	r2, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b28:	4a49      	ldr	r2, [pc, #292]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	0119      	lsls	r1, r3, #4
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009a      	lsls	r2, r3, #2
 8006b3c:	441a      	add	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b48:	4b41      	ldr	r3, [pc, #260]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006b4a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	2064      	movs	r0, #100	; 0x64
 8006b52:	fb00 f303 	mul.w	r3, r0, r3
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	3332      	adds	r3, #50	; 0x32
 8006b5c:	4a3c      	ldr	r2, [pc, #240]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b62:	095b      	lsrs	r3, r3, #5
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b6a:	4419      	add	r1, r3
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	009a      	lsls	r2, r3, #2
 8006b76:	441a      	add	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b82:	4b33      	ldr	r3, [pc, #204]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006b84:	fba3 0302 	umull	r0, r3, r3, r2
 8006b88:	095b      	lsrs	r3, r3, #5
 8006b8a:	2064      	movs	r0, #100	; 0x64
 8006b8c:	fb00 f303 	mul.w	r3, r0, r3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	3332      	adds	r3, #50	; 0x32
 8006b96:	4a2e      	ldr	r2, [pc, #184]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006b98:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	f003 0207 	and.w	r2, r3, #7
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006baa:	e04a      	b.n	8006c42 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009a      	lsls	r2, r3, #2
 8006bb6:	441a      	add	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc2:	4a23      	ldr	r2, [pc, #140]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	0119      	lsls	r1, r3, #4
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009a      	lsls	r2, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	fbb2 f2f3 	udiv	r2, r2, r3
 8006be2:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006be4:	fba3 0302 	umull	r0, r3, r3, r2
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	2064      	movs	r0, #100	; 0x64
 8006bec:	fb00 f303 	mul.w	r3, r0, r3
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	3332      	adds	r3, #50	; 0x32
 8006bf6:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c02:	4419      	add	r1, r3
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009a      	lsls	r2, r3, #2
 8006c0e:	441a      	add	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006c1c:	fba3 0302 	umull	r0, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	2064      	movs	r0, #100	; 0x64
 8006c24:	fb00 f303 	mul.w	r3, r0, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	3332      	adds	r3, #50	; 0x32
 8006c2e:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <UART_SetConfig+0x1c4>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f003 020f 	and.w	r2, r3, #15
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	440a      	add	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40013800 	.word	0x40013800
 8006c50:	51eb851f 	.word	0x51eb851f

08006c54 <__errno>:
 8006c54:	4b01      	ldr	r3, [pc, #4]	; (8006c5c <__errno+0x8>)
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000014 	.word	0x20000014

08006c60 <__libc_init_array>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	2600      	movs	r6, #0
 8006c64:	4d0c      	ldr	r5, [pc, #48]	; (8006c98 <__libc_init_array+0x38>)
 8006c66:	4c0d      	ldr	r4, [pc, #52]	; (8006c9c <__libc_init_array+0x3c>)
 8006c68:	1b64      	subs	r4, r4, r5
 8006c6a:	10a4      	asrs	r4, r4, #2
 8006c6c:	42a6      	cmp	r6, r4
 8006c6e:	d109      	bne.n	8006c84 <__libc_init_array+0x24>
 8006c70:	f002 fefa 	bl	8009a68 <_init>
 8006c74:	2600      	movs	r6, #0
 8006c76:	4d0a      	ldr	r5, [pc, #40]	; (8006ca0 <__libc_init_array+0x40>)
 8006c78:	4c0a      	ldr	r4, [pc, #40]	; (8006ca4 <__libc_init_array+0x44>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	42a6      	cmp	r6, r4
 8006c80:	d105      	bne.n	8006c8e <__libc_init_array+0x2e>
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c88:	4798      	blx	r3
 8006c8a:	3601      	adds	r6, #1
 8006c8c:	e7ee      	b.n	8006c6c <__libc_init_array+0xc>
 8006c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c92:	4798      	blx	r3
 8006c94:	3601      	adds	r6, #1
 8006c96:	e7f2      	b.n	8006c7e <__libc_init_array+0x1e>
 8006c98:	0800a124 	.word	0x0800a124
 8006c9c:	0800a124 	.word	0x0800a124
 8006ca0:	0800a124 	.word	0x0800a124
 8006ca4:	0800a128 	.word	0x0800a128

08006ca8 <memset>:
 8006ca8:	4603      	mov	r3, r0
 8006caa:	4402      	add	r2, r0
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d100      	bne.n	8006cb2 <memset+0xa>
 8006cb0:	4770      	bx	lr
 8006cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb6:	e7f9      	b.n	8006cac <memset+0x4>

08006cb8 <__cvt>:
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbe:	461f      	mov	r7, r3
 8006cc0:	bfbb      	ittet	lt
 8006cc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006cc6:	461f      	movlt	r7, r3
 8006cc8:	2300      	movge	r3, #0
 8006cca:	232d      	movlt	r3, #45	; 0x2d
 8006ccc:	b088      	sub	sp, #32
 8006cce:	4614      	mov	r4, r2
 8006cd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006cd4:	7013      	strb	r3, [r2, #0]
 8006cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006cdc:	f023 0820 	bic.w	r8, r3, #32
 8006ce0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ce4:	d005      	beq.n	8006cf2 <__cvt+0x3a>
 8006ce6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cea:	d100      	bne.n	8006cee <__cvt+0x36>
 8006cec:	3501      	adds	r5, #1
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e000      	b.n	8006cf4 <__cvt+0x3c>
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	aa07      	add	r2, sp, #28
 8006cf6:	9204      	str	r2, [sp, #16]
 8006cf8:	aa06      	add	r2, sp, #24
 8006cfa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006cfe:	e9cd 3500 	strd	r3, r5, [sp]
 8006d02:	4622      	mov	r2, r4
 8006d04:	463b      	mov	r3, r7
 8006d06:	f000 fce3 	bl	80076d0 <_dtoa_r>
 8006d0a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d0e:	4606      	mov	r6, r0
 8006d10:	d102      	bne.n	8006d18 <__cvt+0x60>
 8006d12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d14:	07db      	lsls	r3, r3, #31
 8006d16:	d522      	bpl.n	8006d5e <__cvt+0xa6>
 8006d18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d1c:	eb06 0905 	add.w	r9, r6, r5
 8006d20:	d110      	bne.n	8006d44 <__cvt+0x8c>
 8006d22:	7833      	ldrb	r3, [r6, #0]
 8006d24:	2b30      	cmp	r3, #48	; 0x30
 8006d26:	d10a      	bne.n	8006d3e <__cvt+0x86>
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	4639      	mov	r1, r7
 8006d30:	f7f9 fe52 	bl	80009d8 <__aeabi_dcmpeq>
 8006d34:	b918      	cbnz	r0, 8006d3e <__cvt+0x86>
 8006d36:	f1c5 0501 	rsb	r5, r5, #1
 8006d3a:	f8ca 5000 	str.w	r5, [sl]
 8006d3e:	f8da 3000 	ldr.w	r3, [sl]
 8006d42:	4499      	add	r9, r3
 8006d44:	2200      	movs	r2, #0
 8006d46:	2300      	movs	r3, #0
 8006d48:	4620      	mov	r0, r4
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	f7f9 fe44 	bl	80009d8 <__aeabi_dcmpeq>
 8006d50:	b108      	cbz	r0, 8006d56 <__cvt+0x9e>
 8006d52:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d56:	2230      	movs	r2, #48	; 0x30
 8006d58:	9b07      	ldr	r3, [sp, #28]
 8006d5a:	454b      	cmp	r3, r9
 8006d5c:	d307      	bcc.n	8006d6e <__cvt+0xb6>
 8006d5e:	4630      	mov	r0, r6
 8006d60:	9b07      	ldr	r3, [sp, #28]
 8006d62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d64:	1b9b      	subs	r3, r3, r6
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	b008      	add	sp, #32
 8006d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6e:	1c59      	adds	r1, r3, #1
 8006d70:	9107      	str	r1, [sp, #28]
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	e7f0      	b.n	8006d58 <__cvt+0xa0>

08006d76 <__exponent>:
 8006d76:	4603      	mov	r3, r0
 8006d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	f803 2b02 	strb.w	r2, [r3], #2
 8006d80:	bfb6      	itet	lt
 8006d82:	222d      	movlt	r2, #45	; 0x2d
 8006d84:	222b      	movge	r2, #43	; 0x2b
 8006d86:	4249      	neglt	r1, r1
 8006d88:	2909      	cmp	r1, #9
 8006d8a:	7042      	strb	r2, [r0, #1]
 8006d8c:	dd2b      	ble.n	8006de6 <__exponent+0x70>
 8006d8e:	f10d 0407 	add.w	r4, sp, #7
 8006d92:	46a4      	mov	ip, r4
 8006d94:	270a      	movs	r7, #10
 8006d96:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d9a:	460a      	mov	r2, r1
 8006d9c:	46a6      	mov	lr, r4
 8006d9e:	fb07 1516 	mls	r5, r7, r6, r1
 8006da2:	2a63      	cmp	r2, #99	; 0x63
 8006da4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006da8:	4631      	mov	r1, r6
 8006daa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006db2:	dcf0      	bgt.n	8006d96 <__exponent+0x20>
 8006db4:	3130      	adds	r1, #48	; 0x30
 8006db6:	f1ae 0502 	sub.w	r5, lr, #2
 8006dba:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	1c44      	adds	r4, r0, #1
 8006dc2:	4561      	cmp	r1, ip
 8006dc4:	d30a      	bcc.n	8006ddc <__exponent+0x66>
 8006dc6:	f10d 0209 	add.w	r2, sp, #9
 8006dca:	eba2 020e 	sub.w	r2, r2, lr
 8006dce:	4565      	cmp	r5, ip
 8006dd0:	bf88      	it	hi
 8006dd2:	2200      	movhi	r2, #0
 8006dd4:	4413      	add	r3, r2
 8006dd6:	1a18      	subs	r0, r3, r0
 8006dd8:	b003      	add	sp, #12
 8006dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ddc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006de0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006de4:	e7ed      	b.n	8006dc2 <__exponent+0x4c>
 8006de6:	2330      	movs	r3, #48	; 0x30
 8006de8:	3130      	adds	r1, #48	; 0x30
 8006dea:	7083      	strb	r3, [r0, #2]
 8006dec:	70c1      	strb	r1, [r0, #3]
 8006dee:	1d03      	adds	r3, r0, #4
 8006df0:	e7f1      	b.n	8006dd6 <__exponent+0x60>
	...

08006df4 <_printf_float>:
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	b091      	sub	sp, #68	; 0x44
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e00:	4616      	mov	r6, r2
 8006e02:	461f      	mov	r7, r3
 8006e04:	4605      	mov	r5, r0
 8006e06:	f001 fa51 	bl	80082ac <_localeconv_r>
 8006e0a:	6803      	ldr	r3, [r0, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e10:	f7f9 f9b6 	bl	8000180 <strlen>
 8006e14:	2300      	movs	r3, #0
 8006e16:	930e      	str	r3, [sp, #56]	; 0x38
 8006e18:	f8d8 3000 	ldr.w	r3, [r8]
 8006e1c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e1e:	3307      	adds	r3, #7
 8006e20:	f023 0307 	bic.w	r3, r3, #7
 8006e24:	f103 0208 	add.w	r2, r3, #8
 8006e28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e2c:	f8d4 b000 	ldr.w	fp, [r4]
 8006e30:	f8c8 2000 	str.w	r2, [r8]
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e3c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006e40:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	4b9c      	ldr	r3, [pc, #624]	; (80070c0 <_printf_float+0x2cc>)
 8006e4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e50:	f7f9 fdf4 	bl	8000a3c <__aeabi_dcmpun>
 8006e54:	bb70      	cbnz	r0, 8006eb4 <_printf_float+0xc0>
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4b98      	ldr	r3, [pc, #608]	; (80070c0 <_printf_float+0x2cc>)
 8006e5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e60:	f7f9 fdce 	bl	8000a00 <__aeabi_dcmple>
 8006e64:	bb30      	cbnz	r0, 8006eb4 <_printf_float+0xc0>
 8006e66:	2200      	movs	r2, #0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	4651      	mov	r1, sl
 8006e6e:	f7f9 fdbd 	bl	80009ec <__aeabi_dcmplt>
 8006e72:	b110      	cbz	r0, 8006e7a <_printf_float+0x86>
 8006e74:	232d      	movs	r3, #45	; 0x2d
 8006e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7a:	4b92      	ldr	r3, [pc, #584]	; (80070c4 <_printf_float+0x2d0>)
 8006e7c:	4892      	ldr	r0, [pc, #584]	; (80070c8 <_printf_float+0x2d4>)
 8006e7e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006e82:	bf94      	ite	ls
 8006e84:	4698      	movls	r8, r3
 8006e86:	4680      	movhi	r8, r0
 8006e88:	2303      	movs	r3, #3
 8006e8a:	f04f 0a00 	mov.w	sl, #0
 8006e8e:	6123      	str	r3, [r4, #16]
 8006e90:	f02b 0304 	bic.w	r3, fp, #4
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	4633      	mov	r3, r6
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	9700      	str	r7, [sp, #0]
 8006e9e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006ea0:	f000 f9d4 	bl	800724c <_printf_common>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	f040 8090 	bne.w	8006fca <_printf_float+0x1d6>
 8006eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006eae:	b011      	add	sp, #68	; 0x44
 8006eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	4653      	mov	r3, sl
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4651      	mov	r1, sl
 8006ebc:	f7f9 fdbe 	bl	8000a3c <__aeabi_dcmpun>
 8006ec0:	b148      	cbz	r0, 8006ed6 <_printf_float+0xe2>
 8006ec2:	f1ba 0f00 	cmp.w	sl, #0
 8006ec6:	bfb8      	it	lt
 8006ec8:	232d      	movlt	r3, #45	; 0x2d
 8006eca:	4880      	ldr	r0, [pc, #512]	; (80070cc <_printf_float+0x2d8>)
 8006ecc:	bfb8      	it	lt
 8006ece:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ed2:	4b7f      	ldr	r3, [pc, #508]	; (80070d0 <_printf_float+0x2dc>)
 8006ed4:	e7d3      	b.n	8006e7e <_printf_float+0x8a>
 8006ed6:	6863      	ldr	r3, [r4, #4]
 8006ed8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	d142      	bne.n	8006f66 <_printf_float+0x172>
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	9206      	str	r2, [sp, #24]
 8006ee8:	aa0e      	add	r2, sp, #56	; 0x38
 8006eea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006eee:	aa0d      	add	r2, sp, #52	; 0x34
 8006ef0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006ef4:	9203      	str	r2, [sp, #12]
 8006ef6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006efa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	4642      	mov	r2, r8
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	4628      	mov	r0, r5
 8006f08:	4653      	mov	r3, sl
 8006f0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f0c:	f7ff fed4 	bl	8006cb8 <__cvt>
 8006f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f12:	4680      	mov	r8, r0
 8006f14:	2947      	cmp	r1, #71	; 0x47
 8006f16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f18:	d108      	bne.n	8006f2c <_printf_float+0x138>
 8006f1a:	1cc8      	adds	r0, r1, #3
 8006f1c:	db02      	blt.n	8006f24 <_printf_float+0x130>
 8006f1e:	6863      	ldr	r3, [r4, #4]
 8006f20:	4299      	cmp	r1, r3
 8006f22:	dd40      	ble.n	8006fa6 <_printf_float+0x1b2>
 8006f24:	f1a9 0902 	sub.w	r9, r9, #2
 8006f28:	fa5f f989 	uxtb.w	r9, r9
 8006f2c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f30:	d81f      	bhi.n	8006f72 <_printf_float+0x17e>
 8006f32:	464a      	mov	r2, r9
 8006f34:	3901      	subs	r1, #1
 8006f36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f3a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f3c:	f7ff ff1b 	bl	8006d76 <__exponent>
 8006f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f42:	4682      	mov	sl, r0
 8006f44:	1813      	adds	r3, r2, r0
 8006f46:	2a01      	cmp	r2, #1
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	dc02      	bgt.n	8006f52 <_printf_float+0x15e>
 8006f4c:	6822      	ldr	r2, [r4, #0]
 8006f4e:	07d2      	lsls	r2, r2, #31
 8006f50:	d501      	bpl.n	8006f56 <_printf_float+0x162>
 8006f52:	3301      	adds	r3, #1
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d09b      	beq.n	8006e96 <_printf_float+0xa2>
 8006f5e:	232d      	movs	r3, #45	; 0x2d
 8006f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f64:	e797      	b.n	8006e96 <_printf_float+0xa2>
 8006f66:	2947      	cmp	r1, #71	; 0x47
 8006f68:	d1bc      	bne.n	8006ee4 <_printf_float+0xf0>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1ba      	bne.n	8006ee4 <_printf_float+0xf0>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e7b7      	b.n	8006ee2 <_printf_float+0xee>
 8006f72:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006f76:	d118      	bne.n	8006faa <_printf_float+0x1b6>
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	6863      	ldr	r3, [r4, #4]
 8006f7c:	dd0b      	ble.n	8006f96 <_printf_float+0x1a2>
 8006f7e:	6121      	str	r1, [r4, #16]
 8006f80:	b913      	cbnz	r3, 8006f88 <_printf_float+0x194>
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	07d0      	lsls	r0, r2, #31
 8006f86:	d502      	bpl.n	8006f8e <_printf_float+0x19a>
 8006f88:	3301      	adds	r3, #1
 8006f8a:	440b      	add	r3, r1
 8006f8c:	6123      	str	r3, [r4, #16]
 8006f8e:	f04f 0a00 	mov.w	sl, #0
 8006f92:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f94:	e7df      	b.n	8006f56 <_printf_float+0x162>
 8006f96:	b913      	cbnz	r3, 8006f9e <_printf_float+0x1aa>
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	07d2      	lsls	r2, r2, #31
 8006f9c:	d501      	bpl.n	8006fa2 <_printf_float+0x1ae>
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	e7f4      	b.n	8006f8c <_printf_float+0x198>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e7f2      	b.n	8006f8c <_printf_float+0x198>
 8006fa6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fac:	4299      	cmp	r1, r3
 8006fae:	db05      	blt.n	8006fbc <_printf_float+0x1c8>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	6121      	str	r1, [r4, #16]
 8006fb4:	07d8      	lsls	r0, r3, #31
 8006fb6:	d5ea      	bpl.n	8006f8e <_printf_float+0x19a>
 8006fb8:	1c4b      	adds	r3, r1, #1
 8006fba:	e7e7      	b.n	8006f8c <_printf_float+0x198>
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	bfcc      	ite	gt
 8006fc0:	2201      	movgt	r2, #1
 8006fc2:	f1c1 0202 	rsble	r2, r1, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	e7e0      	b.n	8006f8c <_printf_float+0x198>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	055a      	lsls	r2, r3, #21
 8006fce:	d407      	bmi.n	8006fe0 <_printf_float+0x1ec>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d12b      	bne.n	8007036 <_printf_float+0x242>
 8006fde:	e764      	b.n	8006eaa <_printf_float+0xb6>
 8006fe0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fe4:	f240 80dd 	bls.w	80071a2 <_printf_float+0x3ae>
 8006fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fec:	2200      	movs	r2, #0
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f7f9 fcf2 	bl	80009d8 <__aeabi_dcmpeq>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d033      	beq.n	8007060 <_printf_float+0x26c>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	4a35      	ldr	r2, [pc, #212]	; (80070d4 <_printf_float+0x2e0>)
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f af51 	beq.w	8006eaa <_printf_float+0xb6>
 8007008:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800700c:	429a      	cmp	r2, r3
 800700e:	db02      	blt.n	8007016 <_printf_float+0x222>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	07d8      	lsls	r0, r3, #31
 8007014:	d50f      	bpl.n	8007036 <_printf_float+0x242>
 8007016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800701a:	4631      	mov	r1, r6
 800701c:	4628      	mov	r0, r5
 800701e:	47b8      	blx	r7
 8007020:	3001      	adds	r0, #1
 8007022:	f43f af42 	beq.w	8006eaa <_printf_float+0xb6>
 8007026:	f04f 0800 	mov.w	r8, #0
 800702a:	f104 091a 	add.w	r9, r4, #26
 800702e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007030:	3b01      	subs	r3, #1
 8007032:	4543      	cmp	r3, r8
 8007034:	dc09      	bgt.n	800704a <_printf_float+0x256>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	079b      	lsls	r3, r3, #30
 800703a:	f100 8102 	bmi.w	8007242 <_printf_float+0x44e>
 800703e:	68e0      	ldr	r0, [r4, #12]
 8007040:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007042:	4298      	cmp	r0, r3
 8007044:	bfb8      	it	lt
 8007046:	4618      	movlt	r0, r3
 8007048:	e731      	b.n	8006eae <_printf_float+0xba>
 800704a:	2301      	movs	r3, #1
 800704c:	464a      	mov	r2, r9
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	f43f af28 	beq.w	8006eaa <_printf_float+0xb6>
 800705a:	f108 0801 	add.w	r8, r8, #1
 800705e:	e7e6      	b.n	800702e <_printf_float+0x23a>
 8007060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007062:	2b00      	cmp	r3, #0
 8007064:	dc38      	bgt.n	80070d8 <_printf_float+0x2e4>
 8007066:	2301      	movs	r3, #1
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	4a19      	ldr	r2, [pc, #100]	; (80070d4 <_printf_float+0x2e0>)
 800706e:	47b8      	blx	r7
 8007070:	3001      	adds	r0, #1
 8007072:	f43f af1a 	beq.w	8006eaa <_printf_float+0xb6>
 8007076:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800707a:	4313      	orrs	r3, r2
 800707c:	d102      	bne.n	8007084 <_printf_float+0x290>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	07d9      	lsls	r1, r3, #31
 8007082:	d5d8      	bpl.n	8007036 <_printf_float+0x242>
 8007084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f af0b 	beq.w	8006eaa <_printf_float+0xb6>
 8007094:	f04f 0900 	mov.w	r9, #0
 8007098:	f104 0a1a 	add.w	sl, r4, #26
 800709c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800709e:	425b      	negs	r3, r3
 80070a0:	454b      	cmp	r3, r9
 80070a2:	dc01      	bgt.n	80070a8 <_printf_float+0x2b4>
 80070a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a6:	e794      	b.n	8006fd2 <_printf_float+0x1de>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4652      	mov	r2, sl
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f aef9 	beq.w	8006eaa <_printf_float+0xb6>
 80070b8:	f109 0901 	add.w	r9, r9, #1
 80070bc:	e7ee      	b.n	800709c <_printf_float+0x2a8>
 80070be:	bf00      	nop
 80070c0:	7fefffff 	.word	0x7fefffff
 80070c4:	08009d44 	.word	0x08009d44
 80070c8:	08009d48 	.word	0x08009d48
 80070cc:	08009d50 	.word	0x08009d50
 80070d0:	08009d4c 	.word	0x08009d4c
 80070d4:	08009d54 	.word	0x08009d54
 80070d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070dc:	429a      	cmp	r2, r3
 80070de:	bfa8      	it	ge
 80070e0:	461a      	movge	r2, r3
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	4691      	mov	r9, r2
 80070e6:	dc37      	bgt.n	8007158 <_printf_float+0x364>
 80070e8:	f04f 0b00 	mov.w	fp, #0
 80070ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070f0:	f104 021a 	add.w	r2, r4, #26
 80070f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80070f8:	ebaa 0309 	sub.w	r3, sl, r9
 80070fc:	455b      	cmp	r3, fp
 80070fe:	dc33      	bgt.n	8007168 <_printf_float+0x374>
 8007100:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007104:	429a      	cmp	r2, r3
 8007106:	db3b      	blt.n	8007180 <_printf_float+0x38c>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07da      	lsls	r2, r3, #31
 800710c:	d438      	bmi.n	8007180 <_printf_float+0x38c>
 800710e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007110:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007112:	eba3 020a 	sub.w	r2, r3, sl
 8007116:	eba3 0901 	sub.w	r9, r3, r1
 800711a:	4591      	cmp	r9, r2
 800711c:	bfa8      	it	ge
 800711e:	4691      	movge	r9, r2
 8007120:	f1b9 0f00 	cmp.w	r9, #0
 8007124:	dc34      	bgt.n	8007190 <_printf_float+0x39c>
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800712e:	f104 0a1a 	add.w	sl, r4, #26
 8007132:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	eba3 0309 	sub.w	r3, r3, r9
 800713c:	4543      	cmp	r3, r8
 800713e:	f77f af7a 	ble.w	8007036 <_printf_float+0x242>
 8007142:	2301      	movs	r3, #1
 8007144:	4652      	mov	r2, sl
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	f43f aeac 	beq.w	8006eaa <_printf_float+0xb6>
 8007152:	f108 0801 	add.w	r8, r8, #1
 8007156:	e7ec      	b.n	8007132 <_printf_float+0x33e>
 8007158:	4613      	mov	r3, r2
 800715a:	4631      	mov	r1, r6
 800715c:	4642      	mov	r2, r8
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	d1c0      	bne.n	80070e8 <_printf_float+0x2f4>
 8007166:	e6a0      	b.n	8006eaa <_printf_float+0xb6>
 8007168:	2301      	movs	r3, #1
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f ae99 	beq.w	8006eaa <_printf_float+0xb6>
 8007178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800717a:	f10b 0b01 	add.w	fp, fp, #1
 800717e:	e7b9      	b.n	80070f4 <_printf_float+0x300>
 8007180:	4631      	mov	r1, r6
 8007182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007186:	4628      	mov	r0, r5
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	d1bf      	bne.n	800710e <_printf_float+0x31a>
 800718e:	e68c      	b.n	8006eaa <_printf_float+0xb6>
 8007190:	464b      	mov	r3, r9
 8007192:	4631      	mov	r1, r6
 8007194:	4628      	mov	r0, r5
 8007196:	eb08 020a 	add.w	r2, r8, sl
 800719a:	47b8      	blx	r7
 800719c:	3001      	adds	r0, #1
 800719e:	d1c2      	bne.n	8007126 <_printf_float+0x332>
 80071a0:	e683      	b.n	8006eaa <_printf_float+0xb6>
 80071a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071a4:	2a01      	cmp	r2, #1
 80071a6:	dc01      	bgt.n	80071ac <_printf_float+0x3b8>
 80071a8:	07db      	lsls	r3, r3, #31
 80071aa:	d537      	bpl.n	800721c <_printf_float+0x428>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4642      	mov	r2, r8
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f ae77 	beq.w	8006eaa <_printf_float+0xb6>
 80071bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f ae6f 	beq.w	8006eaa <_printf_float+0xb6>
 80071cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d0:	2200      	movs	r2, #0
 80071d2:	2300      	movs	r3, #0
 80071d4:	f7f9 fc00 	bl	80009d8 <__aeabi_dcmpeq>
 80071d8:	b9d8      	cbnz	r0, 8007212 <_printf_float+0x41e>
 80071da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071dc:	f108 0201 	add.w	r2, r8, #1
 80071e0:	3b01      	subs	r3, #1
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	d10e      	bne.n	800720a <_printf_float+0x416>
 80071ec:	e65d      	b.n	8006eaa <_printf_float+0xb6>
 80071ee:	2301      	movs	r3, #1
 80071f0:	464a      	mov	r2, r9
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	f43f ae56 	beq.w	8006eaa <_printf_float+0xb6>
 80071fe:	f108 0801 	add.w	r8, r8, #1
 8007202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007204:	3b01      	subs	r3, #1
 8007206:	4543      	cmp	r3, r8
 8007208:	dcf1      	bgt.n	80071ee <_printf_float+0x3fa>
 800720a:	4653      	mov	r3, sl
 800720c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007210:	e6e0      	b.n	8006fd4 <_printf_float+0x1e0>
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	f104 091a 	add.w	r9, r4, #26
 800721a:	e7f2      	b.n	8007202 <_printf_float+0x40e>
 800721c:	2301      	movs	r3, #1
 800721e:	4642      	mov	r2, r8
 8007220:	e7df      	b.n	80071e2 <_printf_float+0x3ee>
 8007222:	2301      	movs	r3, #1
 8007224:	464a      	mov	r2, r9
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	f43f ae3c 	beq.w	8006eaa <_printf_float+0xb6>
 8007232:	f108 0801 	add.w	r8, r8, #1
 8007236:	68e3      	ldr	r3, [r4, #12]
 8007238:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800723a:	1a5b      	subs	r3, r3, r1
 800723c:	4543      	cmp	r3, r8
 800723e:	dcf0      	bgt.n	8007222 <_printf_float+0x42e>
 8007240:	e6fd      	b.n	800703e <_printf_float+0x24a>
 8007242:	f04f 0800 	mov.w	r8, #0
 8007246:	f104 0919 	add.w	r9, r4, #25
 800724a:	e7f4      	b.n	8007236 <_printf_float+0x442>

0800724c <_printf_common>:
 800724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	4616      	mov	r6, r2
 8007252:	4699      	mov	r9, r3
 8007254:	688a      	ldr	r2, [r1, #8]
 8007256:	690b      	ldr	r3, [r1, #16]
 8007258:	4607      	mov	r7, r0
 800725a:	4293      	cmp	r3, r2
 800725c:	bfb8      	it	lt
 800725e:	4613      	movlt	r3, r2
 8007260:	6033      	str	r3, [r6, #0]
 8007262:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007266:	460c      	mov	r4, r1
 8007268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800726c:	b10a      	cbz	r2, 8007272 <_printf_common+0x26>
 800726e:	3301      	adds	r3, #1
 8007270:	6033      	str	r3, [r6, #0]
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	0699      	lsls	r1, r3, #26
 8007276:	bf42      	ittt	mi
 8007278:	6833      	ldrmi	r3, [r6, #0]
 800727a:	3302      	addmi	r3, #2
 800727c:	6033      	strmi	r3, [r6, #0]
 800727e:	6825      	ldr	r5, [r4, #0]
 8007280:	f015 0506 	ands.w	r5, r5, #6
 8007284:	d106      	bne.n	8007294 <_printf_common+0x48>
 8007286:	f104 0a19 	add.w	sl, r4, #25
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	6832      	ldr	r2, [r6, #0]
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	42ab      	cmp	r3, r5
 8007292:	dc28      	bgt.n	80072e6 <_printf_common+0x9a>
 8007294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007298:	1e13      	subs	r3, r2, #0
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	bf18      	it	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	0692      	lsls	r2, r2, #26
 80072a2:	d42d      	bmi.n	8007300 <_printf_common+0xb4>
 80072a4:	4649      	mov	r1, r9
 80072a6:	4638      	mov	r0, r7
 80072a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ac:	47c0      	blx	r8
 80072ae:	3001      	adds	r0, #1
 80072b0:	d020      	beq.n	80072f4 <_printf_common+0xa8>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	68e5      	ldr	r5, [r4, #12]
 80072b6:	f003 0306 	and.w	r3, r3, #6
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	bf18      	it	ne
 80072be:	2500      	movne	r5, #0
 80072c0:	6832      	ldr	r2, [r6, #0]
 80072c2:	f04f 0600 	mov.w	r6, #0
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	bf08      	it	eq
 80072ca:	1aad      	subeq	r5, r5, r2
 80072cc:	6922      	ldr	r2, [r4, #16]
 80072ce:	bf08      	it	eq
 80072d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d4:	4293      	cmp	r3, r2
 80072d6:	bfc4      	itt	gt
 80072d8:	1a9b      	subgt	r3, r3, r2
 80072da:	18ed      	addgt	r5, r5, r3
 80072dc:	341a      	adds	r4, #26
 80072de:	42b5      	cmp	r5, r6
 80072e0:	d11a      	bne.n	8007318 <_printf_common+0xcc>
 80072e2:	2000      	movs	r0, #0
 80072e4:	e008      	b.n	80072f8 <_printf_common+0xac>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4652      	mov	r2, sl
 80072ea:	4649      	mov	r1, r9
 80072ec:	4638      	mov	r0, r7
 80072ee:	47c0      	blx	r8
 80072f0:	3001      	adds	r0, #1
 80072f2:	d103      	bne.n	80072fc <_printf_common+0xb0>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7c4      	b.n	800728a <_printf_common+0x3e>
 8007300:	2030      	movs	r0, #48	; 0x30
 8007302:	18e1      	adds	r1, r4, r3
 8007304:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800730e:	4422      	add	r2, r4
 8007310:	3302      	adds	r3, #2
 8007312:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007316:	e7c5      	b.n	80072a4 <_printf_common+0x58>
 8007318:	2301      	movs	r3, #1
 800731a:	4622      	mov	r2, r4
 800731c:	4649      	mov	r1, r9
 800731e:	4638      	mov	r0, r7
 8007320:	47c0      	blx	r8
 8007322:	3001      	adds	r0, #1
 8007324:	d0e6      	beq.n	80072f4 <_printf_common+0xa8>
 8007326:	3601      	adds	r6, #1
 8007328:	e7d9      	b.n	80072de <_printf_common+0x92>
	...

0800732c <_printf_i>:
 800732c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	7e0f      	ldrb	r7, [r1, #24]
 8007332:	4691      	mov	r9, r2
 8007334:	2f78      	cmp	r7, #120	; 0x78
 8007336:	4680      	mov	r8, r0
 8007338:	460c      	mov	r4, r1
 800733a:	469a      	mov	sl, r3
 800733c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800733e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007342:	d807      	bhi.n	8007354 <_printf_i+0x28>
 8007344:	2f62      	cmp	r7, #98	; 0x62
 8007346:	d80a      	bhi.n	800735e <_printf_i+0x32>
 8007348:	2f00      	cmp	r7, #0
 800734a:	f000 80d9 	beq.w	8007500 <_printf_i+0x1d4>
 800734e:	2f58      	cmp	r7, #88	; 0x58
 8007350:	f000 80a4 	beq.w	800749c <_printf_i+0x170>
 8007354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800735c:	e03a      	b.n	80073d4 <_printf_i+0xa8>
 800735e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007362:	2b15      	cmp	r3, #21
 8007364:	d8f6      	bhi.n	8007354 <_printf_i+0x28>
 8007366:	a101      	add	r1, pc, #4	; (adr r1, 800736c <_printf_i+0x40>)
 8007368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073d9 	.word	0x080073d9
 8007374:	08007355 	.word	0x08007355
 8007378:	08007355 	.word	0x08007355
 800737c:	08007355 	.word	0x08007355
 8007380:	08007355 	.word	0x08007355
 8007384:	080073d9 	.word	0x080073d9
 8007388:	08007355 	.word	0x08007355
 800738c:	08007355 	.word	0x08007355
 8007390:	08007355 	.word	0x08007355
 8007394:	08007355 	.word	0x08007355
 8007398:	080074e7 	.word	0x080074e7
 800739c:	08007409 	.word	0x08007409
 80073a0:	080074c9 	.word	0x080074c9
 80073a4:	08007355 	.word	0x08007355
 80073a8:	08007355 	.word	0x08007355
 80073ac:	08007509 	.word	0x08007509
 80073b0:	08007355 	.word	0x08007355
 80073b4:	08007409 	.word	0x08007409
 80073b8:	08007355 	.word	0x08007355
 80073bc:	08007355 	.word	0x08007355
 80073c0:	080074d1 	.word	0x080074d1
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	1d1a      	adds	r2, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	602a      	str	r2, [r5, #0]
 80073cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0a4      	b.n	8007522 <_printf_i+0x1f6>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	6829      	ldr	r1, [r5, #0]
 80073dc:	0606      	lsls	r6, r0, #24
 80073de:	f101 0304 	add.w	r3, r1, #4
 80073e2:	d50a      	bpl.n	80073fa <_printf_i+0xce>
 80073e4:	680e      	ldr	r6, [r1, #0]
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	da03      	bge.n	80073f4 <_printf_i+0xc8>
 80073ec:	232d      	movs	r3, #45	; 0x2d
 80073ee:	4276      	negs	r6, r6
 80073f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f4:	230a      	movs	r3, #10
 80073f6:	485e      	ldr	r0, [pc, #376]	; (8007570 <_printf_i+0x244>)
 80073f8:	e019      	b.n	800742e <_printf_i+0x102>
 80073fa:	680e      	ldr	r6, [r1, #0]
 80073fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	bf18      	it	ne
 8007404:	b236      	sxthne	r6, r6
 8007406:	e7ef      	b.n	80073e8 <_printf_i+0xbc>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	6820      	ldr	r0, [r4, #0]
 800740c:	1d19      	adds	r1, r3, #4
 800740e:	6029      	str	r1, [r5, #0]
 8007410:	0601      	lsls	r1, r0, #24
 8007412:	d501      	bpl.n	8007418 <_printf_i+0xec>
 8007414:	681e      	ldr	r6, [r3, #0]
 8007416:	e002      	b.n	800741e <_printf_i+0xf2>
 8007418:	0646      	lsls	r6, r0, #25
 800741a:	d5fb      	bpl.n	8007414 <_printf_i+0xe8>
 800741c:	881e      	ldrh	r6, [r3, #0]
 800741e:	2f6f      	cmp	r7, #111	; 0x6f
 8007420:	bf0c      	ite	eq
 8007422:	2308      	moveq	r3, #8
 8007424:	230a      	movne	r3, #10
 8007426:	4852      	ldr	r0, [pc, #328]	; (8007570 <_printf_i+0x244>)
 8007428:	2100      	movs	r1, #0
 800742a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800742e:	6865      	ldr	r5, [r4, #4]
 8007430:	2d00      	cmp	r5, #0
 8007432:	bfa8      	it	ge
 8007434:	6821      	ldrge	r1, [r4, #0]
 8007436:	60a5      	str	r5, [r4, #8]
 8007438:	bfa4      	itt	ge
 800743a:	f021 0104 	bicge.w	r1, r1, #4
 800743e:	6021      	strge	r1, [r4, #0]
 8007440:	b90e      	cbnz	r6, 8007446 <_printf_i+0x11a>
 8007442:	2d00      	cmp	r5, #0
 8007444:	d04d      	beq.n	80074e2 <_printf_i+0x1b6>
 8007446:	4615      	mov	r5, r2
 8007448:	fbb6 f1f3 	udiv	r1, r6, r3
 800744c:	fb03 6711 	mls	r7, r3, r1, r6
 8007450:	5dc7      	ldrb	r7, [r0, r7]
 8007452:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007456:	4637      	mov	r7, r6
 8007458:	42bb      	cmp	r3, r7
 800745a:	460e      	mov	r6, r1
 800745c:	d9f4      	bls.n	8007448 <_printf_i+0x11c>
 800745e:	2b08      	cmp	r3, #8
 8007460:	d10b      	bne.n	800747a <_printf_i+0x14e>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	07de      	lsls	r6, r3, #31
 8007466:	d508      	bpl.n	800747a <_printf_i+0x14e>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	6861      	ldr	r1, [r4, #4]
 800746c:	4299      	cmp	r1, r3
 800746e:	bfde      	ittt	le
 8007470:	2330      	movle	r3, #48	; 0x30
 8007472:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007476:	f105 35ff 	addle.w	r5, r5, #4294967295
 800747a:	1b52      	subs	r2, r2, r5
 800747c:	6122      	str	r2, [r4, #16]
 800747e:	464b      	mov	r3, r9
 8007480:	4621      	mov	r1, r4
 8007482:	4640      	mov	r0, r8
 8007484:	f8cd a000 	str.w	sl, [sp]
 8007488:	aa03      	add	r2, sp, #12
 800748a:	f7ff fedf 	bl	800724c <_printf_common>
 800748e:	3001      	adds	r0, #1
 8007490:	d14c      	bne.n	800752c <_printf_i+0x200>
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	b004      	add	sp, #16
 8007498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749c:	4834      	ldr	r0, [pc, #208]	; (8007570 <_printf_i+0x244>)
 800749e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074a2:	6829      	ldr	r1, [r5, #0]
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80074aa:	6029      	str	r1, [r5, #0]
 80074ac:	061d      	lsls	r5, r3, #24
 80074ae:	d514      	bpl.n	80074da <_printf_i+0x1ae>
 80074b0:	07df      	lsls	r7, r3, #31
 80074b2:	bf44      	itt	mi
 80074b4:	f043 0320 	orrmi.w	r3, r3, #32
 80074b8:	6023      	strmi	r3, [r4, #0]
 80074ba:	b91e      	cbnz	r6, 80074c4 <_printf_i+0x198>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	f023 0320 	bic.w	r3, r3, #32
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	2310      	movs	r3, #16
 80074c6:	e7af      	b.n	8007428 <_printf_i+0xfc>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	f043 0320 	orr.w	r3, r3, #32
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	2378      	movs	r3, #120	; 0x78
 80074d2:	4828      	ldr	r0, [pc, #160]	; (8007574 <_printf_i+0x248>)
 80074d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074d8:	e7e3      	b.n	80074a2 <_printf_i+0x176>
 80074da:	0659      	lsls	r1, r3, #25
 80074dc:	bf48      	it	mi
 80074de:	b2b6      	uxthmi	r6, r6
 80074e0:	e7e6      	b.n	80074b0 <_printf_i+0x184>
 80074e2:	4615      	mov	r5, r2
 80074e4:	e7bb      	b.n	800745e <_printf_i+0x132>
 80074e6:	682b      	ldr	r3, [r5, #0]
 80074e8:	6826      	ldr	r6, [r4, #0]
 80074ea:	1d18      	adds	r0, r3, #4
 80074ec:	6961      	ldr	r1, [r4, #20]
 80074ee:	6028      	str	r0, [r5, #0]
 80074f0:	0635      	lsls	r5, r6, #24
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	d501      	bpl.n	80074fa <_printf_i+0x1ce>
 80074f6:	6019      	str	r1, [r3, #0]
 80074f8:	e002      	b.n	8007500 <_printf_i+0x1d4>
 80074fa:	0670      	lsls	r0, r6, #25
 80074fc:	d5fb      	bpl.n	80074f6 <_printf_i+0x1ca>
 80074fe:	8019      	strh	r1, [r3, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	4615      	mov	r5, r2
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	e7ba      	b.n	800747e <_printf_i+0x152>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	2100      	movs	r1, #0
 800750c:	1d1a      	adds	r2, r3, #4
 800750e:	602a      	str	r2, [r5, #0]
 8007510:	681d      	ldr	r5, [r3, #0]
 8007512:	6862      	ldr	r2, [r4, #4]
 8007514:	4628      	mov	r0, r5
 8007516:	f000 fed5 	bl	80082c4 <memchr>
 800751a:	b108      	cbz	r0, 8007520 <_printf_i+0x1f4>
 800751c:	1b40      	subs	r0, r0, r5
 800751e:	6060      	str	r0, [r4, #4]
 8007520:	6863      	ldr	r3, [r4, #4]
 8007522:	6123      	str	r3, [r4, #16]
 8007524:	2300      	movs	r3, #0
 8007526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752a:	e7a8      	b.n	800747e <_printf_i+0x152>
 800752c:	462a      	mov	r2, r5
 800752e:	4649      	mov	r1, r9
 8007530:	4640      	mov	r0, r8
 8007532:	6923      	ldr	r3, [r4, #16]
 8007534:	47d0      	blx	sl
 8007536:	3001      	adds	r0, #1
 8007538:	d0ab      	beq.n	8007492 <_printf_i+0x166>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	079b      	lsls	r3, r3, #30
 800753e:	d413      	bmi.n	8007568 <_printf_i+0x23c>
 8007540:	68e0      	ldr	r0, [r4, #12]
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	4298      	cmp	r0, r3
 8007546:	bfb8      	it	lt
 8007548:	4618      	movlt	r0, r3
 800754a:	e7a4      	b.n	8007496 <_printf_i+0x16a>
 800754c:	2301      	movs	r3, #1
 800754e:	4632      	mov	r2, r6
 8007550:	4649      	mov	r1, r9
 8007552:	4640      	mov	r0, r8
 8007554:	47d0      	blx	sl
 8007556:	3001      	adds	r0, #1
 8007558:	d09b      	beq.n	8007492 <_printf_i+0x166>
 800755a:	3501      	adds	r5, #1
 800755c:	68e3      	ldr	r3, [r4, #12]
 800755e:	9903      	ldr	r1, [sp, #12]
 8007560:	1a5b      	subs	r3, r3, r1
 8007562:	42ab      	cmp	r3, r5
 8007564:	dcf2      	bgt.n	800754c <_printf_i+0x220>
 8007566:	e7eb      	b.n	8007540 <_printf_i+0x214>
 8007568:	2500      	movs	r5, #0
 800756a:	f104 0619 	add.w	r6, r4, #25
 800756e:	e7f5      	b.n	800755c <_printf_i+0x230>
 8007570:	08009d56 	.word	0x08009d56
 8007574:	08009d67 	.word	0x08009d67

08007578 <siprintf>:
 8007578:	b40e      	push	{r1, r2, r3}
 800757a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800757e:	b500      	push	{lr}
 8007580:	b09c      	sub	sp, #112	; 0x70
 8007582:	ab1d      	add	r3, sp, #116	; 0x74
 8007584:	9002      	str	r0, [sp, #8]
 8007586:	9006      	str	r0, [sp, #24]
 8007588:	9107      	str	r1, [sp, #28]
 800758a:	9104      	str	r1, [sp, #16]
 800758c:	4808      	ldr	r0, [pc, #32]	; (80075b0 <siprintf+0x38>)
 800758e:	4909      	ldr	r1, [pc, #36]	; (80075b4 <siprintf+0x3c>)
 8007590:	f853 2b04 	ldr.w	r2, [r3], #4
 8007594:	9105      	str	r1, [sp, #20]
 8007596:	6800      	ldr	r0, [r0, #0]
 8007598:	a902      	add	r1, sp, #8
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	f001 fb7c 	bl	8008c98 <_svfiprintf_r>
 80075a0:	2200      	movs	r2, #0
 80075a2:	9b02      	ldr	r3, [sp, #8]
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	b01c      	add	sp, #112	; 0x70
 80075a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075ac:	b003      	add	sp, #12
 80075ae:	4770      	bx	lr
 80075b0:	20000014 	.word	0x20000014
 80075b4:	ffff0208 	.word	0xffff0208

080075b8 <quorem>:
 80075b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	6903      	ldr	r3, [r0, #16]
 80075be:	690c      	ldr	r4, [r1, #16]
 80075c0:	4607      	mov	r7, r0
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	f2c0 8082 	blt.w	80076cc <quorem+0x114>
 80075c8:	3c01      	subs	r4, #1
 80075ca:	f100 0514 	add.w	r5, r0, #20
 80075ce:	f101 0814 	add.w	r8, r1, #20
 80075d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075e0:	3301      	adds	r3, #1
 80075e2:	429a      	cmp	r2, r3
 80075e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80075e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075f0:	d331      	bcc.n	8007656 <quorem+0x9e>
 80075f2:	f04f 0e00 	mov.w	lr, #0
 80075f6:	4640      	mov	r0, r8
 80075f8:	46ac      	mov	ip, r5
 80075fa:	46f2      	mov	sl, lr
 80075fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007600:	b293      	uxth	r3, r2
 8007602:	fb06 e303 	mla	r3, r6, r3, lr
 8007606:	0c12      	lsrs	r2, r2, #16
 8007608:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800760c:	b29b      	uxth	r3, r3
 800760e:	fb06 e202 	mla	r2, r6, r2, lr
 8007612:	ebaa 0303 	sub.w	r3, sl, r3
 8007616:	f8dc a000 	ldr.w	sl, [ip]
 800761a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800761e:	fa1f fa8a 	uxth.w	sl, sl
 8007622:	4453      	add	r3, sl
 8007624:	f8dc a000 	ldr.w	sl, [ip]
 8007628:	b292      	uxth	r2, r2
 800762a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800762e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007632:	b29b      	uxth	r3, r3
 8007634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007638:	4581      	cmp	r9, r0
 800763a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800763e:	f84c 3b04 	str.w	r3, [ip], #4
 8007642:	d2db      	bcs.n	80075fc <quorem+0x44>
 8007644:	f855 300b 	ldr.w	r3, [r5, fp]
 8007648:	b92b      	cbnz	r3, 8007656 <quorem+0x9e>
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	3b04      	subs	r3, #4
 800764e:	429d      	cmp	r5, r3
 8007650:	461a      	mov	r2, r3
 8007652:	d32f      	bcc.n	80076b4 <quorem+0xfc>
 8007654:	613c      	str	r4, [r7, #16]
 8007656:	4638      	mov	r0, r7
 8007658:	f001 f8ce 	bl	80087f8 <__mcmp>
 800765c:	2800      	cmp	r0, #0
 800765e:	db25      	blt.n	80076ac <quorem+0xf4>
 8007660:	4628      	mov	r0, r5
 8007662:	f04f 0c00 	mov.w	ip, #0
 8007666:	3601      	adds	r6, #1
 8007668:	f858 1b04 	ldr.w	r1, [r8], #4
 800766c:	f8d0 e000 	ldr.w	lr, [r0]
 8007670:	b28b      	uxth	r3, r1
 8007672:	ebac 0303 	sub.w	r3, ip, r3
 8007676:	fa1f f28e 	uxth.w	r2, lr
 800767a:	4413      	add	r3, r2
 800767c:	0c0a      	lsrs	r2, r1, #16
 800767e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007682:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007686:	b29b      	uxth	r3, r3
 8007688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800768c:	45c1      	cmp	r9, r8
 800768e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007692:	f840 3b04 	str.w	r3, [r0], #4
 8007696:	d2e7      	bcs.n	8007668 <quorem+0xb0>
 8007698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800769c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076a0:	b922      	cbnz	r2, 80076ac <quorem+0xf4>
 80076a2:	3b04      	subs	r3, #4
 80076a4:	429d      	cmp	r5, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	d30a      	bcc.n	80076c0 <quorem+0x108>
 80076aa:	613c      	str	r4, [r7, #16]
 80076ac:	4630      	mov	r0, r6
 80076ae:	b003      	add	sp, #12
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	6812      	ldr	r2, [r2, #0]
 80076b6:	3b04      	subs	r3, #4
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	d1cb      	bne.n	8007654 <quorem+0x9c>
 80076bc:	3c01      	subs	r4, #1
 80076be:	e7c6      	b.n	800764e <quorem+0x96>
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	3b04      	subs	r3, #4
 80076c4:	2a00      	cmp	r2, #0
 80076c6:	d1f0      	bne.n	80076aa <quorem+0xf2>
 80076c8:	3c01      	subs	r4, #1
 80076ca:	e7eb      	b.n	80076a4 <quorem+0xec>
 80076cc:	2000      	movs	r0, #0
 80076ce:	e7ee      	b.n	80076ae <quorem+0xf6>

080076d0 <_dtoa_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	4616      	mov	r6, r2
 80076d6:	461f      	mov	r7, r3
 80076d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076da:	b099      	sub	sp, #100	; 0x64
 80076dc:	4605      	mov	r5, r0
 80076de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80076e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80076e6:	b974      	cbnz	r4, 8007706 <_dtoa_r+0x36>
 80076e8:	2010      	movs	r0, #16
 80076ea:	f000 fde3 	bl	80082b4 <malloc>
 80076ee:	4602      	mov	r2, r0
 80076f0:	6268      	str	r0, [r5, #36]	; 0x24
 80076f2:	b920      	cbnz	r0, 80076fe <_dtoa_r+0x2e>
 80076f4:	21ea      	movs	r1, #234	; 0xea
 80076f6:	4ba8      	ldr	r3, [pc, #672]	; (8007998 <_dtoa_r+0x2c8>)
 80076f8:	48a8      	ldr	r0, [pc, #672]	; (800799c <_dtoa_r+0x2cc>)
 80076fa:	f001 fbdd 	bl	8008eb8 <__assert_func>
 80076fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007702:	6004      	str	r4, [r0, #0]
 8007704:	60c4      	str	r4, [r0, #12]
 8007706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007708:	6819      	ldr	r1, [r3, #0]
 800770a:	b151      	cbz	r1, 8007722 <_dtoa_r+0x52>
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	2301      	movs	r3, #1
 8007710:	4093      	lsls	r3, r2
 8007712:	604a      	str	r2, [r1, #4]
 8007714:	608b      	str	r3, [r1, #8]
 8007716:	4628      	mov	r0, r5
 8007718:	f000 fe30 	bl	800837c <_Bfree>
 800771c:	2200      	movs	r2, #0
 800771e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	1e3b      	subs	r3, r7, #0
 8007724:	bfaf      	iteee	ge
 8007726:	2300      	movge	r3, #0
 8007728:	2201      	movlt	r2, #1
 800772a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800772e:	9305      	strlt	r3, [sp, #20]
 8007730:	bfa8      	it	ge
 8007732:	f8c8 3000 	strge.w	r3, [r8]
 8007736:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800773a:	4b99      	ldr	r3, [pc, #612]	; (80079a0 <_dtoa_r+0x2d0>)
 800773c:	bfb8      	it	lt
 800773e:	f8c8 2000 	strlt.w	r2, [r8]
 8007742:	ea33 0309 	bics.w	r3, r3, r9
 8007746:	d119      	bne.n	800777c <_dtoa_r+0xac>
 8007748:	f242 730f 	movw	r3, #9999	; 0x270f
 800774c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007754:	4333      	orrs	r3, r6
 8007756:	f000 857f 	beq.w	8008258 <_dtoa_r+0xb88>
 800775a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800775c:	b953      	cbnz	r3, 8007774 <_dtoa_r+0xa4>
 800775e:	4b91      	ldr	r3, [pc, #580]	; (80079a4 <_dtoa_r+0x2d4>)
 8007760:	e022      	b.n	80077a8 <_dtoa_r+0xd8>
 8007762:	4b91      	ldr	r3, [pc, #580]	; (80079a8 <_dtoa_r+0x2d8>)
 8007764:	9303      	str	r3, [sp, #12]
 8007766:	3308      	adds	r3, #8
 8007768:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	9803      	ldr	r0, [sp, #12]
 800776e:	b019      	add	sp, #100	; 0x64
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	4b8b      	ldr	r3, [pc, #556]	; (80079a4 <_dtoa_r+0x2d4>)
 8007776:	9303      	str	r3, [sp, #12]
 8007778:	3303      	adds	r3, #3
 800777a:	e7f5      	b.n	8007768 <_dtoa_r+0x98>
 800777c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007780:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007788:	2200      	movs	r2, #0
 800778a:	2300      	movs	r3, #0
 800778c:	f7f9 f924 	bl	80009d8 <__aeabi_dcmpeq>
 8007790:	4680      	mov	r8, r0
 8007792:	b158      	cbz	r0, 80077ac <_dtoa_r+0xdc>
 8007794:	2301      	movs	r3, #1
 8007796:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 8558 	beq.w	8008252 <_dtoa_r+0xb82>
 80077a2:	4882      	ldr	r0, [pc, #520]	; (80079ac <_dtoa_r+0x2dc>)
 80077a4:	6018      	str	r0, [r3, #0]
 80077a6:	1e43      	subs	r3, r0, #1
 80077a8:	9303      	str	r3, [sp, #12]
 80077aa:	e7df      	b.n	800776c <_dtoa_r+0x9c>
 80077ac:	ab16      	add	r3, sp, #88	; 0x58
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	ab17      	add	r3, sp, #92	; 0x5c
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	4628      	mov	r0, r5
 80077b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077ba:	f001 f8c5 	bl	8008948 <__d2b>
 80077be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80077c2:	4683      	mov	fp, r0
 80077c4:	2c00      	cmp	r4, #0
 80077c6:	d07f      	beq.n	80078c8 <_dtoa_r+0x1f8>
 80077c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80077d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80077da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80077de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80077e2:	2200      	movs	r2, #0
 80077e4:	4b72      	ldr	r3, [pc, #456]	; (80079b0 <_dtoa_r+0x2e0>)
 80077e6:	f7f8 fcd7 	bl	8000198 <__aeabi_dsub>
 80077ea:	a365      	add	r3, pc, #404	; (adr r3, 8007980 <_dtoa_r+0x2b0>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f7f8 fe8a 	bl	8000508 <__aeabi_dmul>
 80077f4:	a364      	add	r3, pc, #400	; (adr r3, 8007988 <_dtoa_r+0x2b8>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f8 fccf 	bl	800019c <__adddf3>
 80077fe:	4606      	mov	r6, r0
 8007800:	4620      	mov	r0, r4
 8007802:	460f      	mov	r7, r1
 8007804:	f7f8 fe16 	bl	8000434 <__aeabi_i2d>
 8007808:	a361      	add	r3, pc, #388	; (adr r3, 8007990 <_dtoa_r+0x2c0>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fe7b 	bl	8000508 <__aeabi_dmul>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4630      	mov	r0, r6
 8007818:	4639      	mov	r1, r7
 800781a:	f7f8 fcbf 	bl	800019c <__adddf3>
 800781e:	4606      	mov	r6, r0
 8007820:	460f      	mov	r7, r1
 8007822:	f7f9 f921 	bl	8000a68 <__aeabi_d2iz>
 8007826:	2200      	movs	r2, #0
 8007828:	4682      	mov	sl, r0
 800782a:	2300      	movs	r3, #0
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	f7f9 f8dc 	bl	80009ec <__aeabi_dcmplt>
 8007834:	b148      	cbz	r0, 800784a <_dtoa_r+0x17a>
 8007836:	4650      	mov	r0, sl
 8007838:	f7f8 fdfc 	bl	8000434 <__aeabi_i2d>
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	f7f9 f8ca 	bl	80009d8 <__aeabi_dcmpeq>
 8007844:	b908      	cbnz	r0, 800784a <_dtoa_r+0x17a>
 8007846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800784a:	f1ba 0f16 	cmp.w	sl, #22
 800784e:	d858      	bhi.n	8007902 <_dtoa_r+0x232>
 8007850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007854:	4b57      	ldr	r3, [pc, #348]	; (80079b4 <_dtoa_r+0x2e4>)
 8007856:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f9 f8c5 	bl	80009ec <__aeabi_dcmplt>
 8007862:	2800      	cmp	r0, #0
 8007864:	d04f      	beq.n	8007906 <_dtoa_r+0x236>
 8007866:	2300      	movs	r3, #0
 8007868:	f10a 3aff 	add.w	sl, sl, #4294967295
 800786c:	930f      	str	r3, [sp, #60]	; 0x3c
 800786e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007870:	1b1c      	subs	r4, r3, r4
 8007872:	1e63      	subs	r3, r4, #1
 8007874:	9309      	str	r3, [sp, #36]	; 0x24
 8007876:	bf49      	itett	mi
 8007878:	f1c4 0301 	rsbmi	r3, r4, #1
 800787c:	2300      	movpl	r3, #0
 800787e:	9306      	strmi	r3, [sp, #24]
 8007880:	2300      	movmi	r3, #0
 8007882:	bf54      	ite	pl
 8007884:	9306      	strpl	r3, [sp, #24]
 8007886:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007888:	f1ba 0f00 	cmp.w	sl, #0
 800788c:	db3d      	blt.n	800790a <_dtoa_r+0x23a>
 800788e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007890:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007894:	4453      	add	r3, sl
 8007896:	9309      	str	r3, [sp, #36]	; 0x24
 8007898:	2300      	movs	r3, #0
 800789a:	930a      	str	r3, [sp, #40]	; 0x28
 800789c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800789e:	2b09      	cmp	r3, #9
 80078a0:	f200 808c 	bhi.w	80079bc <_dtoa_r+0x2ec>
 80078a4:	2b05      	cmp	r3, #5
 80078a6:	bfc4      	itt	gt
 80078a8:	3b04      	subgt	r3, #4
 80078aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80078ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ae:	bfc8      	it	gt
 80078b0:	2400      	movgt	r4, #0
 80078b2:	f1a3 0302 	sub.w	r3, r3, #2
 80078b6:	bfd8      	it	le
 80078b8:	2401      	movle	r4, #1
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	f200 808a 	bhi.w	80079d4 <_dtoa_r+0x304>
 80078c0:	e8df f003 	tbb	[pc, r3]
 80078c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80078c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80078cc:	441c      	add	r4, r3
 80078ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	bfc3      	ittte	gt
 80078d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80078de:	fa09 f303 	lslgt.w	r3, r9, r3
 80078e2:	f1c3 0320 	rsble	r3, r3, #32
 80078e6:	bfc6      	itte	gt
 80078e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078ec:	4318      	orrgt	r0, r3
 80078ee:	fa06 f003 	lslle.w	r0, r6, r3
 80078f2:	f7f8 fd8f 	bl	8000414 <__aeabi_ui2d>
 80078f6:	2301      	movs	r3, #1
 80078f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80078fc:	3c01      	subs	r4, #1
 80078fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8007900:	e76f      	b.n	80077e2 <_dtoa_r+0x112>
 8007902:	2301      	movs	r3, #1
 8007904:	e7b2      	b.n	800786c <_dtoa_r+0x19c>
 8007906:	900f      	str	r0, [sp, #60]	; 0x3c
 8007908:	e7b1      	b.n	800786e <_dtoa_r+0x19e>
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	eba3 030a 	sub.w	r3, r3, sl
 8007910:	9306      	str	r3, [sp, #24]
 8007912:	f1ca 0300 	rsb	r3, sl, #0
 8007916:	930a      	str	r3, [sp, #40]	; 0x28
 8007918:	2300      	movs	r3, #0
 800791a:	930e      	str	r3, [sp, #56]	; 0x38
 800791c:	e7be      	b.n	800789c <_dtoa_r+0x1cc>
 800791e:	2300      	movs	r3, #0
 8007920:	930b      	str	r3, [sp, #44]	; 0x2c
 8007922:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007924:	2b00      	cmp	r3, #0
 8007926:	dc58      	bgt.n	80079da <_dtoa_r+0x30a>
 8007928:	f04f 0901 	mov.w	r9, #1
 800792c:	464b      	mov	r3, r9
 800792e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007932:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007936:	2200      	movs	r2, #0
 8007938:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800793a:	6042      	str	r2, [r0, #4]
 800793c:	2204      	movs	r2, #4
 800793e:	f102 0614 	add.w	r6, r2, #20
 8007942:	429e      	cmp	r6, r3
 8007944:	6841      	ldr	r1, [r0, #4]
 8007946:	d94e      	bls.n	80079e6 <_dtoa_r+0x316>
 8007948:	4628      	mov	r0, r5
 800794a:	f000 fcd7 	bl	80082fc <_Balloc>
 800794e:	9003      	str	r0, [sp, #12]
 8007950:	2800      	cmp	r0, #0
 8007952:	d14c      	bne.n	80079ee <_dtoa_r+0x31e>
 8007954:	4602      	mov	r2, r0
 8007956:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800795a:	4b17      	ldr	r3, [pc, #92]	; (80079b8 <_dtoa_r+0x2e8>)
 800795c:	e6cc      	b.n	80076f8 <_dtoa_r+0x28>
 800795e:	2301      	movs	r3, #1
 8007960:	e7de      	b.n	8007920 <_dtoa_r+0x250>
 8007962:	2300      	movs	r3, #0
 8007964:	930b      	str	r3, [sp, #44]	; 0x2c
 8007966:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007968:	eb0a 0903 	add.w	r9, sl, r3
 800796c:	f109 0301 	add.w	r3, r9, #1
 8007970:	2b01      	cmp	r3, #1
 8007972:	9308      	str	r3, [sp, #32]
 8007974:	bfb8      	it	lt
 8007976:	2301      	movlt	r3, #1
 8007978:	e7dd      	b.n	8007936 <_dtoa_r+0x266>
 800797a:	2301      	movs	r3, #1
 800797c:	e7f2      	b.n	8007964 <_dtoa_r+0x294>
 800797e:	bf00      	nop
 8007980:	636f4361 	.word	0x636f4361
 8007984:	3fd287a7 	.word	0x3fd287a7
 8007988:	8b60c8b3 	.word	0x8b60c8b3
 800798c:	3fc68a28 	.word	0x3fc68a28
 8007990:	509f79fb 	.word	0x509f79fb
 8007994:	3fd34413 	.word	0x3fd34413
 8007998:	08009d85 	.word	0x08009d85
 800799c:	08009d9c 	.word	0x08009d9c
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	08009d81 	.word	0x08009d81
 80079a8:	08009d78 	.word	0x08009d78
 80079ac:	08009d55 	.word	0x08009d55
 80079b0:	3ff80000 	.word	0x3ff80000
 80079b4:	08009e90 	.word	0x08009e90
 80079b8:	08009df7 	.word	0x08009df7
 80079bc:	2401      	movs	r4, #1
 80079be:	2300      	movs	r3, #0
 80079c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80079c2:	9322      	str	r3, [sp, #136]	; 0x88
 80079c4:	f04f 39ff 	mov.w	r9, #4294967295
 80079c8:	2200      	movs	r2, #0
 80079ca:	2312      	movs	r3, #18
 80079cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80079d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80079d2:	e7b0      	b.n	8007936 <_dtoa_r+0x266>
 80079d4:	2301      	movs	r3, #1
 80079d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d8:	e7f4      	b.n	80079c4 <_dtoa_r+0x2f4>
 80079da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80079de:	464b      	mov	r3, r9
 80079e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80079e4:	e7a7      	b.n	8007936 <_dtoa_r+0x266>
 80079e6:	3101      	adds	r1, #1
 80079e8:	6041      	str	r1, [r0, #4]
 80079ea:	0052      	lsls	r2, r2, #1
 80079ec:	e7a7      	b.n	800793e <_dtoa_r+0x26e>
 80079ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079f0:	9a03      	ldr	r2, [sp, #12]
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	9b08      	ldr	r3, [sp, #32]
 80079f6:	2b0e      	cmp	r3, #14
 80079f8:	f200 80a8 	bhi.w	8007b4c <_dtoa_r+0x47c>
 80079fc:	2c00      	cmp	r4, #0
 80079fe:	f000 80a5 	beq.w	8007b4c <_dtoa_r+0x47c>
 8007a02:	f1ba 0f00 	cmp.w	sl, #0
 8007a06:	dd34      	ble.n	8007a72 <_dtoa_r+0x3a2>
 8007a08:	4a9a      	ldr	r2, [pc, #616]	; (8007c74 <_dtoa_r+0x5a4>)
 8007a0a:	f00a 030f 	and.w	r3, sl, #15
 8007a0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a12:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007a16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a1e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007a22:	d016      	beq.n	8007a52 <_dtoa_r+0x382>
 8007a24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a28:	4b93      	ldr	r3, [pc, #588]	; (8007c78 <_dtoa_r+0x5a8>)
 8007a2a:	2703      	movs	r7, #3
 8007a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a30:	f7f8 fe94 	bl	800075c <__aeabi_ddiv>
 8007a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a38:	f004 040f 	and.w	r4, r4, #15
 8007a3c:	4e8e      	ldr	r6, [pc, #568]	; (8007c78 <_dtoa_r+0x5a8>)
 8007a3e:	b954      	cbnz	r4, 8007a56 <_dtoa_r+0x386>
 8007a40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a48:	f7f8 fe88 	bl	800075c <__aeabi_ddiv>
 8007a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a50:	e029      	b.n	8007aa6 <_dtoa_r+0x3d6>
 8007a52:	2702      	movs	r7, #2
 8007a54:	e7f2      	b.n	8007a3c <_dtoa_r+0x36c>
 8007a56:	07e1      	lsls	r1, r4, #31
 8007a58:	d508      	bpl.n	8007a6c <_dtoa_r+0x39c>
 8007a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a62:	f7f8 fd51 	bl	8000508 <__aeabi_dmul>
 8007a66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a6a:	3701      	adds	r7, #1
 8007a6c:	1064      	asrs	r4, r4, #1
 8007a6e:	3608      	adds	r6, #8
 8007a70:	e7e5      	b.n	8007a3e <_dtoa_r+0x36e>
 8007a72:	f000 80a5 	beq.w	8007bc0 <_dtoa_r+0x4f0>
 8007a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a7a:	f1ca 0400 	rsb	r4, sl, #0
 8007a7e:	4b7d      	ldr	r3, [pc, #500]	; (8007c74 <_dtoa_r+0x5a4>)
 8007a80:	f004 020f 	and.w	r2, r4, #15
 8007a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f7f8 fd3c 	bl	8000508 <__aeabi_dmul>
 8007a90:	2702      	movs	r7, #2
 8007a92:	2300      	movs	r3, #0
 8007a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a98:	4e77      	ldr	r6, [pc, #476]	; (8007c78 <_dtoa_r+0x5a8>)
 8007a9a:	1124      	asrs	r4, r4, #4
 8007a9c:	2c00      	cmp	r4, #0
 8007a9e:	f040 8084 	bne.w	8007baa <_dtoa_r+0x4da>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1d2      	bne.n	8007a4c <_dtoa_r+0x37c>
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 808b 	beq.w	8007bc4 <_dtoa_r+0x4f4>
 8007aae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ab2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ab6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aba:	2200      	movs	r2, #0
 8007abc:	4b6f      	ldr	r3, [pc, #444]	; (8007c7c <_dtoa_r+0x5ac>)
 8007abe:	f7f8 ff95 	bl	80009ec <__aeabi_dcmplt>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d07e      	beq.n	8007bc4 <_dtoa_r+0x4f4>
 8007ac6:	9b08      	ldr	r3, [sp, #32]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d07b      	beq.n	8007bc4 <_dtoa_r+0x4f4>
 8007acc:	f1b9 0f00 	cmp.w	r9, #0
 8007ad0:	dd38      	ble.n	8007b44 <_dtoa_r+0x474>
 8007ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	4b69      	ldr	r3, [pc, #420]	; (8007c80 <_dtoa_r+0x5b0>)
 8007ada:	f7f8 fd15 	bl	8000508 <__aeabi_dmul>
 8007ade:	464c      	mov	r4, r9
 8007ae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ae4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007ae8:	3701      	adds	r7, #1
 8007aea:	4638      	mov	r0, r7
 8007aec:	f7f8 fca2 	bl	8000434 <__aeabi_i2d>
 8007af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af4:	f7f8 fd08 	bl	8000508 <__aeabi_dmul>
 8007af8:	2200      	movs	r2, #0
 8007afa:	4b62      	ldr	r3, [pc, #392]	; (8007c84 <_dtoa_r+0x5b4>)
 8007afc:	f7f8 fb4e 	bl	800019c <__adddf3>
 8007b00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b08:	9611      	str	r6, [sp, #68]	; 0x44
 8007b0a:	2c00      	cmp	r4, #0
 8007b0c:	d15d      	bne.n	8007bca <_dtoa_r+0x4fa>
 8007b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b12:	2200      	movs	r2, #0
 8007b14:	4b5c      	ldr	r3, [pc, #368]	; (8007c88 <_dtoa_r+0x5b8>)
 8007b16:	f7f8 fb3f 	bl	8000198 <__aeabi_dsub>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b22:	4633      	mov	r3, r6
 8007b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b26:	f7f8 ff7f 	bl	8000a28 <__aeabi_dcmpgt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f040 829c 	bne.w	8008068 <_dtoa_r+0x998>
 8007b30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b3a:	f7f8 ff57 	bl	80009ec <__aeabi_dcmplt>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f040 8290 	bne.w	8008064 <_dtoa_r+0x994>
 8007b44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007b48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f2c0 8152 	blt.w	8007df8 <_dtoa_r+0x728>
 8007b54:	f1ba 0f0e 	cmp.w	sl, #14
 8007b58:	f300 814e 	bgt.w	8007df8 <_dtoa_r+0x728>
 8007b5c:	4b45      	ldr	r3, [pc, #276]	; (8007c74 <_dtoa_r+0x5a4>)
 8007b5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007b6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f280 80db 	bge.w	8007d28 <_dtoa_r+0x658>
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f300 80d7 	bgt.w	8007d28 <_dtoa_r+0x658>
 8007b7a:	f040 8272 	bne.w	8008062 <_dtoa_r+0x992>
 8007b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b82:	2200      	movs	r2, #0
 8007b84:	4b40      	ldr	r3, [pc, #256]	; (8007c88 <_dtoa_r+0x5b8>)
 8007b86:	f7f8 fcbf 	bl	8000508 <__aeabi_dmul>
 8007b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b8e:	f7f8 ff41 	bl	8000a14 <__aeabi_dcmpge>
 8007b92:	9c08      	ldr	r4, [sp, #32]
 8007b94:	4626      	mov	r6, r4
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f040 8248 	bne.w	800802c <_dtoa_r+0x95c>
 8007b9c:	2331      	movs	r3, #49	; 0x31
 8007b9e:	9f03      	ldr	r7, [sp, #12]
 8007ba0:	f10a 0a01 	add.w	sl, sl, #1
 8007ba4:	f807 3b01 	strb.w	r3, [r7], #1
 8007ba8:	e244      	b.n	8008034 <_dtoa_r+0x964>
 8007baa:	07e2      	lsls	r2, r4, #31
 8007bac:	d505      	bpl.n	8007bba <_dtoa_r+0x4ea>
 8007bae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bb2:	f7f8 fca9 	bl	8000508 <__aeabi_dmul>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	3701      	adds	r7, #1
 8007bba:	1064      	asrs	r4, r4, #1
 8007bbc:	3608      	adds	r6, #8
 8007bbe:	e76d      	b.n	8007a9c <_dtoa_r+0x3cc>
 8007bc0:	2702      	movs	r7, #2
 8007bc2:	e770      	b.n	8007aa6 <_dtoa_r+0x3d6>
 8007bc4:	46d0      	mov	r8, sl
 8007bc6:	9c08      	ldr	r4, [sp, #32]
 8007bc8:	e78f      	b.n	8007aea <_dtoa_r+0x41a>
 8007bca:	9903      	ldr	r1, [sp, #12]
 8007bcc:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <_dtoa_r+0x5a4>)
 8007bce:	4421      	add	r1, r4
 8007bd0:	9112      	str	r1, [sp, #72]	; 0x48
 8007bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bd8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007bdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007be0:	2900      	cmp	r1, #0
 8007be2:	d055      	beq.n	8007c90 <_dtoa_r+0x5c0>
 8007be4:	2000      	movs	r0, #0
 8007be6:	4929      	ldr	r1, [pc, #164]	; (8007c8c <_dtoa_r+0x5bc>)
 8007be8:	f7f8 fdb8 	bl	800075c <__aeabi_ddiv>
 8007bec:	463b      	mov	r3, r7
 8007bee:	4632      	mov	r2, r6
 8007bf0:	f7f8 fad2 	bl	8000198 <__aeabi_dsub>
 8007bf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bf8:	9f03      	ldr	r7, [sp, #12]
 8007bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bfe:	f7f8 ff33 	bl	8000a68 <__aeabi_d2iz>
 8007c02:	4604      	mov	r4, r0
 8007c04:	f7f8 fc16 	bl	8000434 <__aeabi_i2d>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c10:	f7f8 fac2 	bl	8000198 <__aeabi_dsub>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	3430      	adds	r4, #48	; 0x30
 8007c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c22:	f807 4b01 	strb.w	r4, [r7], #1
 8007c26:	f7f8 fee1 	bl	80009ec <__aeabi_dcmplt>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d174      	bne.n	8007d18 <_dtoa_r+0x648>
 8007c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c32:	2000      	movs	r0, #0
 8007c34:	4911      	ldr	r1, [pc, #68]	; (8007c7c <_dtoa_r+0x5ac>)
 8007c36:	f7f8 faaf 	bl	8000198 <__aeabi_dsub>
 8007c3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c3e:	f7f8 fed5 	bl	80009ec <__aeabi_dcmplt>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	f040 80b7 	bne.w	8007db6 <_dtoa_r+0x6e6>
 8007c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c4a:	429f      	cmp	r7, r3
 8007c4c:	f43f af7a 	beq.w	8007b44 <_dtoa_r+0x474>
 8007c50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c54:	2200      	movs	r2, #0
 8007c56:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <_dtoa_r+0x5b0>)
 8007c58:	f7f8 fc56 	bl	8000508 <__aeabi_dmul>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c66:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <_dtoa_r+0x5b0>)
 8007c68:	f7f8 fc4e 	bl	8000508 <__aeabi_dmul>
 8007c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c70:	e7c3      	b.n	8007bfa <_dtoa_r+0x52a>
 8007c72:	bf00      	nop
 8007c74:	08009e90 	.word	0x08009e90
 8007c78:	08009e68 	.word	0x08009e68
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	40240000 	.word	0x40240000
 8007c84:	401c0000 	.word	0x401c0000
 8007c88:	40140000 	.word	0x40140000
 8007c8c:	3fe00000 	.word	0x3fe00000
 8007c90:	4630      	mov	r0, r6
 8007c92:	4639      	mov	r1, r7
 8007c94:	f7f8 fc38 	bl	8000508 <__aeabi_dmul>
 8007c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c9e:	9c03      	ldr	r4, [sp, #12]
 8007ca0:	9314      	str	r3, [sp, #80]	; 0x50
 8007ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ca6:	f7f8 fedf 	bl	8000a68 <__aeabi_d2iz>
 8007caa:	9015      	str	r0, [sp, #84]	; 0x54
 8007cac:	f7f8 fbc2 	bl	8000434 <__aeabi_i2d>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cb8:	f7f8 fa6e 	bl	8000198 <__aeabi_dsub>
 8007cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	3330      	adds	r3, #48	; 0x30
 8007cc2:	f804 3b01 	strb.w	r3, [r4], #1
 8007cc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cc8:	460f      	mov	r7, r1
 8007cca:	429c      	cmp	r4, r3
 8007ccc:	f04f 0200 	mov.w	r2, #0
 8007cd0:	d124      	bne.n	8007d1c <_dtoa_r+0x64c>
 8007cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cd6:	4bb0      	ldr	r3, [pc, #704]	; (8007f98 <_dtoa_r+0x8c8>)
 8007cd8:	f7f8 fa60 	bl	800019c <__adddf3>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 fea0 	bl	8000a28 <__aeabi_dcmpgt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d163      	bne.n	8007db4 <_dtoa_r+0x6e4>
 8007cec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	49a9      	ldr	r1, [pc, #676]	; (8007f98 <_dtoa_r+0x8c8>)
 8007cf4:	f7f8 fa50 	bl	8000198 <__aeabi_dsub>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 fe74 	bl	80009ec <__aeabi_dcmplt>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f43f af1d 	beq.w	8007b44 <_dtoa_r+0x474>
 8007d0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007d0c:	1e7b      	subs	r3, r7, #1
 8007d0e:	9314      	str	r3, [sp, #80]	; 0x50
 8007d10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007d14:	2b30      	cmp	r3, #48	; 0x30
 8007d16:	d0f8      	beq.n	8007d0a <_dtoa_r+0x63a>
 8007d18:	46c2      	mov	sl, r8
 8007d1a:	e03b      	b.n	8007d94 <_dtoa_r+0x6c4>
 8007d1c:	4b9f      	ldr	r3, [pc, #636]	; (8007f9c <_dtoa_r+0x8cc>)
 8007d1e:	f7f8 fbf3 	bl	8000508 <__aeabi_dmul>
 8007d22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d26:	e7bc      	b.n	8007ca2 <_dtoa_r+0x5d2>
 8007d28:	9f03      	ldr	r7, [sp, #12]
 8007d2a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007d2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f7f8 fd11 	bl	800075c <__aeabi_ddiv>
 8007d3a:	f7f8 fe95 	bl	8000a68 <__aeabi_d2iz>
 8007d3e:	4604      	mov	r4, r0
 8007d40:	f7f8 fb78 	bl	8000434 <__aeabi_i2d>
 8007d44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d48:	f7f8 fbde 	bl	8000508 <__aeabi_dmul>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4640      	mov	r0, r8
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 fa20 	bl	8000198 <__aeabi_dsub>
 8007d58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007d5c:	f807 6b01 	strb.w	r6, [r7], #1
 8007d60:	9e03      	ldr	r6, [sp, #12]
 8007d62:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007d66:	1bbe      	subs	r6, r7, r6
 8007d68:	45b4      	cmp	ip, r6
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	d136      	bne.n	8007dde <_dtoa_r+0x70e>
 8007d70:	f7f8 fa14 	bl	800019c <__adddf3>
 8007d74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4689      	mov	r9, r1
 8007d7c:	f7f8 fe54 	bl	8000a28 <__aeabi_dcmpgt>
 8007d80:	bb58      	cbnz	r0, 8007dda <_dtoa_r+0x70a>
 8007d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 fe25 	bl	80009d8 <__aeabi_dcmpeq>
 8007d8e:	b108      	cbz	r0, 8007d94 <_dtoa_r+0x6c4>
 8007d90:	07e1      	lsls	r1, r4, #31
 8007d92:	d422      	bmi.n	8007dda <_dtoa_r+0x70a>
 8007d94:	4628      	mov	r0, r5
 8007d96:	4659      	mov	r1, fp
 8007d98:	f000 faf0 	bl	800837c <_Bfree>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	703b      	strb	r3, [r7, #0]
 8007da0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007da2:	f10a 0001 	add.w	r0, sl, #1
 8007da6:	6018      	str	r0, [r3, #0]
 8007da8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f43f acde 	beq.w	800776c <_dtoa_r+0x9c>
 8007db0:	601f      	str	r7, [r3, #0]
 8007db2:	e4db      	b.n	800776c <_dtoa_r+0x9c>
 8007db4:	4627      	mov	r7, r4
 8007db6:	463b      	mov	r3, r7
 8007db8:	461f      	mov	r7, r3
 8007dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dbe:	2a39      	cmp	r2, #57	; 0x39
 8007dc0:	d107      	bne.n	8007dd2 <_dtoa_r+0x702>
 8007dc2:	9a03      	ldr	r2, [sp, #12]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d1f7      	bne.n	8007db8 <_dtoa_r+0x6e8>
 8007dc8:	2230      	movs	r2, #48	; 0x30
 8007dca:	9903      	ldr	r1, [sp, #12]
 8007dcc:	f108 0801 	add.w	r8, r8, #1
 8007dd0:	700a      	strb	r2, [r1, #0]
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	3201      	adds	r2, #1
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	e79e      	b.n	8007d18 <_dtoa_r+0x648>
 8007dda:	46d0      	mov	r8, sl
 8007ddc:	e7eb      	b.n	8007db6 <_dtoa_r+0x6e6>
 8007dde:	2200      	movs	r2, #0
 8007de0:	4b6e      	ldr	r3, [pc, #440]	; (8007f9c <_dtoa_r+0x8cc>)
 8007de2:	f7f8 fb91 	bl	8000508 <__aeabi_dmul>
 8007de6:	2200      	movs	r2, #0
 8007de8:	2300      	movs	r3, #0
 8007dea:	4680      	mov	r8, r0
 8007dec:	4689      	mov	r9, r1
 8007dee:	f7f8 fdf3 	bl	80009d8 <__aeabi_dcmpeq>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d09b      	beq.n	8007d2e <_dtoa_r+0x65e>
 8007df6:	e7cd      	b.n	8007d94 <_dtoa_r+0x6c4>
 8007df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	f000 80d0 	beq.w	8007fa0 <_dtoa_r+0x8d0>
 8007e00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e02:	2a01      	cmp	r2, #1
 8007e04:	f300 80ae 	bgt.w	8007f64 <_dtoa_r+0x894>
 8007e08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e0a:	2a00      	cmp	r2, #0
 8007e0c:	f000 80a6 	beq.w	8007f5c <_dtoa_r+0x88c>
 8007e10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e16:	9f06      	ldr	r7, [sp, #24]
 8007e18:	9a06      	ldr	r2, [sp, #24]
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	441a      	add	r2, r3
 8007e1e:	9206      	str	r2, [sp, #24]
 8007e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e22:	4628      	mov	r0, r5
 8007e24:	441a      	add	r2, r3
 8007e26:	9209      	str	r2, [sp, #36]	; 0x24
 8007e28:	f000 fb5e 	bl	80084e8 <__i2b>
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	dd0c      	ble.n	8007e4c <_dtoa_r+0x77c>
 8007e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dd09      	ble.n	8007e4c <_dtoa_r+0x77c>
 8007e38:	42bb      	cmp	r3, r7
 8007e3a:	bfa8      	it	ge
 8007e3c:	463b      	movge	r3, r7
 8007e3e:	9a06      	ldr	r2, [sp, #24]
 8007e40:	1aff      	subs	r7, r7, r3
 8007e42:	1ad2      	subs	r2, r2, r3
 8007e44:	9206      	str	r2, [sp, #24]
 8007e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4e:	b1f3      	cbz	r3, 8007e8e <_dtoa_r+0x7be>
 8007e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80a8 	beq.w	8007fa8 <_dtoa_r+0x8d8>
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	dd10      	ble.n	8007e7e <_dtoa_r+0x7ae>
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 fbff 	bl	8008664 <__pow5mult>
 8007e66:	465a      	mov	r2, fp
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 fb51 	bl	8008514 <__multiply>
 8007e72:	4680      	mov	r8, r0
 8007e74:	4659      	mov	r1, fp
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 fa80 	bl	800837c <_Bfree>
 8007e7c:	46c3      	mov	fp, r8
 8007e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e80:	1b1a      	subs	r2, r3, r4
 8007e82:	d004      	beq.n	8007e8e <_dtoa_r+0x7be>
 8007e84:	4659      	mov	r1, fp
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 fbec 	bl	8008664 <__pow5mult>
 8007e8c:	4683      	mov	fp, r0
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4628      	mov	r0, r5
 8007e92:	f000 fb29 	bl	80084e8 <__i2b>
 8007e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e98:	4604      	mov	r4, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f340 8086 	ble.w	8007fac <_dtoa_r+0x8dc>
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 fbdd 	bl	8008664 <__pow5mult>
 8007eaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eac:	4604      	mov	r4, r0
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	dd7f      	ble.n	8007fb2 <_dtoa_r+0x8e2>
 8007eb2:	f04f 0800 	mov.w	r8, #0
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ebc:	6918      	ldr	r0, [r3, #16]
 8007ebe:	f000 fac5 	bl	800844c <__hi0bits>
 8007ec2:	f1c0 0020 	rsb	r0, r0, #32
 8007ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec8:	4418      	add	r0, r3
 8007eca:	f010 001f 	ands.w	r0, r0, #31
 8007ece:	f000 8092 	beq.w	8007ff6 <_dtoa_r+0x926>
 8007ed2:	f1c0 0320 	rsb	r3, r0, #32
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	f340 808a 	ble.w	8007ff0 <_dtoa_r+0x920>
 8007edc:	f1c0 001c 	rsb	r0, r0, #28
 8007ee0:	9b06      	ldr	r3, [sp, #24]
 8007ee2:	4407      	add	r7, r0
 8007ee4:	4403      	add	r3, r0
 8007ee6:	9306      	str	r3, [sp, #24]
 8007ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eea:	4403      	add	r3, r0
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	9b06      	ldr	r3, [sp, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dd05      	ble.n	8007f00 <_dtoa_r+0x830>
 8007ef4:	4659      	mov	r1, fp
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 fc0d 	bl	8008718 <__lshift>
 8007efe:	4683      	mov	fp, r0
 8007f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dd05      	ble.n	8007f12 <_dtoa_r+0x842>
 8007f06:	4621      	mov	r1, r4
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 fc04 	bl	8008718 <__lshift>
 8007f10:	4604      	mov	r4, r0
 8007f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d070      	beq.n	8007ffa <_dtoa_r+0x92a>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4658      	mov	r0, fp
 8007f1c:	f000 fc6c 	bl	80087f8 <__mcmp>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	da6a      	bge.n	8007ffa <_dtoa_r+0x92a>
 8007f24:	2300      	movs	r3, #0
 8007f26:	4659      	mov	r1, fp
 8007f28:	220a      	movs	r2, #10
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 fa48 	bl	80083c0 <__multadd>
 8007f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f32:	4683      	mov	fp, r0
 8007f34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8194 	beq.w	8008266 <_dtoa_r+0xb96>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	2300      	movs	r3, #0
 8007f42:	220a      	movs	r2, #10
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 fa3b 	bl	80083c0 <__multadd>
 8007f4a:	f1b9 0f00 	cmp.w	r9, #0
 8007f4e:	4606      	mov	r6, r0
 8007f50:	f300 8093 	bgt.w	800807a <_dtoa_r+0x9aa>
 8007f54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	dc57      	bgt.n	800800a <_dtoa_r+0x93a>
 8007f5a:	e08e      	b.n	800807a <_dtoa_r+0x9aa>
 8007f5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f62:	e757      	b.n	8007e14 <_dtoa_r+0x744>
 8007f64:	9b08      	ldr	r3, [sp, #32]
 8007f66:	1e5c      	subs	r4, r3, #1
 8007f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	bfb7      	itett	lt
 8007f6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f70:	1b1c      	subge	r4, r3, r4
 8007f72:	1ae2      	sublt	r2, r4, r3
 8007f74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007f76:	bfbe      	ittt	lt
 8007f78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007f7a:	189b      	addlt	r3, r3, r2
 8007f7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f7e:	9b08      	ldr	r3, [sp, #32]
 8007f80:	bfb8      	it	lt
 8007f82:	2400      	movlt	r4, #0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bfbb      	ittet	lt
 8007f88:	9b06      	ldrlt	r3, [sp, #24]
 8007f8a:	9a08      	ldrlt	r2, [sp, #32]
 8007f8c:	9f06      	ldrge	r7, [sp, #24]
 8007f8e:	1a9f      	sublt	r7, r3, r2
 8007f90:	bfac      	ite	ge
 8007f92:	9b08      	ldrge	r3, [sp, #32]
 8007f94:	2300      	movlt	r3, #0
 8007f96:	e73f      	b.n	8007e18 <_dtoa_r+0x748>
 8007f98:	3fe00000 	.word	0x3fe00000
 8007f9c:	40240000 	.word	0x40240000
 8007fa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fa2:	9f06      	ldr	r7, [sp, #24]
 8007fa4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007fa6:	e742      	b.n	8007e2e <_dtoa_r+0x75e>
 8007fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007faa:	e76b      	b.n	8007e84 <_dtoa_r+0x7b4>
 8007fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	dc19      	bgt.n	8007fe6 <_dtoa_r+0x916>
 8007fb2:	9b04      	ldr	r3, [sp, #16]
 8007fb4:	b9bb      	cbnz	r3, 8007fe6 <_dtoa_r+0x916>
 8007fb6:	9b05      	ldr	r3, [sp, #20]
 8007fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fbc:	b99b      	cbnz	r3, 8007fe6 <_dtoa_r+0x916>
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	0d1b      	lsrs	r3, r3, #20
 8007fc6:	051b      	lsls	r3, r3, #20
 8007fc8:	b183      	cbz	r3, 8007fec <_dtoa_r+0x91c>
 8007fca:	f04f 0801 	mov.w	r8, #1
 8007fce:	9b06      	ldr	r3, [sp, #24]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	9306      	str	r3, [sp, #24]
 8007fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f af6a 	bne.w	8007eb6 <_dtoa_r+0x7e6>
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	e76f      	b.n	8007ec6 <_dtoa_r+0x7f6>
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	e7f6      	b.n	8007fda <_dtoa_r+0x90a>
 8007fec:	4698      	mov	r8, r3
 8007fee:	e7f4      	b.n	8007fda <_dtoa_r+0x90a>
 8007ff0:	f43f af7d 	beq.w	8007eee <_dtoa_r+0x81e>
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	301c      	adds	r0, #28
 8007ff8:	e772      	b.n	8007ee0 <_dtoa_r+0x810>
 8007ffa:	9b08      	ldr	r3, [sp, #32]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dc36      	bgt.n	800806e <_dtoa_r+0x99e>
 8008000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008002:	2b02      	cmp	r3, #2
 8008004:	dd33      	ble.n	800806e <_dtoa_r+0x99e>
 8008006:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800800a:	f1b9 0f00 	cmp.w	r9, #0
 800800e:	d10d      	bne.n	800802c <_dtoa_r+0x95c>
 8008010:	4621      	mov	r1, r4
 8008012:	464b      	mov	r3, r9
 8008014:	2205      	movs	r2, #5
 8008016:	4628      	mov	r0, r5
 8008018:	f000 f9d2 	bl	80083c0 <__multadd>
 800801c:	4601      	mov	r1, r0
 800801e:	4604      	mov	r4, r0
 8008020:	4658      	mov	r0, fp
 8008022:	f000 fbe9 	bl	80087f8 <__mcmp>
 8008026:	2800      	cmp	r0, #0
 8008028:	f73f adb8 	bgt.w	8007b9c <_dtoa_r+0x4cc>
 800802c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800802e:	9f03      	ldr	r7, [sp, #12]
 8008030:	ea6f 0a03 	mvn.w	sl, r3
 8008034:	f04f 0800 	mov.w	r8, #0
 8008038:	4621      	mov	r1, r4
 800803a:	4628      	mov	r0, r5
 800803c:	f000 f99e 	bl	800837c <_Bfree>
 8008040:	2e00      	cmp	r6, #0
 8008042:	f43f aea7 	beq.w	8007d94 <_dtoa_r+0x6c4>
 8008046:	f1b8 0f00 	cmp.w	r8, #0
 800804a:	d005      	beq.n	8008058 <_dtoa_r+0x988>
 800804c:	45b0      	cmp	r8, r6
 800804e:	d003      	beq.n	8008058 <_dtoa_r+0x988>
 8008050:	4641      	mov	r1, r8
 8008052:	4628      	mov	r0, r5
 8008054:	f000 f992 	bl	800837c <_Bfree>
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f98e 	bl	800837c <_Bfree>
 8008060:	e698      	b.n	8007d94 <_dtoa_r+0x6c4>
 8008062:	2400      	movs	r4, #0
 8008064:	4626      	mov	r6, r4
 8008066:	e7e1      	b.n	800802c <_dtoa_r+0x95c>
 8008068:	46c2      	mov	sl, r8
 800806a:	4626      	mov	r6, r4
 800806c:	e596      	b.n	8007b9c <_dtoa_r+0x4cc>
 800806e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 80fd 	beq.w	8008274 <_dtoa_r+0xba4>
 800807a:	2f00      	cmp	r7, #0
 800807c:	dd05      	ble.n	800808a <_dtoa_r+0x9ba>
 800807e:	4631      	mov	r1, r6
 8008080:	463a      	mov	r2, r7
 8008082:	4628      	mov	r0, r5
 8008084:	f000 fb48 	bl	8008718 <__lshift>
 8008088:	4606      	mov	r6, r0
 800808a:	f1b8 0f00 	cmp.w	r8, #0
 800808e:	d05c      	beq.n	800814a <_dtoa_r+0xa7a>
 8008090:	4628      	mov	r0, r5
 8008092:	6871      	ldr	r1, [r6, #4]
 8008094:	f000 f932 	bl	80082fc <_Balloc>
 8008098:	4607      	mov	r7, r0
 800809a:	b928      	cbnz	r0, 80080a8 <_dtoa_r+0x9d8>
 800809c:	4602      	mov	r2, r0
 800809e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080a2:	4b7f      	ldr	r3, [pc, #508]	; (80082a0 <_dtoa_r+0xbd0>)
 80080a4:	f7ff bb28 	b.w	80076f8 <_dtoa_r+0x28>
 80080a8:	6932      	ldr	r2, [r6, #16]
 80080aa:	f106 010c 	add.w	r1, r6, #12
 80080ae:	3202      	adds	r2, #2
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	300c      	adds	r0, #12
 80080b4:	f000 f914 	bl	80082e0 <memcpy>
 80080b8:	2201      	movs	r2, #1
 80080ba:	4639      	mov	r1, r7
 80080bc:	4628      	mov	r0, r5
 80080be:	f000 fb2b 	bl	8008718 <__lshift>
 80080c2:	46b0      	mov	r8, r6
 80080c4:	4606      	mov	r6, r0
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	9308      	str	r3, [sp, #32]
 80080cc:	9b03      	ldr	r3, [sp, #12]
 80080ce:	444b      	add	r3, r9
 80080d0:	930a      	str	r3, [sp, #40]	; 0x28
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	9309      	str	r3, [sp, #36]	; 0x24
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	4621      	mov	r1, r4
 80080de:	3b01      	subs	r3, #1
 80080e0:	4658      	mov	r0, fp
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	f7ff fa68 	bl	80075b8 <quorem>
 80080e8:	4603      	mov	r3, r0
 80080ea:	4641      	mov	r1, r8
 80080ec:	3330      	adds	r3, #48	; 0x30
 80080ee:	9006      	str	r0, [sp, #24]
 80080f0:	4658      	mov	r0, fp
 80080f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f4:	f000 fb80 	bl	80087f8 <__mcmp>
 80080f8:	4632      	mov	r2, r6
 80080fa:	4681      	mov	r9, r0
 80080fc:	4621      	mov	r1, r4
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fb96 	bl	8008830 <__mdiff>
 8008104:	68c2      	ldr	r2, [r0, #12]
 8008106:	4607      	mov	r7, r0
 8008108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800810a:	bb02      	cbnz	r2, 800814e <_dtoa_r+0xa7e>
 800810c:	4601      	mov	r1, r0
 800810e:	4658      	mov	r0, fp
 8008110:	f000 fb72 	bl	80087f8 <__mcmp>
 8008114:	4602      	mov	r2, r0
 8008116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008118:	4639      	mov	r1, r7
 800811a:	4628      	mov	r0, r5
 800811c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008120:	f000 f92c 	bl	800837c <_Bfree>
 8008124:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008128:	9f08      	ldr	r7, [sp, #32]
 800812a:	ea43 0102 	orr.w	r1, r3, r2
 800812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008130:	430b      	orrs	r3, r1
 8008132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008134:	d10d      	bne.n	8008152 <_dtoa_r+0xa82>
 8008136:	2b39      	cmp	r3, #57	; 0x39
 8008138:	d029      	beq.n	800818e <_dtoa_r+0xabe>
 800813a:	f1b9 0f00 	cmp.w	r9, #0
 800813e:	dd01      	ble.n	8008144 <_dtoa_r+0xa74>
 8008140:	9b06      	ldr	r3, [sp, #24]
 8008142:	3331      	adds	r3, #49	; 0x31
 8008144:	9a04      	ldr	r2, [sp, #16]
 8008146:	7013      	strb	r3, [r2, #0]
 8008148:	e776      	b.n	8008038 <_dtoa_r+0x968>
 800814a:	4630      	mov	r0, r6
 800814c:	e7b9      	b.n	80080c2 <_dtoa_r+0x9f2>
 800814e:	2201      	movs	r2, #1
 8008150:	e7e2      	b.n	8008118 <_dtoa_r+0xa48>
 8008152:	f1b9 0f00 	cmp.w	r9, #0
 8008156:	db06      	blt.n	8008166 <_dtoa_r+0xa96>
 8008158:	9922      	ldr	r1, [sp, #136]	; 0x88
 800815a:	ea41 0909 	orr.w	r9, r1, r9
 800815e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008160:	ea59 0101 	orrs.w	r1, r9, r1
 8008164:	d120      	bne.n	80081a8 <_dtoa_r+0xad8>
 8008166:	2a00      	cmp	r2, #0
 8008168:	ddec      	ble.n	8008144 <_dtoa_r+0xa74>
 800816a:	4659      	mov	r1, fp
 800816c:	2201      	movs	r2, #1
 800816e:	4628      	mov	r0, r5
 8008170:	9308      	str	r3, [sp, #32]
 8008172:	f000 fad1 	bl	8008718 <__lshift>
 8008176:	4621      	mov	r1, r4
 8008178:	4683      	mov	fp, r0
 800817a:	f000 fb3d 	bl	80087f8 <__mcmp>
 800817e:	2800      	cmp	r0, #0
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	dc02      	bgt.n	800818a <_dtoa_r+0xaba>
 8008184:	d1de      	bne.n	8008144 <_dtoa_r+0xa74>
 8008186:	07da      	lsls	r2, r3, #31
 8008188:	d5dc      	bpl.n	8008144 <_dtoa_r+0xa74>
 800818a:	2b39      	cmp	r3, #57	; 0x39
 800818c:	d1d8      	bne.n	8008140 <_dtoa_r+0xa70>
 800818e:	2339      	movs	r3, #57	; 0x39
 8008190:	9a04      	ldr	r2, [sp, #16]
 8008192:	7013      	strb	r3, [r2, #0]
 8008194:	463b      	mov	r3, r7
 8008196:	461f      	mov	r7, r3
 8008198:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800819c:	3b01      	subs	r3, #1
 800819e:	2a39      	cmp	r2, #57	; 0x39
 80081a0:	d050      	beq.n	8008244 <_dtoa_r+0xb74>
 80081a2:	3201      	adds	r2, #1
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	e747      	b.n	8008038 <_dtoa_r+0x968>
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	dd03      	ble.n	80081b4 <_dtoa_r+0xae4>
 80081ac:	2b39      	cmp	r3, #57	; 0x39
 80081ae:	d0ee      	beq.n	800818e <_dtoa_r+0xabe>
 80081b0:	3301      	adds	r3, #1
 80081b2:	e7c7      	b.n	8008144 <_dtoa_r+0xa74>
 80081b4:	9a08      	ldr	r2, [sp, #32]
 80081b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081bc:	428a      	cmp	r2, r1
 80081be:	d02a      	beq.n	8008216 <_dtoa_r+0xb46>
 80081c0:	4659      	mov	r1, fp
 80081c2:	2300      	movs	r3, #0
 80081c4:	220a      	movs	r2, #10
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f8fa 	bl	80083c0 <__multadd>
 80081cc:	45b0      	cmp	r8, r6
 80081ce:	4683      	mov	fp, r0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	f04f 020a 	mov.w	r2, #10
 80081d8:	4641      	mov	r1, r8
 80081da:	4628      	mov	r0, r5
 80081dc:	d107      	bne.n	80081ee <_dtoa_r+0xb1e>
 80081de:	f000 f8ef 	bl	80083c0 <__multadd>
 80081e2:	4680      	mov	r8, r0
 80081e4:	4606      	mov	r6, r0
 80081e6:	9b08      	ldr	r3, [sp, #32]
 80081e8:	3301      	adds	r3, #1
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	e775      	b.n	80080da <_dtoa_r+0xa0a>
 80081ee:	f000 f8e7 	bl	80083c0 <__multadd>
 80081f2:	4631      	mov	r1, r6
 80081f4:	4680      	mov	r8, r0
 80081f6:	2300      	movs	r3, #0
 80081f8:	220a      	movs	r2, #10
 80081fa:	4628      	mov	r0, r5
 80081fc:	f000 f8e0 	bl	80083c0 <__multadd>
 8008200:	4606      	mov	r6, r0
 8008202:	e7f0      	b.n	80081e6 <_dtoa_r+0xb16>
 8008204:	f1b9 0f00 	cmp.w	r9, #0
 8008208:	bfcc      	ite	gt
 800820a:	464f      	movgt	r7, r9
 800820c:	2701      	movle	r7, #1
 800820e:	f04f 0800 	mov.w	r8, #0
 8008212:	9a03      	ldr	r2, [sp, #12]
 8008214:	4417      	add	r7, r2
 8008216:	4659      	mov	r1, fp
 8008218:	2201      	movs	r2, #1
 800821a:	4628      	mov	r0, r5
 800821c:	9308      	str	r3, [sp, #32]
 800821e:	f000 fa7b 	bl	8008718 <__lshift>
 8008222:	4621      	mov	r1, r4
 8008224:	4683      	mov	fp, r0
 8008226:	f000 fae7 	bl	80087f8 <__mcmp>
 800822a:	2800      	cmp	r0, #0
 800822c:	dcb2      	bgt.n	8008194 <_dtoa_r+0xac4>
 800822e:	d102      	bne.n	8008236 <_dtoa_r+0xb66>
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	07db      	lsls	r3, r3, #31
 8008234:	d4ae      	bmi.n	8008194 <_dtoa_r+0xac4>
 8008236:	463b      	mov	r3, r7
 8008238:	461f      	mov	r7, r3
 800823a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800823e:	2a30      	cmp	r2, #48	; 0x30
 8008240:	d0fa      	beq.n	8008238 <_dtoa_r+0xb68>
 8008242:	e6f9      	b.n	8008038 <_dtoa_r+0x968>
 8008244:	9a03      	ldr	r2, [sp, #12]
 8008246:	429a      	cmp	r2, r3
 8008248:	d1a5      	bne.n	8008196 <_dtoa_r+0xac6>
 800824a:	2331      	movs	r3, #49	; 0x31
 800824c:	f10a 0a01 	add.w	sl, sl, #1
 8008250:	e779      	b.n	8008146 <_dtoa_r+0xa76>
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <_dtoa_r+0xbd4>)
 8008254:	f7ff baa8 	b.w	80077a8 <_dtoa_r+0xd8>
 8008258:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800825a:	2b00      	cmp	r3, #0
 800825c:	f47f aa81 	bne.w	8007762 <_dtoa_r+0x92>
 8008260:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <_dtoa_r+0xbd8>)
 8008262:	f7ff baa1 	b.w	80077a8 <_dtoa_r+0xd8>
 8008266:	f1b9 0f00 	cmp.w	r9, #0
 800826a:	dc03      	bgt.n	8008274 <_dtoa_r+0xba4>
 800826c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800826e:	2b02      	cmp	r3, #2
 8008270:	f73f aecb 	bgt.w	800800a <_dtoa_r+0x93a>
 8008274:	9f03      	ldr	r7, [sp, #12]
 8008276:	4621      	mov	r1, r4
 8008278:	4658      	mov	r0, fp
 800827a:	f7ff f99d 	bl	80075b8 <quorem>
 800827e:	9a03      	ldr	r2, [sp, #12]
 8008280:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008284:	f807 3b01 	strb.w	r3, [r7], #1
 8008288:	1aba      	subs	r2, r7, r2
 800828a:	4591      	cmp	r9, r2
 800828c:	ddba      	ble.n	8008204 <_dtoa_r+0xb34>
 800828e:	4659      	mov	r1, fp
 8008290:	2300      	movs	r3, #0
 8008292:	220a      	movs	r2, #10
 8008294:	4628      	mov	r0, r5
 8008296:	f000 f893 	bl	80083c0 <__multadd>
 800829a:	4683      	mov	fp, r0
 800829c:	e7eb      	b.n	8008276 <_dtoa_r+0xba6>
 800829e:	bf00      	nop
 80082a0:	08009df7 	.word	0x08009df7
 80082a4:	08009d54 	.word	0x08009d54
 80082a8:	08009d78 	.word	0x08009d78

080082ac <_localeconv_r>:
 80082ac:	4800      	ldr	r0, [pc, #0]	; (80082b0 <_localeconv_r+0x4>)
 80082ae:	4770      	bx	lr
 80082b0:	20000168 	.word	0x20000168

080082b4 <malloc>:
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <malloc+0xc>)
 80082b6:	4601      	mov	r1, r0
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	f000 bc1d 	b.w	8008af8 <_malloc_r>
 80082be:	bf00      	nop
 80082c0:	20000014 	.word	0x20000014

080082c4 <memchr>:
 80082c4:	4603      	mov	r3, r0
 80082c6:	b510      	push	{r4, lr}
 80082c8:	b2c9      	uxtb	r1, r1
 80082ca:	4402      	add	r2, r0
 80082cc:	4293      	cmp	r3, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	d101      	bne.n	80082d6 <memchr+0x12>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e003      	b.n	80082de <memchr+0x1a>
 80082d6:	7804      	ldrb	r4, [r0, #0]
 80082d8:	3301      	adds	r3, #1
 80082da:	428c      	cmp	r4, r1
 80082dc:	d1f6      	bne.n	80082cc <memchr+0x8>
 80082de:	bd10      	pop	{r4, pc}

080082e0 <memcpy>:
 80082e0:	440a      	add	r2, r1
 80082e2:	4291      	cmp	r1, r2
 80082e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e8:	d100      	bne.n	80082ec <memcpy+0xc>
 80082ea:	4770      	bx	lr
 80082ec:	b510      	push	{r4, lr}
 80082ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f2:	4291      	cmp	r1, r2
 80082f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f8:	d1f9      	bne.n	80082ee <memcpy+0xe>
 80082fa:	bd10      	pop	{r4, pc}

080082fc <_Balloc>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008300:	4604      	mov	r4, r0
 8008302:	460d      	mov	r5, r1
 8008304:	b976      	cbnz	r6, 8008324 <_Balloc+0x28>
 8008306:	2010      	movs	r0, #16
 8008308:	f7ff ffd4 	bl	80082b4 <malloc>
 800830c:	4602      	mov	r2, r0
 800830e:	6260      	str	r0, [r4, #36]	; 0x24
 8008310:	b920      	cbnz	r0, 800831c <_Balloc+0x20>
 8008312:	2166      	movs	r1, #102	; 0x66
 8008314:	4b17      	ldr	r3, [pc, #92]	; (8008374 <_Balloc+0x78>)
 8008316:	4818      	ldr	r0, [pc, #96]	; (8008378 <_Balloc+0x7c>)
 8008318:	f000 fdce 	bl	8008eb8 <__assert_func>
 800831c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008320:	6006      	str	r6, [r0, #0]
 8008322:	60c6      	str	r6, [r0, #12]
 8008324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008326:	68f3      	ldr	r3, [r6, #12]
 8008328:	b183      	cbz	r3, 800834c <_Balloc+0x50>
 800832a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008332:	b9b8      	cbnz	r0, 8008364 <_Balloc+0x68>
 8008334:	2101      	movs	r1, #1
 8008336:	fa01 f605 	lsl.w	r6, r1, r5
 800833a:	1d72      	adds	r2, r6, #5
 800833c:	4620      	mov	r0, r4
 800833e:	0092      	lsls	r2, r2, #2
 8008340:	f000 fb5e 	bl	8008a00 <_calloc_r>
 8008344:	b160      	cbz	r0, 8008360 <_Balloc+0x64>
 8008346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800834a:	e00e      	b.n	800836a <_Balloc+0x6e>
 800834c:	2221      	movs	r2, #33	; 0x21
 800834e:	2104      	movs	r1, #4
 8008350:	4620      	mov	r0, r4
 8008352:	f000 fb55 	bl	8008a00 <_calloc_r>
 8008356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008358:	60f0      	str	r0, [r6, #12]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e4      	bne.n	800832a <_Balloc+0x2e>
 8008360:	2000      	movs	r0, #0
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	6802      	ldr	r2, [r0, #0]
 8008366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800836a:	2300      	movs	r3, #0
 800836c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008370:	e7f7      	b.n	8008362 <_Balloc+0x66>
 8008372:	bf00      	nop
 8008374:	08009d85 	.word	0x08009d85
 8008378:	08009e08 	.word	0x08009e08

0800837c <_Bfree>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008380:	4605      	mov	r5, r0
 8008382:	460c      	mov	r4, r1
 8008384:	b976      	cbnz	r6, 80083a4 <_Bfree+0x28>
 8008386:	2010      	movs	r0, #16
 8008388:	f7ff ff94 	bl	80082b4 <malloc>
 800838c:	4602      	mov	r2, r0
 800838e:	6268      	str	r0, [r5, #36]	; 0x24
 8008390:	b920      	cbnz	r0, 800839c <_Bfree+0x20>
 8008392:	218a      	movs	r1, #138	; 0x8a
 8008394:	4b08      	ldr	r3, [pc, #32]	; (80083b8 <_Bfree+0x3c>)
 8008396:	4809      	ldr	r0, [pc, #36]	; (80083bc <_Bfree+0x40>)
 8008398:	f000 fd8e 	bl	8008eb8 <__assert_func>
 800839c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083a0:	6006      	str	r6, [r0, #0]
 80083a2:	60c6      	str	r6, [r0, #12]
 80083a4:	b13c      	cbz	r4, 80083b6 <_Bfree+0x3a>
 80083a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083a8:	6862      	ldr	r2, [r4, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083b0:	6021      	str	r1, [r4, #0]
 80083b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	08009d85 	.word	0x08009d85
 80083bc:	08009e08 	.word	0x08009e08

080083c0 <__multadd>:
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	4607      	mov	r7, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	461e      	mov	r6, r3
 80083ca:	2000      	movs	r0, #0
 80083cc:	690d      	ldr	r5, [r1, #16]
 80083ce:	f101 0c14 	add.w	ip, r1, #20
 80083d2:	f8dc 3000 	ldr.w	r3, [ip]
 80083d6:	3001      	adds	r0, #1
 80083d8:	b299      	uxth	r1, r3
 80083da:	fb02 6101 	mla	r1, r2, r1, r6
 80083de:	0c1e      	lsrs	r6, r3, #16
 80083e0:	0c0b      	lsrs	r3, r1, #16
 80083e2:	fb02 3306 	mla	r3, r2, r6, r3
 80083e6:	b289      	uxth	r1, r1
 80083e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083ec:	4285      	cmp	r5, r0
 80083ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083f2:	f84c 1b04 	str.w	r1, [ip], #4
 80083f6:	dcec      	bgt.n	80083d2 <__multadd+0x12>
 80083f8:	b30e      	cbz	r6, 800843e <__multadd+0x7e>
 80083fa:	68a3      	ldr	r3, [r4, #8]
 80083fc:	42ab      	cmp	r3, r5
 80083fe:	dc19      	bgt.n	8008434 <__multadd+0x74>
 8008400:	6861      	ldr	r1, [r4, #4]
 8008402:	4638      	mov	r0, r7
 8008404:	3101      	adds	r1, #1
 8008406:	f7ff ff79 	bl	80082fc <_Balloc>
 800840a:	4680      	mov	r8, r0
 800840c:	b928      	cbnz	r0, 800841a <__multadd+0x5a>
 800840e:	4602      	mov	r2, r0
 8008410:	21b5      	movs	r1, #181	; 0xb5
 8008412:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <__multadd+0x84>)
 8008414:	480c      	ldr	r0, [pc, #48]	; (8008448 <__multadd+0x88>)
 8008416:	f000 fd4f 	bl	8008eb8 <__assert_func>
 800841a:	6922      	ldr	r2, [r4, #16]
 800841c:	f104 010c 	add.w	r1, r4, #12
 8008420:	3202      	adds	r2, #2
 8008422:	0092      	lsls	r2, r2, #2
 8008424:	300c      	adds	r0, #12
 8008426:	f7ff ff5b 	bl	80082e0 <memcpy>
 800842a:	4621      	mov	r1, r4
 800842c:	4638      	mov	r0, r7
 800842e:	f7ff ffa5 	bl	800837c <_Bfree>
 8008432:	4644      	mov	r4, r8
 8008434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008438:	3501      	adds	r5, #1
 800843a:	615e      	str	r6, [r3, #20]
 800843c:	6125      	str	r5, [r4, #16]
 800843e:	4620      	mov	r0, r4
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	08009df7 	.word	0x08009df7
 8008448:	08009e08 	.word	0x08009e08

0800844c <__hi0bits>:
 800844c:	0c02      	lsrs	r2, r0, #16
 800844e:	0412      	lsls	r2, r2, #16
 8008450:	4603      	mov	r3, r0
 8008452:	b9ca      	cbnz	r2, 8008488 <__hi0bits+0x3c>
 8008454:	0403      	lsls	r3, r0, #16
 8008456:	2010      	movs	r0, #16
 8008458:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800845c:	bf04      	itt	eq
 800845e:	021b      	lsleq	r3, r3, #8
 8008460:	3008      	addeq	r0, #8
 8008462:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008466:	bf04      	itt	eq
 8008468:	011b      	lsleq	r3, r3, #4
 800846a:	3004      	addeq	r0, #4
 800846c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008470:	bf04      	itt	eq
 8008472:	009b      	lsleq	r3, r3, #2
 8008474:	3002      	addeq	r0, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	db05      	blt.n	8008486 <__hi0bits+0x3a>
 800847a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800847e:	f100 0001 	add.w	r0, r0, #1
 8008482:	bf08      	it	eq
 8008484:	2020      	moveq	r0, #32
 8008486:	4770      	bx	lr
 8008488:	2000      	movs	r0, #0
 800848a:	e7e5      	b.n	8008458 <__hi0bits+0xc>

0800848c <__lo0bits>:
 800848c:	6803      	ldr	r3, [r0, #0]
 800848e:	4602      	mov	r2, r0
 8008490:	f013 0007 	ands.w	r0, r3, #7
 8008494:	d00b      	beq.n	80084ae <__lo0bits+0x22>
 8008496:	07d9      	lsls	r1, r3, #31
 8008498:	d421      	bmi.n	80084de <__lo0bits+0x52>
 800849a:	0798      	lsls	r0, r3, #30
 800849c:	bf49      	itett	mi
 800849e:	085b      	lsrmi	r3, r3, #1
 80084a0:	089b      	lsrpl	r3, r3, #2
 80084a2:	2001      	movmi	r0, #1
 80084a4:	6013      	strmi	r3, [r2, #0]
 80084a6:	bf5c      	itt	pl
 80084a8:	2002      	movpl	r0, #2
 80084aa:	6013      	strpl	r3, [r2, #0]
 80084ac:	4770      	bx	lr
 80084ae:	b299      	uxth	r1, r3
 80084b0:	b909      	cbnz	r1, 80084b6 <__lo0bits+0x2a>
 80084b2:	2010      	movs	r0, #16
 80084b4:	0c1b      	lsrs	r3, r3, #16
 80084b6:	b2d9      	uxtb	r1, r3
 80084b8:	b909      	cbnz	r1, 80084be <__lo0bits+0x32>
 80084ba:	3008      	adds	r0, #8
 80084bc:	0a1b      	lsrs	r3, r3, #8
 80084be:	0719      	lsls	r1, r3, #28
 80084c0:	bf04      	itt	eq
 80084c2:	091b      	lsreq	r3, r3, #4
 80084c4:	3004      	addeq	r0, #4
 80084c6:	0799      	lsls	r1, r3, #30
 80084c8:	bf04      	itt	eq
 80084ca:	089b      	lsreq	r3, r3, #2
 80084cc:	3002      	addeq	r0, #2
 80084ce:	07d9      	lsls	r1, r3, #31
 80084d0:	d403      	bmi.n	80084da <__lo0bits+0x4e>
 80084d2:	085b      	lsrs	r3, r3, #1
 80084d4:	f100 0001 	add.w	r0, r0, #1
 80084d8:	d003      	beq.n	80084e2 <__lo0bits+0x56>
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	4770      	bx	lr
 80084de:	2000      	movs	r0, #0
 80084e0:	4770      	bx	lr
 80084e2:	2020      	movs	r0, #32
 80084e4:	4770      	bx	lr
	...

080084e8 <__i2b>:
 80084e8:	b510      	push	{r4, lr}
 80084ea:	460c      	mov	r4, r1
 80084ec:	2101      	movs	r1, #1
 80084ee:	f7ff ff05 	bl	80082fc <_Balloc>
 80084f2:	4602      	mov	r2, r0
 80084f4:	b928      	cbnz	r0, 8008502 <__i2b+0x1a>
 80084f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084fa:	4b04      	ldr	r3, [pc, #16]	; (800850c <__i2b+0x24>)
 80084fc:	4804      	ldr	r0, [pc, #16]	; (8008510 <__i2b+0x28>)
 80084fe:	f000 fcdb 	bl	8008eb8 <__assert_func>
 8008502:	2301      	movs	r3, #1
 8008504:	6144      	str	r4, [r0, #20]
 8008506:	6103      	str	r3, [r0, #16]
 8008508:	bd10      	pop	{r4, pc}
 800850a:	bf00      	nop
 800850c:	08009df7 	.word	0x08009df7
 8008510:	08009e08 	.word	0x08009e08

08008514 <__multiply>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	4691      	mov	r9, r2
 800851a:	690a      	ldr	r2, [r1, #16]
 800851c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008520:	460c      	mov	r4, r1
 8008522:	429a      	cmp	r2, r3
 8008524:	bfbe      	ittt	lt
 8008526:	460b      	movlt	r3, r1
 8008528:	464c      	movlt	r4, r9
 800852a:	4699      	movlt	r9, r3
 800852c:	6927      	ldr	r7, [r4, #16]
 800852e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008532:	68a3      	ldr	r3, [r4, #8]
 8008534:	6861      	ldr	r1, [r4, #4]
 8008536:	eb07 060a 	add.w	r6, r7, sl
 800853a:	42b3      	cmp	r3, r6
 800853c:	b085      	sub	sp, #20
 800853e:	bfb8      	it	lt
 8008540:	3101      	addlt	r1, #1
 8008542:	f7ff fedb 	bl	80082fc <_Balloc>
 8008546:	b930      	cbnz	r0, 8008556 <__multiply+0x42>
 8008548:	4602      	mov	r2, r0
 800854a:	f240 115d 	movw	r1, #349	; 0x15d
 800854e:	4b43      	ldr	r3, [pc, #268]	; (800865c <__multiply+0x148>)
 8008550:	4843      	ldr	r0, [pc, #268]	; (8008660 <__multiply+0x14c>)
 8008552:	f000 fcb1 	bl	8008eb8 <__assert_func>
 8008556:	f100 0514 	add.w	r5, r0, #20
 800855a:	462b      	mov	r3, r5
 800855c:	2200      	movs	r2, #0
 800855e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008562:	4543      	cmp	r3, r8
 8008564:	d321      	bcc.n	80085aa <__multiply+0x96>
 8008566:	f104 0314 	add.w	r3, r4, #20
 800856a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800856e:	f109 0314 	add.w	r3, r9, #20
 8008572:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008576:	9202      	str	r2, [sp, #8]
 8008578:	1b3a      	subs	r2, r7, r4
 800857a:	3a15      	subs	r2, #21
 800857c:	f022 0203 	bic.w	r2, r2, #3
 8008580:	3204      	adds	r2, #4
 8008582:	f104 0115 	add.w	r1, r4, #21
 8008586:	428f      	cmp	r7, r1
 8008588:	bf38      	it	cc
 800858a:	2204      	movcc	r2, #4
 800858c:	9201      	str	r2, [sp, #4]
 800858e:	9a02      	ldr	r2, [sp, #8]
 8008590:	9303      	str	r3, [sp, #12]
 8008592:	429a      	cmp	r2, r3
 8008594:	d80c      	bhi.n	80085b0 <__multiply+0x9c>
 8008596:	2e00      	cmp	r6, #0
 8008598:	dd03      	ble.n	80085a2 <__multiply+0x8e>
 800859a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d059      	beq.n	8008656 <__multiply+0x142>
 80085a2:	6106      	str	r6, [r0, #16]
 80085a4:	b005      	add	sp, #20
 80085a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085aa:	f843 2b04 	str.w	r2, [r3], #4
 80085ae:	e7d8      	b.n	8008562 <__multiply+0x4e>
 80085b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80085b4:	f1ba 0f00 	cmp.w	sl, #0
 80085b8:	d023      	beq.n	8008602 <__multiply+0xee>
 80085ba:	46a9      	mov	r9, r5
 80085bc:	f04f 0c00 	mov.w	ip, #0
 80085c0:	f104 0e14 	add.w	lr, r4, #20
 80085c4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085c8:	f8d9 1000 	ldr.w	r1, [r9]
 80085cc:	fa1f fb82 	uxth.w	fp, r2
 80085d0:	b289      	uxth	r1, r1
 80085d2:	fb0a 110b 	mla	r1, sl, fp, r1
 80085d6:	4461      	add	r1, ip
 80085d8:	f8d9 c000 	ldr.w	ip, [r9]
 80085dc:	0c12      	lsrs	r2, r2, #16
 80085de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80085e2:	fb0a c202 	mla	r2, sl, r2, ip
 80085e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085ea:	b289      	uxth	r1, r1
 80085ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085f0:	4577      	cmp	r7, lr
 80085f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085f6:	f849 1b04 	str.w	r1, [r9], #4
 80085fa:	d8e3      	bhi.n	80085c4 <__multiply+0xb0>
 80085fc:	9a01      	ldr	r2, [sp, #4]
 80085fe:	f845 c002 	str.w	ip, [r5, r2]
 8008602:	9a03      	ldr	r2, [sp, #12]
 8008604:	3304      	adds	r3, #4
 8008606:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800860a:	f1b9 0f00 	cmp.w	r9, #0
 800860e:	d020      	beq.n	8008652 <__multiply+0x13e>
 8008610:	46ae      	mov	lr, r5
 8008612:	f04f 0a00 	mov.w	sl, #0
 8008616:	6829      	ldr	r1, [r5, #0]
 8008618:	f104 0c14 	add.w	ip, r4, #20
 800861c:	f8bc b000 	ldrh.w	fp, [ip]
 8008620:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008624:	b289      	uxth	r1, r1
 8008626:	fb09 220b 	mla	r2, r9, fp, r2
 800862a:	4492      	add	sl, r2
 800862c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008630:	f84e 1b04 	str.w	r1, [lr], #4
 8008634:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008638:	f8be 1000 	ldrh.w	r1, [lr]
 800863c:	0c12      	lsrs	r2, r2, #16
 800863e:	fb09 1102 	mla	r1, r9, r2, r1
 8008642:	4567      	cmp	r7, ip
 8008644:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008648:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800864c:	d8e6      	bhi.n	800861c <__multiply+0x108>
 800864e:	9a01      	ldr	r2, [sp, #4]
 8008650:	50a9      	str	r1, [r5, r2]
 8008652:	3504      	adds	r5, #4
 8008654:	e79b      	b.n	800858e <__multiply+0x7a>
 8008656:	3e01      	subs	r6, #1
 8008658:	e79d      	b.n	8008596 <__multiply+0x82>
 800865a:	bf00      	nop
 800865c:	08009df7 	.word	0x08009df7
 8008660:	08009e08 	.word	0x08009e08

08008664 <__pow5mult>:
 8008664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008668:	4615      	mov	r5, r2
 800866a:	f012 0203 	ands.w	r2, r2, #3
 800866e:	4606      	mov	r6, r0
 8008670:	460f      	mov	r7, r1
 8008672:	d007      	beq.n	8008684 <__pow5mult+0x20>
 8008674:	4c25      	ldr	r4, [pc, #148]	; (800870c <__pow5mult+0xa8>)
 8008676:	3a01      	subs	r2, #1
 8008678:	2300      	movs	r3, #0
 800867a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800867e:	f7ff fe9f 	bl	80083c0 <__multadd>
 8008682:	4607      	mov	r7, r0
 8008684:	10ad      	asrs	r5, r5, #2
 8008686:	d03d      	beq.n	8008704 <__pow5mult+0xa0>
 8008688:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800868a:	b97c      	cbnz	r4, 80086ac <__pow5mult+0x48>
 800868c:	2010      	movs	r0, #16
 800868e:	f7ff fe11 	bl	80082b4 <malloc>
 8008692:	4602      	mov	r2, r0
 8008694:	6270      	str	r0, [r6, #36]	; 0x24
 8008696:	b928      	cbnz	r0, 80086a4 <__pow5mult+0x40>
 8008698:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800869c:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <__pow5mult+0xac>)
 800869e:	481d      	ldr	r0, [pc, #116]	; (8008714 <__pow5mult+0xb0>)
 80086a0:	f000 fc0a 	bl	8008eb8 <__assert_func>
 80086a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086a8:	6004      	str	r4, [r0, #0]
 80086aa:	60c4      	str	r4, [r0, #12]
 80086ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086b4:	b94c      	cbnz	r4, 80086ca <__pow5mult+0x66>
 80086b6:	f240 2171 	movw	r1, #625	; 0x271
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7ff ff14 	bl	80084e8 <__i2b>
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80086c8:	6003      	str	r3, [r0, #0]
 80086ca:	f04f 0900 	mov.w	r9, #0
 80086ce:	07eb      	lsls	r3, r5, #31
 80086d0:	d50a      	bpl.n	80086e8 <__pow5mult+0x84>
 80086d2:	4639      	mov	r1, r7
 80086d4:	4622      	mov	r2, r4
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7ff ff1c 	bl	8008514 <__multiply>
 80086dc:	4680      	mov	r8, r0
 80086de:	4639      	mov	r1, r7
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7ff fe4b 	bl	800837c <_Bfree>
 80086e6:	4647      	mov	r7, r8
 80086e8:	106d      	asrs	r5, r5, #1
 80086ea:	d00b      	beq.n	8008704 <__pow5mult+0xa0>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	b938      	cbnz	r0, 8008700 <__pow5mult+0x9c>
 80086f0:	4622      	mov	r2, r4
 80086f2:	4621      	mov	r1, r4
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7ff ff0d 	bl	8008514 <__multiply>
 80086fa:	6020      	str	r0, [r4, #0]
 80086fc:	f8c0 9000 	str.w	r9, [r0]
 8008700:	4604      	mov	r4, r0
 8008702:	e7e4      	b.n	80086ce <__pow5mult+0x6a>
 8008704:	4638      	mov	r0, r7
 8008706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870a:	bf00      	nop
 800870c:	08009f58 	.word	0x08009f58
 8008710:	08009d85 	.word	0x08009d85
 8008714:	08009e08 	.word	0x08009e08

08008718 <__lshift>:
 8008718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	460c      	mov	r4, r1
 800871e:	4607      	mov	r7, r0
 8008720:	4691      	mov	r9, r2
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	6849      	ldr	r1, [r1, #4]
 8008726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800872a:	68a3      	ldr	r3, [r4, #8]
 800872c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008730:	f108 0601 	add.w	r6, r8, #1
 8008734:	42b3      	cmp	r3, r6
 8008736:	db0b      	blt.n	8008750 <__lshift+0x38>
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff fddf 	bl	80082fc <_Balloc>
 800873e:	4605      	mov	r5, r0
 8008740:	b948      	cbnz	r0, 8008756 <__lshift+0x3e>
 8008742:	4602      	mov	r2, r0
 8008744:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008748:	4b29      	ldr	r3, [pc, #164]	; (80087f0 <__lshift+0xd8>)
 800874a:	482a      	ldr	r0, [pc, #168]	; (80087f4 <__lshift+0xdc>)
 800874c:	f000 fbb4 	bl	8008eb8 <__assert_func>
 8008750:	3101      	adds	r1, #1
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	e7ee      	b.n	8008734 <__lshift+0x1c>
 8008756:	2300      	movs	r3, #0
 8008758:	f100 0114 	add.w	r1, r0, #20
 800875c:	f100 0210 	add.w	r2, r0, #16
 8008760:	4618      	mov	r0, r3
 8008762:	4553      	cmp	r3, sl
 8008764:	db37      	blt.n	80087d6 <__lshift+0xbe>
 8008766:	6920      	ldr	r0, [r4, #16]
 8008768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800876c:	f104 0314 	add.w	r3, r4, #20
 8008770:	f019 091f 	ands.w	r9, r9, #31
 8008774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008778:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800877c:	d02f      	beq.n	80087de <__lshift+0xc6>
 800877e:	468a      	mov	sl, r1
 8008780:	f04f 0c00 	mov.w	ip, #0
 8008784:	f1c9 0e20 	rsb	lr, r9, #32
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	fa02 f209 	lsl.w	r2, r2, r9
 800878e:	ea42 020c 	orr.w	r2, r2, ip
 8008792:	f84a 2b04 	str.w	r2, [sl], #4
 8008796:	f853 2b04 	ldr.w	r2, [r3], #4
 800879a:	4298      	cmp	r0, r3
 800879c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80087a0:	d8f2      	bhi.n	8008788 <__lshift+0x70>
 80087a2:	1b03      	subs	r3, r0, r4
 80087a4:	3b15      	subs	r3, #21
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	3304      	adds	r3, #4
 80087ac:	f104 0215 	add.w	r2, r4, #21
 80087b0:	4290      	cmp	r0, r2
 80087b2:	bf38      	it	cc
 80087b4:	2304      	movcc	r3, #4
 80087b6:	f841 c003 	str.w	ip, [r1, r3]
 80087ba:	f1bc 0f00 	cmp.w	ip, #0
 80087be:	d001      	beq.n	80087c4 <__lshift+0xac>
 80087c0:	f108 0602 	add.w	r6, r8, #2
 80087c4:	3e01      	subs	r6, #1
 80087c6:	4638      	mov	r0, r7
 80087c8:	4621      	mov	r1, r4
 80087ca:	612e      	str	r6, [r5, #16]
 80087cc:	f7ff fdd6 	bl	800837c <_Bfree>
 80087d0:	4628      	mov	r0, r5
 80087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087da:	3301      	adds	r3, #1
 80087dc:	e7c1      	b.n	8008762 <__lshift+0x4a>
 80087de:	3904      	subs	r1, #4
 80087e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e4:	4298      	cmp	r0, r3
 80087e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80087ea:	d8f9      	bhi.n	80087e0 <__lshift+0xc8>
 80087ec:	e7ea      	b.n	80087c4 <__lshift+0xac>
 80087ee:	bf00      	nop
 80087f0:	08009df7 	.word	0x08009df7
 80087f4:	08009e08 	.word	0x08009e08

080087f8 <__mcmp>:
 80087f8:	4603      	mov	r3, r0
 80087fa:	690a      	ldr	r2, [r1, #16]
 80087fc:	6900      	ldr	r0, [r0, #16]
 80087fe:	b530      	push	{r4, r5, lr}
 8008800:	1a80      	subs	r0, r0, r2
 8008802:	d10d      	bne.n	8008820 <__mcmp+0x28>
 8008804:	3314      	adds	r3, #20
 8008806:	3114      	adds	r1, #20
 8008808:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800880c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008810:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008814:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008818:	4295      	cmp	r5, r2
 800881a:	d002      	beq.n	8008822 <__mcmp+0x2a>
 800881c:	d304      	bcc.n	8008828 <__mcmp+0x30>
 800881e:	2001      	movs	r0, #1
 8008820:	bd30      	pop	{r4, r5, pc}
 8008822:	42a3      	cmp	r3, r4
 8008824:	d3f4      	bcc.n	8008810 <__mcmp+0x18>
 8008826:	e7fb      	b.n	8008820 <__mcmp+0x28>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e7f8      	b.n	8008820 <__mcmp+0x28>
	...

08008830 <__mdiff>:
 8008830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	460d      	mov	r5, r1
 8008836:	4607      	mov	r7, r0
 8008838:	4611      	mov	r1, r2
 800883a:	4628      	mov	r0, r5
 800883c:	4614      	mov	r4, r2
 800883e:	f7ff ffdb 	bl	80087f8 <__mcmp>
 8008842:	1e06      	subs	r6, r0, #0
 8008844:	d111      	bne.n	800886a <__mdiff+0x3a>
 8008846:	4631      	mov	r1, r6
 8008848:	4638      	mov	r0, r7
 800884a:	f7ff fd57 	bl	80082fc <_Balloc>
 800884e:	4602      	mov	r2, r0
 8008850:	b928      	cbnz	r0, 800885e <__mdiff+0x2e>
 8008852:	f240 2132 	movw	r1, #562	; 0x232
 8008856:	4b3a      	ldr	r3, [pc, #232]	; (8008940 <__mdiff+0x110>)
 8008858:	483a      	ldr	r0, [pc, #232]	; (8008944 <__mdiff+0x114>)
 800885a:	f000 fb2d 	bl	8008eb8 <__assert_func>
 800885e:	2301      	movs	r3, #1
 8008860:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008864:	4610      	mov	r0, r2
 8008866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886a:	bfa4      	itt	ge
 800886c:	4623      	movge	r3, r4
 800886e:	462c      	movge	r4, r5
 8008870:	4638      	mov	r0, r7
 8008872:	6861      	ldr	r1, [r4, #4]
 8008874:	bfa6      	itte	ge
 8008876:	461d      	movge	r5, r3
 8008878:	2600      	movge	r6, #0
 800887a:	2601      	movlt	r6, #1
 800887c:	f7ff fd3e 	bl	80082fc <_Balloc>
 8008880:	4602      	mov	r2, r0
 8008882:	b918      	cbnz	r0, 800888c <__mdiff+0x5c>
 8008884:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008888:	4b2d      	ldr	r3, [pc, #180]	; (8008940 <__mdiff+0x110>)
 800888a:	e7e5      	b.n	8008858 <__mdiff+0x28>
 800888c:	f102 0814 	add.w	r8, r2, #20
 8008890:	46c2      	mov	sl, r8
 8008892:	f04f 0c00 	mov.w	ip, #0
 8008896:	6927      	ldr	r7, [r4, #16]
 8008898:	60c6      	str	r6, [r0, #12]
 800889a:	692e      	ldr	r6, [r5, #16]
 800889c:	f104 0014 	add.w	r0, r4, #20
 80088a0:	f105 0914 	add.w	r9, r5, #20
 80088a4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80088a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088ac:	3410      	adds	r4, #16
 80088ae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80088b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80088b6:	fa1f f18b 	uxth.w	r1, fp
 80088ba:	448c      	add	ip, r1
 80088bc:	b299      	uxth	r1, r3
 80088be:	0c1b      	lsrs	r3, r3, #16
 80088c0:	ebac 0101 	sub.w	r1, ip, r1
 80088c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80088cc:	b289      	uxth	r1, r1
 80088ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80088d2:	454e      	cmp	r6, r9
 80088d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80088d8:	f84a 3b04 	str.w	r3, [sl], #4
 80088dc:	d8e7      	bhi.n	80088ae <__mdiff+0x7e>
 80088de:	1b73      	subs	r3, r6, r5
 80088e0:	3b15      	subs	r3, #21
 80088e2:	f023 0303 	bic.w	r3, r3, #3
 80088e6:	3515      	adds	r5, #21
 80088e8:	3304      	adds	r3, #4
 80088ea:	42ae      	cmp	r6, r5
 80088ec:	bf38      	it	cc
 80088ee:	2304      	movcc	r3, #4
 80088f0:	4418      	add	r0, r3
 80088f2:	4443      	add	r3, r8
 80088f4:	461e      	mov	r6, r3
 80088f6:	4605      	mov	r5, r0
 80088f8:	4575      	cmp	r5, lr
 80088fa:	d30e      	bcc.n	800891a <__mdiff+0xea>
 80088fc:	f10e 0103 	add.w	r1, lr, #3
 8008900:	1a09      	subs	r1, r1, r0
 8008902:	f021 0103 	bic.w	r1, r1, #3
 8008906:	3803      	subs	r0, #3
 8008908:	4586      	cmp	lr, r0
 800890a:	bf38      	it	cc
 800890c:	2100      	movcc	r1, #0
 800890e:	4419      	add	r1, r3
 8008910:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008914:	b18b      	cbz	r3, 800893a <__mdiff+0x10a>
 8008916:	6117      	str	r7, [r2, #16]
 8008918:	e7a4      	b.n	8008864 <__mdiff+0x34>
 800891a:	f855 8b04 	ldr.w	r8, [r5], #4
 800891e:	fa1f f188 	uxth.w	r1, r8
 8008922:	4461      	add	r1, ip
 8008924:	140c      	asrs	r4, r1, #16
 8008926:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800892a:	b289      	uxth	r1, r1
 800892c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008930:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008934:	f846 1b04 	str.w	r1, [r6], #4
 8008938:	e7de      	b.n	80088f8 <__mdiff+0xc8>
 800893a:	3f01      	subs	r7, #1
 800893c:	e7e8      	b.n	8008910 <__mdiff+0xe0>
 800893e:	bf00      	nop
 8008940:	08009df7 	.word	0x08009df7
 8008944:	08009e08 	.word	0x08009e08

08008948 <__d2b>:
 8008948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800894c:	2101      	movs	r1, #1
 800894e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008952:	4690      	mov	r8, r2
 8008954:	461d      	mov	r5, r3
 8008956:	f7ff fcd1 	bl	80082fc <_Balloc>
 800895a:	4604      	mov	r4, r0
 800895c:	b930      	cbnz	r0, 800896c <__d2b+0x24>
 800895e:	4602      	mov	r2, r0
 8008960:	f240 310a 	movw	r1, #778	; 0x30a
 8008964:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <__d2b+0xb0>)
 8008966:	4825      	ldr	r0, [pc, #148]	; (80089fc <__d2b+0xb4>)
 8008968:	f000 faa6 	bl	8008eb8 <__assert_func>
 800896c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008970:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008974:	bb2d      	cbnz	r5, 80089c2 <__d2b+0x7a>
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	f1b8 0300 	subs.w	r3, r8, #0
 800897c:	d026      	beq.n	80089cc <__d2b+0x84>
 800897e:	4668      	mov	r0, sp
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	f7ff fd83 	bl	800848c <__lo0bits>
 8008986:	9900      	ldr	r1, [sp, #0]
 8008988:	b1f0      	cbz	r0, 80089c8 <__d2b+0x80>
 800898a:	9a01      	ldr	r2, [sp, #4]
 800898c:	f1c0 0320 	rsb	r3, r0, #32
 8008990:	fa02 f303 	lsl.w	r3, r2, r3
 8008994:	430b      	orrs	r3, r1
 8008996:	40c2      	lsrs	r2, r0
 8008998:	6163      	str	r3, [r4, #20]
 800899a:	9201      	str	r2, [sp, #4]
 800899c:	9b01      	ldr	r3, [sp, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bf14      	ite	ne
 80089a2:	2102      	movne	r1, #2
 80089a4:	2101      	moveq	r1, #1
 80089a6:	61a3      	str	r3, [r4, #24]
 80089a8:	6121      	str	r1, [r4, #16]
 80089aa:	b1c5      	cbz	r5, 80089de <__d2b+0x96>
 80089ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089b0:	4405      	add	r5, r0
 80089b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089b6:	603d      	str	r5, [r7, #0]
 80089b8:	6030      	str	r0, [r6, #0]
 80089ba:	4620      	mov	r0, r4
 80089bc:	b002      	add	sp, #8
 80089be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089c6:	e7d6      	b.n	8008976 <__d2b+0x2e>
 80089c8:	6161      	str	r1, [r4, #20]
 80089ca:	e7e7      	b.n	800899c <__d2b+0x54>
 80089cc:	a801      	add	r0, sp, #4
 80089ce:	f7ff fd5d 	bl	800848c <__lo0bits>
 80089d2:	2101      	movs	r1, #1
 80089d4:	9b01      	ldr	r3, [sp, #4]
 80089d6:	6121      	str	r1, [r4, #16]
 80089d8:	6163      	str	r3, [r4, #20]
 80089da:	3020      	adds	r0, #32
 80089dc:	e7e5      	b.n	80089aa <__d2b+0x62>
 80089de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80089e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089e6:	6038      	str	r0, [r7, #0]
 80089e8:	6918      	ldr	r0, [r3, #16]
 80089ea:	f7ff fd2f 	bl	800844c <__hi0bits>
 80089ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80089f2:	6031      	str	r1, [r6, #0]
 80089f4:	e7e1      	b.n	80089ba <__d2b+0x72>
 80089f6:	bf00      	nop
 80089f8:	08009df7 	.word	0x08009df7
 80089fc:	08009e08 	.word	0x08009e08

08008a00 <_calloc_r>:
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	fba1 5402 	umull	r5, r4, r1, r2
 8008a06:	b934      	cbnz	r4, 8008a16 <_calloc_r+0x16>
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f000 f875 	bl	8008af8 <_malloc_r>
 8008a0e:	4606      	mov	r6, r0
 8008a10:	b928      	cbnz	r0, 8008a1e <_calloc_r+0x1e>
 8008a12:	4630      	mov	r0, r6
 8008a14:	bd70      	pop	{r4, r5, r6, pc}
 8008a16:	220c      	movs	r2, #12
 8008a18:	2600      	movs	r6, #0
 8008a1a:	6002      	str	r2, [r0, #0]
 8008a1c:	e7f9      	b.n	8008a12 <_calloc_r+0x12>
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4621      	mov	r1, r4
 8008a22:	f7fe f941 	bl	8006ca8 <memset>
 8008a26:	e7f4      	b.n	8008a12 <_calloc_r+0x12>

08008a28 <_free_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	2900      	cmp	r1, #0
 8008a2e:	d040      	beq.n	8008ab2 <_free_r+0x8a>
 8008a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a34:	1f0c      	subs	r4, r1, #4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	bfb8      	it	lt
 8008a3a:	18e4      	addlt	r4, r4, r3
 8008a3c:	f000 fa98 	bl	8008f70 <__malloc_lock>
 8008a40:	4a1c      	ldr	r2, [pc, #112]	; (8008ab4 <_free_r+0x8c>)
 8008a42:	6813      	ldr	r3, [r2, #0]
 8008a44:	b933      	cbnz	r3, 8008a54 <_free_r+0x2c>
 8008a46:	6063      	str	r3, [r4, #4]
 8008a48:	6014      	str	r4, [r2, #0]
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a50:	f000 ba94 	b.w	8008f7c <__malloc_unlock>
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d908      	bls.n	8008a6a <_free_r+0x42>
 8008a58:	6820      	ldr	r0, [r4, #0]
 8008a5a:	1821      	adds	r1, r4, r0
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	bf01      	itttt	eq
 8008a60:	6819      	ldreq	r1, [r3, #0]
 8008a62:	685b      	ldreq	r3, [r3, #4]
 8008a64:	1809      	addeq	r1, r1, r0
 8008a66:	6021      	streq	r1, [r4, #0]
 8008a68:	e7ed      	b.n	8008a46 <_free_r+0x1e>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	b10b      	cbz	r3, 8008a74 <_free_r+0x4c>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d9fa      	bls.n	8008a6a <_free_r+0x42>
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	1850      	adds	r0, r2, r1
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d10b      	bne.n	8008a94 <_free_r+0x6c>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	4401      	add	r1, r0
 8008a80:	1850      	adds	r0, r2, r1
 8008a82:	4283      	cmp	r3, r0
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	d1e0      	bne.n	8008a4a <_free_r+0x22>
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4401      	add	r1, r0
 8008a8e:	6011      	str	r1, [r2, #0]
 8008a90:	6053      	str	r3, [r2, #4]
 8008a92:	e7da      	b.n	8008a4a <_free_r+0x22>
 8008a94:	d902      	bls.n	8008a9c <_free_r+0x74>
 8008a96:	230c      	movs	r3, #12
 8008a98:	602b      	str	r3, [r5, #0]
 8008a9a:	e7d6      	b.n	8008a4a <_free_r+0x22>
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	1821      	adds	r1, r4, r0
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf01      	itttt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	1809      	addeq	r1, r1, r0
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	6054      	str	r4, [r2, #4]
 8008ab0:	e7cb      	b.n	8008a4a <_free_r+0x22>
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	20000330 	.word	0x20000330

08008ab8 <sbrk_aligned>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	4e0e      	ldr	r6, [pc, #56]	; (8008af4 <sbrk_aligned+0x3c>)
 8008abc:	460c      	mov	r4, r1
 8008abe:	6831      	ldr	r1, [r6, #0]
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	b911      	cbnz	r1, 8008aca <sbrk_aligned+0x12>
 8008ac4:	f000 f9e8 	bl	8008e98 <_sbrk_r>
 8008ac8:	6030      	str	r0, [r6, #0]
 8008aca:	4621      	mov	r1, r4
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 f9e3 	bl	8008e98 <_sbrk_r>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	d00a      	beq.n	8008aec <sbrk_aligned+0x34>
 8008ad6:	1cc4      	adds	r4, r0, #3
 8008ad8:	f024 0403 	bic.w	r4, r4, #3
 8008adc:	42a0      	cmp	r0, r4
 8008ade:	d007      	beq.n	8008af0 <sbrk_aligned+0x38>
 8008ae0:	1a21      	subs	r1, r4, r0
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 f9d8 	bl	8008e98 <_sbrk_r>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d101      	bne.n	8008af0 <sbrk_aligned+0x38>
 8008aec:	f04f 34ff 	mov.w	r4, #4294967295
 8008af0:	4620      	mov	r0, r4
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	20000334 	.word	0x20000334

08008af8 <_malloc_r>:
 8008af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afc:	1ccd      	adds	r5, r1, #3
 8008afe:	f025 0503 	bic.w	r5, r5, #3
 8008b02:	3508      	adds	r5, #8
 8008b04:	2d0c      	cmp	r5, #12
 8008b06:	bf38      	it	cc
 8008b08:	250c      	movcc	r5, #12
 8008b0a:	2d00      	cmp	r5, #0
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	db01      	blt.n	8008b14 <_malloc_r+0x1c>
 8008b10:	42a9      	cmp	r1, r5
 8008b12:	d905      	bls.n	8008b20 <_malloc_r+0x28>
 8008b14:	230c      	movs	r3, #12
 8008b16:	2600      	movs	r6, #0
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b20:	4e2e      	ldr	r6, [pc, #184]	; (8008bdc <_malloc_r+0xe4>)
 8008b22:	f000 fa25 	bl	8008f70 <__malloc_lock>
 8008b26:	6833      	ldr	r3, [r6, #0]
 8008b28:	461c      	mov	r4, r3
 8008b2a:	bb34      	cbnz	r4, 8008b7a <_malloc_r+0x82>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7ff ffc2 	bl	8008ab8 <sbrk_aligned>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	4604      	mov	r4, r0
 8008b38:	d14d      	bne.n	8008bd6 <_malloc_r+0xde>
 8008b3a:	6834      	ldr	r4, [r6, #0]
 8008b3c:	4626      	mov	r6, r4
 8008b3e:	2e00      	cmp	r6, #0
 8008b40:	d140      	bne.n	8008bc4 <_malloc_r+0xcc>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	4631      	mov	r1, r6
 8008b46:	4638      	mov	r0, r7
 8008b48:	eb04 0803 	add.w	r8, r4, r3
 8008b4c:	f000 f9a4 	bl	8008e98 <_sbrk_r>
 8008b50:	4580      	cmp	r8, r0
 8008b52:	d13a      	bne.n	8008bca <_malloc_r+0xd2>
 8008b54:	6821      	ldr	r1, [r4, #0]
 8008b56:	3503      	adds	r5, #3
 8008b58:	1a6d      	subs	r5, r5, r1
 8008b5a:	f025 0503 	bic.w	r5, r5, #3
 8008b5e:	3508      	adds	r5, #8
 8008b60:	2d0c      	cmp	r5, #12
 8008b62:	bf38      	it	cc
 8008b64:	250c      	movcc	r5, #12
 8008b66:	4638      	mov	r0, r7
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7ff ffa5 	bl	8008ab8 <sbrk_aligned>
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d02b      	beq.n	8008bca <_malloc_r+0xd2>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	442b      	add	r3, r5
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	e00e      	b.n	8008b98 <_malloc_r+0xa0>
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	1b52      	subs	r2, r2, r5
 8008b7e:	d41e      	bmi.n	8008bbe <_malloc_r+0xc6>
 8008b80:	2a0b      	cmp	r2, #11
 8008b82:	d916      	bls.n	8008bb2 <_malloc_r+0xba>
 8008b84:	1961      	adds	r1, r4, r5
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	6025      	str	r5, [r4, #0]
 8008b8a:	bf18      	it	ne
 8008b8c:	6059      	strne	r1, [r3, #4]
 8008b8e:	6863      	ldr	r3, [r4, #4]
 8008b90:	bf08      	it	eq
 8008b92:	6031      	streq	r1, [r6, #0]
 8008b94:	5162      	str	r2, [r4, r5]
 8008b96:	604b      	str	r3, [r1, #4]
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f104 060b 	add.w	r6, r4, #11
 8008b9e:	f000 f9ed 	bl	8008f7c <__malloc_unlock>
 8008ba2:	f026 0607 	bic.w	r6, r6, #7
 8008ba6:	1d23      	adds	r3, r4, #4
 8008ba8:	1af2      	subs	r2, r6, r3
 8008baa:	d0b6      	beq.n	8008b1a <_malloc_r+0x22>
 8008bac:	1b9b      	subs	r3, r3, r6
 8008bae:	50a3      	str	r3, [r4, r2]
 8008bb0:	e7b3      	b.n	8008b1a <_malloc_r+0x22>
 8008bb2:	6862      	ldr	r2, [r4, #4]
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	bf0c      	ite	eq
 8008bb8:	6032      	streq	r2, [r6, #0]
 8008bba:	605a      	strne	r2, [r3, #4]
 8008bbc:	e7ec      	b.n	8008b98 <_malloc_r+0xa0>
 8008bbe:	4623      	mov	r3, r4
 8008bc0:	6864      	ldr	r4, [r4, #4]
 8008bc2:	e7b2      	b.n	8008b2a <_malloc_r+0x32>
 8008bc4:	4634      	mov	r4, r6
 8008bc6:	6876      	ldr	r6, [r6, #4]
 8008bc8:	e7b9      	b.n	8008b3e <_malloc_r+0x46>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	4638      	mov	r0, r7
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	f000 f9d4 	bl	8008f7c <__malloc_unlock>
 8008bd4:	e7a1      	b.n	8008b1a <_malloc_r+0x22>
 8008bd6:	6025      	str	r5, [r4, #0]
 8008bd8:	e7de      	b.n	8008b98 <_malloc_r+0xa0>
 8008bda:	bf00      	nop
 8008bdc:	20000330 	.word	0x20000330

08008be0 <__ssputs_r>:
 8008be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be4:	688e      	ldr	r6, [r1, #8]
 8008be6:	4682      	mov	sl, r0
 8008be8:	429e      	cmp	r6, r3
 8008bea:	460c      	mov	r4, r1
 8008bec:	4690      	mov	r8, r2
 8008bee:	461f      	mov	r7, r3
 8008bf0:	d838      	bhi.n	8008c64 <__ssputs_r+0x84>
 8008bf2:	898a      	ldrh	r2, [r1, #12]
 8008bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bf8:	d032      	beq.n	8008c60 <__ssputs_r+0x80>
 8008bfa:	6825      	ldr	r5, [r4, #0]
 8008bfc:	6909      	ldr	r1, [r1, #16]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	eba5 0901 	sub.w	r9, r5, r1
 8008c04:	6965      	ldr	r5, [r4, #20]
 8008c06:	444b      	add	r3, r9
 8008c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c10:	106d      	asrs	r5, r5, #1
 8008c12:	429d      	cmp	r5, r3
 8008c14:	bf38      	it	cc
 8008c16:	461d      	movcc	r5, r3
 8008c18:	0553      	lsls	r3, r2, #21
 8008c1a:	d531      	bpl.n	8008c80 <__ssputs_r+0xa0>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7ff ff6b 	bl	8008af8 <_malloc_r>
 8008c22:	4606      	mov	r6, r0
 8008c24:	b950      	cbnz	r0, 8008c3c <__ssputs_r+0x5c>
 8008c26:	230c      	movs	r3, #12
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	f8ca 3000 	str.w	r3, [sl]
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c36:	81a3      	strh	r3, [r4, #12]
 8008c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3c:	464a      	mov	r2, r9
 8008c3e:	6921      	ldr	r1, [r4, #16]
 8008c40:	f7ff fb4e 	bl	80082e0 <memcpy>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	6126      	str	r6, [r4, #16]
 8008c52:	444e      	add	r6, r9
 8008c54:	6026      	str	r6, [r4, #0]
 8008c56:	463e      	mov	r6, r7
 8008c58:	6165      	str	r5, [r4, #20]
 8008c5a:	eba5 0509 	sub.w	r5, r5, r9
 8008c5e:	60a5      	str	r5, [r4, #8]
 8008c60:	42be      	cmp	r6, r7
 8008c62:	d900      	bls.n	8008c66 <__ssputs_r+0x86>
 8008c64:	463e      	mov	r6, r7
 8008c66:	4632      	mov	r2, r6
 8008c68:	4641      	mov	r1, r8
 8008c6a:	6820      	ldr	r0, [r4, #0]
 8008c6c:	f000 f966 	bl	8008f3c <memmove>
 8008c70:	68a3      	ldr	r3, [r4, #8]
 8008c72:	2000      	movs	r0, #0
 8008c74:	1b9b      	subs	r3, r3, r6
 8008c76:	60a3      	str	r3, [r4, #8]
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	4433      	add	r3, r6
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	e7db      	b.n	8008c38 <__ssputs_r+0x58>
 8008c80:	462a      	mov	r2, r5
 8008c82:	f000 f981 	bl	8008f88 <_realloc_r>
 8008c86:	4606      	mov	r6, r0
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d1e1      	bne.n	8008c50 <__ssputs_r+0x70>
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	6921      	ldr	r1, [r4, #16]
 8008c90:	f7ff feca 	bl	8008a28 <_free_r>
 8008c94:	e7c7      	b.n	8008c26 <__ssputs_r+0x46>
	...

08008c98 <_svfiprintf_r>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	4698      	mov	r8, r3
 8008c9e:	898b      	ldrh	r3, [r1, #12]
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	061b      	lsls	r3, r3, #24
 8008ca4:	460d      	mov	r5, r1
 8008ca6:	4614      	mov	r4, r2
 8008ca8:	b09d      	sub	sp, #116	; 0x74
 8008caa:	d50e      	bpl.n	8008cca <_svfiprintf_r+0x32>
 8008cac:	690b      	ldr	r3, [r1, #16]
 8008cae:	b963      	cbnz	r3, 8008cca <_svfiprintf_r+0x32>
 8008cb0:	2140      	movs	r1, #64	; 0x40
 8008cb2:	f7ff ff21 	bl	8008af8 <_malloc_r>
 8008cb6:	6028      	str	r0, [r5, #0]
 8008cb8:	6128      	str	r0, [r5, #16]
 8008cba:	b920      	cbnz	r0, 8008cc6 <_svfiprintf_r+0x2e>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	e0d1      	b.n	8008e6a <_svfiprintf_r+0x1d2>
 8008cc6:	2340      	movs	r3, #64	; 0x40
 8008cc8:	616b      	str	r3, [r5, #20]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cce:	2320      	movs	r3, #32
 8008cd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cd4:	2330      	movs	r3, #48	; 0x30
 8008cd6:	f04f 0901 	mov.w	r9, #1
 8008cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e84 <_svfiprintf_r+0x1ec>
 8008ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	469a      	mov	sl, r3
 8008cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cee:	b10a      	cbz	r2, 8008cf4 <_svfiprintf_r+0x5c>
 8008cf0:	2a25      	cmp	r2, #37	; 0x25
 8008cf2:	d1f9      	bne.n	8008ce8 <_svfiprintf_r+0x50>
 8008cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf8:	d00b      	beq.n	8008d12 <_svfiprintf_r+0x7a>
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7ff ff6d 	bl	8008be0 <__ssputs_r>
 8008d06:	3001      	adds	r0, #1
 8008d08:	f000 80aa 	beq.w	8008e60 <_svfiprintf_r+0x1c8>
 8008d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d0e:	445a      	add	r2, fp
 8008d10:	9209      	str	r2, [sp, #36]	; 0x24
 8008d12:	f89a 3000 	ldrb.w	r3, [sl]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 80a2 	beq.w	8008e60 <_svfiprintf_r+0x1c8>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d26:	f10a 0a01 	add.w	sl, sl, #1
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	9307      	str	r3, [sp, #28]
 8008d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d32:	931a      	str	r3, [sp, #104]	; 0x68
 8008d34:	4654      	mov	r4, sl
 8008d36:	2205      	movs	r2, #5
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	4851      	ldr	r0, [pc, #324]	; (8008e84 <_svfiprintf_r+0x1ec>)
 8008d3e:	f7ff fac1 	bl	80082c4 <memchr>
 8008d42:	9a04      	ldr	r2, [sp, #16]
 8008d44:	b9d8      	cbnz	r0, 8008d7e <_svfiprintf_r+0xe6>
 8008d46:	06d0      	lsls	r0, r2, #27
 8008d48:	bf44      	itt	mi
 8008d4a:	2320      	movmi	r3, #32
 8008d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d50:	0711      	lsls	r1, r2, #28
 8008d52:	bf44      	itt	mi
 8008d54:	232b      	movmi	r3, #43	; 0x2b
 8008d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d60:	d015      	beq.n	8008d8e <_svfiprintf_r+0xf6>
 8008d62:	4654      	mov	r4, sl
 8008d64:	2000      	movs	r0, #0
 8008d66:	f04f 0c0a 	mov.w	ip, #10
 8008d6a:	9a07      	ldr	r2, [sp, #28]
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d72:	3b30      	subs	r3, #48	; 0x30
 8008d74:	2b09      	cmp	r3, #9
 8008d76:	d94e      	bls.n	8008e16 <_svfiprintf_r+0x17e>
 8008d78:	b1b0      	cbz	r0, 8008da8 <_svfiprintf_r+0x110>
 8008d7a:	9207      	str	r2, [sp, #28]
 8008d7c:	e014      	b.n	8008da8 <_svfiprintf_r+0x110>
 8008d7e:	eba0 0308 	sub.w	r3, r0, r8
 8008d82:	fa09 f303 	lsl.w	r3, r9, r3
 8008d86:	4313      	orrs	r3, r2
 8008d88:	46a2      	mov	sl, r4
 8008d8a:	9304      	str	r3, [sp, #16]
 8008d8c:	e7d2      	b.n	8008d34 <_svfiprintf_r+0x9c>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	1d19      	adds	r1, r3, #4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	9103      	str	r1, [sp, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfbb      	ittet	lt
 8008d9a:	425b      	neglt	r3, r3
 8008d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008da0:	9307      	strge	r3, [sp, #28]
 8008da2:	9307      	strlt	r3, [sp, #28]
 8008da4:	bfb8      	it	lt
 8008da6:	9204      	strlt	r2, [sp, #16]
 8008da8:	7823      	ldrb	r3, [r4, #0]
 8008daa:	2b2e      	cmp	r3, #46	; 0x2e
 8008dac:	d10c      	bne.n	8008dc8 <_svfiprintf_r+0x130>
 8008dae:	7863      	ldrb	r3, [r4, #1]
 8008db0:	2b2a      	cmp	r3, #42	; 0x2a
 8008db2:	d135      	bne.n	8008e20 <_svfiprintf_r+0x188>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	3402      	adds	r4, #2
 8008db8:	1d1a      	adds	r2, r3, #4
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	9203      	str	r2, [sp, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bfb8      	it	lt
 8008dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dc6:	9305      	str	r3, [sp, #20]
 8008dc8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008e88 <_svfiprintf_r+0x1f0>
 8008dcc:	2203      	movs	r2, #3
 8008dce:	4650      	mov	r0, sl
 8008dd0:	7821      	ldrb	r1, [r4, #0]
 8008dd2:	f7ff fa77 	bl	80082c4 <memchr>
 8008dd6:	b140      	cbz	r0, 8008dea <_svfiprintf_r+0x152>
 8008dd8:	2340      	movs	r3, #64	; 0x40
 8008dda:	eba0 000a 	sub.w	r0, r0, sl
 8008dde:	fa03 f000 	lsl.w	r0, r3, r0
 8008de2:	9b04      	ldr	r3, [sp, #16]
 8008de4:	3401      	adds	r4, #1
 8008de6:	4303      	orrs	r3, r0
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dee:	2206      	movs	r2, #6
 8008df0:	4826      	ldr	r0, [pc, #152]	; (8008e8c <_svfiprintf_r+0x1f4>)
 8008df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008df6:	f7ff fa65 	bl	80082c4 <memchr>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d038      	beq.n	8008e70 <_svfiprintf_r+0x1d8>
 8008dfe:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <_svfiprintf_r+0x1f8>)
 8008e00:	bb1b      	cbnz	r3, 8008e4a <_svfiprintf_r+0x1b2>
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	3307      	adds	r3, #7
 8008e06:	f023 0307 	bic.w	r3, r3, #7
 8008e0a:	3308      	adds	r3, #8
 8008e0c:	9303      	str	r3, [sp, #12]
 8008e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e10:	4433      	add	r3, r6
 8008e12:	9309      	str	r3, [sp, #36]	; 0x24
 8008e14:	e767      	b.n	8008ce6 <_svfiprintf_r+0x4e>
 8008e16:	460c      	mov	r4, r1
 8008e18:	2001      	movs	r0, #1
 8008e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e1e:	e7a5      	b.n	8008d6c <_svfiprintf_r+0xd4>
 8008e20:	2300      	movs	r3, #0
 8008e22:	f04f 0c0a 	mov.w	ip, #10
 8008e26:	4619      	mov	r1, r3
 8008e28:	3401      	adds	r4, #1
 8008e2a:	9305      	str	r3, [sp, #20]
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e32:	3a30      	subs	r2, #48	; 0x30
 8008e34:	2a09      	cmp	r2, #9
 8008e36:	d903      	bls.n	8008e40 <_svfiprintf_r+0x1a8>
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0c5      	beq.n	8008dc8 <_svfiprintf_r+0x130>
 8008e3c:	9105      	str	r1, [sp, #20]
 8008e3e:	e7c3      	b.n	8008dc8 <_svfiprintf_r+0x130>
 8008e40:	4604      	mov	r4, r0
 8008e42:	2301      	movs	r3, #1
 8008e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e48:	e7f0      	b.n	8008e2c <_svfiprintf_r+0x194>
 8008e4a:	ab03      	add	r3, sp, #12
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	462a      	mov	r2, r5
 8008e50:	4638      	mov	r0, r7
 8008e52:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <_svfiprintf_r+0x1fc>)
 8008e54:	a904      	add	r1, sp, #16
 8008e56:	f7fd ffcd 	bl	8006df4 <_printf_float>
 8008e5a:	1c42      	adds	r2, r0, #1
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	d1d6      	bne.n	8008e0e <_svfiprintf_r+0x176>
 8008e60:	89ab      	ldrh	r3, [r5, #12]
 8008e62:	065b      	lsls	r3, r3, #25
 8008e64:	f53f af2c 	bmi.w	8008cc0 <_svfiprintf_r+0x28>
 8008e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e6a:	b01d      	add	sp, #116	; 0x74
 8008e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e70:	ab03      	add	r3, sp, #12
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	462a      	mov	r2, r5
 8008e76:	4638      	mov	r0, r7
 8008e78:	4b06      	ldr	r3, [pc, #24]	; (8008e94 <_svfiprintf_r+0x1fc>)
 8008e7a:	a904      	add	r1, sp, #16
 8008e7c:	f7fe fa56 	bl	800732c <_printf_i>
 8008e80:	e7eb      	b.n	8008e5a <_svfiprintf_r+0x1c2>
 8008e82:	bf00      	nop
 8008e84:	08009f64 	.word	0x08009f64
 8008e88:	08009f6a 	.word	0x08009f6a
 8008e8c:	08009f6e 	.word	0x08009f6e
 8008e90:	08006df5 	.word	0x08006df5
 8008e94:	08008be1 	.word	0x08008be1

08008e98 <_sbrk_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4d05      	ldr	r5, [pc, #20]	; (8008eb4 <_sbrk_r+0x1c>)
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	602b      	str	r3, [r5, #0]
 8008ea4:	f7f9 fe22 	bl	8002aec <_sbrk>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d102      	bne.n	8008eb2 <_sbrk_r+0x1a>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	b103      	cbz	r3, 8008eb2 <_sbrk_r+0x1a>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	20000338 	.word	0x20000338

08008eb8 <__assert_func>:
 8008eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eba:	4614      	mov	r4, r2
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <__assert_func+0x2c>)
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68d8      	ldr	r0, [r3, #12]
 8008ec6:	b14c      	cbz	r4, 8008edc <__assert_func+0x24>
 8008ec8:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <__assert_func+0x30>)
 8008eca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ece:	9100      	str	r1, [sp, #0]
 8008ed0:	462b      	mov	r3, r5
 8008ed2:	4906      	ldr	r1, [pc, #24]	; (8008eec <__assert_func+0x34>)
 8008ed4:	f000 f80e 	bl	8008ef4 <fiprintf>
 8008ed8:	f000 faaa 	bl	8009430 <abort>
 8008edc:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <__assert_func+0x38>)
 8008ede:	461c      	mov	r4, r3
 8008ee0:	e7f3      	b.n	8008eca <__assert_func+0x12>
 8008ee2:	bf00      	nop
 8008ee4:	20000014 	.word	0x20000014
 8008ee8:	08009f75 	.word	0x08009f75
 8008eec:	08009f82 	.word	0x08009f82
 8008ef0:	08009fb0 	.word	0x08009fb0

08008ef4 <fiprintf>:
 8008ef4:	b40e      	push	{r1, r2, r3}
 8008ef6:	b503      	push	{r0, r1, lr}
 8008ef8:	4601      	mov	r1, r0
 8008efa:	ab03      	add	r3, sp, #12
 8008efc:	4805      	ldr	r0, [pc, #20]	; (8008f14 <fiprintf+0x20>)
 8008efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f02:	6800      	ldr	r0, [r0, #0]
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	f000 f895 	bl	8009034 <_vfiprintf_r>
 8008f0a:	b002      	add	sp, #8
 8008f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f10:	b003      	add	sp, #12
 8008f12:	4770      	bx	lr
 8008f14:	20000014 	.word	0x20000014

08008f18 <__ascii_mbtowc>:
 8008f18:	b082      	sub	sp, #8
 8008f1a:	b901      	cbnz	r1, 8008f1e <__ascii_mbtowc+0x6>
 8008f1c:	a901      	add	r1, sp, #4
 8008f1e:	b142      	cbz	r2, 8008f32 <__ascii_mbtowc+0x1a>
 8008f20:	b14b      	cbz	r3, 8008f36 <__ascii_mbtowc+0x1e>
 8008f22:	7813      	ldrb	r3, [r2, #0]
 8008f24:	600b      	str	r3, [r1, #0]
 8008f26:	7812      	ldrb	r2, [r2, #0]
 8008f28:	1e10      	subs	r0, r2, #0
 8008f2a:	bf18      	it	ne
 8008f2c:	2001      	movne	r0, #1
 8008f2e:	b002      	add	sp, #8
 8008f30:	4770      	bx	lr
 8008f32:	4610      	mov	r0, r2
 8008f34:	e7fb      	b.n	8008f2e <__ascii_mbtowc+0x16>
 8008f36:	f06f 0001 	mvn.w	r0, #1
 8008f3a:	e7f8      	b.n	8008f2e <__ascii_mbtowc+0x16>

08008f3c <memmove>:
 8008f3c:	4288      	cmp	r0, r1
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	eb01 0402 	add.w	r4, r1, r2
 8008f44:	d902      	bls.n	8008f4c <memmove+0x10>
 8008f46:	4284      	cmp	r4, r0
 8008f48:	4623      	mov	r3, r4
 8008f4a:	d807      	bhi.n	8008f5c <memmove+0x20>
 8008f4c:	1e43      	subs	r3, r0, #1
 8008f4e:	42a1      	cmp	r1, r4
 8008f50:	d008      	beq.n	8008f64 <memmove+0x28>
 8008f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f5a:	e7f8      	b.n	8008f4e <memmove+0x12>
 8008f5c:	4601      	mov	r1, r0
 8008f5e:	4402      	add	r2, r0
 8008f60:	428a      	cmp	r2, r1
 8008f62:	d100      	bne.n	8008f66 <memmove+0x2a>
 8008f64:	bd10      	pop	{r4, pc}
 8008f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f6e:	e7f7      	b.n	8008f60 <memmove+0x24>

08008f70 <__malloc_lock>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__malloc_lock+0x8>)
 8008f72:	f000 bc19 	b.w	80097a8 <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	2000033c 	.word	0x2000033c

08008f7c <__malloc_unlock>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__malloc_unlock+0x8>)
 8008f7e:	f000 bc14 	b.w	80097aa <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	2000033c 	.word	0x2000033c

08008f88 <_realloc_r>:
 8008f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8c:	4680      	mov	r8, r0
 8008f8e:	4614      	mov	r4, r2
 8008f90:	460e      	mov	r6, r1
 8008f92:	b921      	cbnz	r1, 8008f9e <_realloc_r+0x16>
 8008f94:	4611      	mov	r1, r2
 8008f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9a:	f7ff bdad 	b.w	8008af8 <_malloc_r>
 8008f9e:	b92a      	cbnz	r2, 8008fac <_realloc_r+0x24>
 8008fa0:	f7ff fd42 	bl	8008a28 <_free_r>
 8008fa4:	4625      	mov	r5, r4
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fac:	f000 fc64 	bl	8009878 <_malloc_usable_size_r>
 8008fb0:	4284      	cmp	r4, r0
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	d802      	bhi.n	8008fbc <_realloc_r+0x34>
 8008fb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fba:	d812      	bhi.n	8008fe2 <_realloc_r+0x5a>
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	f7ff fd9a 	bl	8008af8 <_malloc_r>
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d0ed      	beq.n	8008fa6 <_realloc_r+0x1e>
 8008fca:	42bc      	cmp	r4, r7
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4631      	mov	r1, r6
 8008fd0:	bf28      	it	cs
 8008fd2:	463a      	movcs	r2, r7
 8008fd4:	f7ff f984 	bl	80082e0 <memcpy>
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7ff fd24 	bl	8008a28 <_free_r>
 8008fe0:	e7e1      	b.n	8008fa6 <_realloc_r+0x1e>
 8008fe2:	4635      	mov	r5, r6
 8008fe4:	e7df      	b.n	8008fa6 <_realloc_r+0x1e>

08008fe6 <__sfputc_r>:
 8008fe6:	6893      	ldr	r3, [r2, #8]
 8008fe8:	b410      	push	{r4}
 8008fea:	3b01      	subs	r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	6093      	str	r3, [r2, #8]
 8008ff0:	da07      	bge.n	8009002 <__sfputc_r+0x1c>
 8008ff2:	6994      	ldr	r4, [r2, #24]
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	db01      	blt.n	8008ffc <__sfputc_r+0x16>
 8008ff8:	290a      	cmp	r1, #10
 8008ffa:	d102      	bne.n	8009002 <__sfputc_r+0x1c>
 8008ffc:	bc10      	pop	{r4}
 8008ffe:	f000 b949 	b.w	8009294 <__swbuf_r>
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	1c58      	adds	r0, r3, #1
 8009006:	6010      	str	r0, [r2, #0]
 8009008:	7019      	strb	r1, [r3, #0]
 800900a:	4608      	mov	r0, r1
 800900c:	bc10      	pop	{r4}
 800900e:	4770      	bx	lr

08009010 <__sfputs_r>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	4606      	mov	r6, r0
 8009014:	460f      	mov	r7, r1
 8009016:	4614      	mov	r4, r2
 8009018:	18d5      	adds	r5, r2, r3
 800901a:	42ac      	cmp	r4, r5
 800901c:	d101      	bne.n	8009022 <__sfputs_r+0x12>
 800901e:	2000      	movs	r0, #0
 8009020:	e007      	b.n	8009032 <__sfputs_r+0x22>
 8009022:	463a      	mov	r2, r7
 8009024:	4630      	mov	r0, r6
 8009026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902a:	f7ff ffdc 	bl	8008fe6 <__sfputc_r>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	d1f3      	bne.n	800901a <__sfputs_r+0xa>
 8009032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009034 <_vfiprintf_r>:
 8009034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	460d      	mov	r5, r1
 800903a:	4614      	mov	r4, r2
 800903c:	4698      	mov	r8, r3
 800903e:	4606      	mov	r6, r0
 8009040:	b09d      	sub	sp, #116	; 0x74
 8009042:	b118      	cbz	r0, 800904c <_vfiprintf_r+0x18>
 8009044:	6983      	ldr	r3, [r0, #24]
 8009046:	b90b      	cbnz	r3, 800904c <_vfiprintf_r+0x18>
 8009048:	f000 fb10 	bl	800966c <__sinit>
 800904c:	4b89      	ldr	r3, [pc, #548]	; (8009274 <_vfiprintf_r+0x240>)
 800904e:	429d      	cmp	r5, r3
 8009050:	d11b      	bne.n	800908a <_vfiprintf_r+0x56>
 8009052:	6875      	ldr	r5, [r6, #4]
 8009054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009056:	07d9      	lsls	r1, r3, #31
 8009058:	d405      	bmi.n	8009066 <_vfiprintf_r+0x32>
 800905a:	89ab      	ldrh	r3, [r5, #12]
 800905c:	059a      	lsls	r2, r3, #22
 800905e:	d402      	bmi.n	8009066 <_vfiprintf_r+0x32>
 8009060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009062:	f000 fba1 	bl	80097a8 <__retarget_lock_acquire_recursive>
 8009066:	89ab      	ldrh	r3, [r5, #12]
 8009068:	071b      	lsls	r3, r3, #28
 800906a:	d501      	bpl.n	8009070 <_vfiprintf_r+0x3c>
 800906c:	692b      	ldr	r3, [r5, #16]
 800906e:	b9eb      	cbnz	r3, 80090ac <_vfiprintf_r+0x78>
 8009070:	4629      	mov	r1, r5
 8009072:	4630      	mov	r0, r6
 8009074:	f000 f96e 	bl	8009354 <__swsetup_r>
 8009078:	b1c0      	cbz	r0, 80090ac <_vfiprintf_r+0x78>
 800907a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800907c:	07dc      	lsls	r4, r3, #31
 800907e:	d50e      	bpl.n	800909e <_vfiprintf_r+0x6a>
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	b01d      	add	sp, #116	; 0x74
 8009086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908a:	4b7b      	ldr	r3, [pc, #492]	; (8009278 <_vfiprintf_r+0x244>)
 800908c:	429d      	cmp	r5, r3
 800908e:	d101      	bne.n	8009094 <_vfiprintf_r+0x60>
 8009090:	68b5      	ldr	r5, [r6, #8]
 8009092:	e7df      	b.n	8009054 <_vfiprintf_r+0x20>
 8009094:	4b79      	ldr	r3, [pc, #484]	; (800927c <_vfiprintf_r+0x248>)
 8009096:	429d      	cmp	r5, r3
 8009098:	bf08      	it	eq
 800909a:	68f5      	ldreq	r5, [r6, #12]
 800909c:	e7da      	b.n	8009054 <_vfiprintf_r+0x20>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	0598      	lsls	r0, r3, #22
 80090a2:	d4ed      	bmi.n	8009080 <_vfiprintf_r+0x4c>
 80090a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090a6:	f000 fb80 	bl	80097aa <__retarget_lock_release_recursive>
 80090aa:	e7e9      	b.n	8009080 <_vfiprintf_r+0x4c>
 80090ac:	2300      	movs	r3, #0
 80090ae:	9309      	str	r3, [sp, #36]	; 0x24
 80090b0:	2320      	movs	r3, #32
 80090b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090b6:	2330      	movs	r3, #48	; 0x30
 80090b8:	f04f 0901 	mov.w	r9, #1
 80090bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009280 <_vfiprintf_r+0x24c>
 80090c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090c8:	4623      	mov	r3, r4
 80090ca:	469a      	mov	sl, r3
 80090cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d0:	b10a      	cbz	r2, 80090d6 <_vfiprintf_r+0xa2>
 80090d2:	2a25      	cmp	r2, #37	; 0x25
 80090d4:	d1f9      	bne.n	80090ca <_vfiprintf_r+0x96>
 80090d6:	ebba 0b04 	subs.w	fp, sl, r4
 80090da:	d00b      	beq.n	80090f4 <_vfiprintf_r+0xc0>
 80090dc:	465b      	mov	r3, fp
 80090de:	4622      	mov	r2, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff ff94 	bl	8009010 <__sfputs_r>
 80090e8:	3001      	adds	r0, #1
 80090ea:	f000 80aa 	beq.w	8009242 <_vfiprintf_r+0x20e>
 80090ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f0:	445a      	add	r2, fp
 80090f2:	9209      	str	r2, [sp, #36]	; 0x24
 80090f4:	f89a 3000 	ldrb.w	r3, [sl]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 80a2 	beq.w	8009242 <_vfiprintf_r+0x20e>
 80090fe:	2300      	movs	r3, #0
 8009100:	f04f 32ff 	mov.w	r2, #4294967295
 8009104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009108:	f10a 0a01 	add.w	sl, sl, #1
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009114:	931a      	str	r3, [sp, #104]	; 0x68
 8009116:	4654      	mov	r4, sl
 8009118:	2205      	movs	r2, #5
 800911a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911e:	4858      	ldr	r0, [pc, #352]	; (8009280 <_vfiprintf_r+0x24c>)
 8009120:	f7ff f8d0 	bl	80082c4 <memchr>
 8009124:	9a04      	ldr	r2, [sp, #16]
 8009126:	b9d8      	cbnz	r0, 8009160 <_vfiprintf_r+0x12c>
 8009128:	06d1      	lsls	r1, r2, #27
 800912a:	bf44      	itt	mi
 800912c:	2320      	movmi	r3, #32
 800912e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009132:	0713      	lsls	r3, r2, #28
 8009134:	bf44      	itt	mi
 8009136:	232b      	movmi	r3, #43	; 0x2b
 8009138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800913c:	f89a 3000 	ldrb.w	r3, [sl]
 8009140:	2b2a      	cmp	r3, #42	; 0x2a
 8009142:	d015      	beq.n	8009170 <_vfiprintf_r+0x13c>
 8009144:	4654      	mov	r4, sl
 8009146:	2000      	movs	r0, #0
 8009148:	f04f 0c0a 	mov.w	ip, #10
 800914c:	9a07      	ldr	r2, [sp, #28]
 800914e:	4621      	mov	r1, r4
 8009150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009154:	3b30      	subs	r3, #48	; 0x30
 8009156:	2b09      	cmp	r3, #9
 8009158:	d94e      	bls.n	80091f8 <_vfiprintf_r+0x1c4>
 800915a:	b1b0      	cbz	r0, 800918a <_vfiprintf_r+0x156>
 800915c:	9207      	str	r2, [sp, #28]
 800915e:	e014      	b.n	800918a <_vfiprintf_r+0x156>
 8009160:	eba0 0308 	sub.w	r3, r0, r8
 8009164:	fa09 f303 	lsl.w	r3, r9, r3
 8009168:	4313      	orrs	r3, r2
 800916a:	46a2      	mov	sl, r4
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	e7d2      	b.n	8009116 <_vfiprintf_r+0xe2>
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	1d19      	adds	r1, r3, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	9103      	str	r1, [sp, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfbb      	ittet	lt
 800917c:	425b      	neglt	r3, r3
 800917e:	f042 0202 	orrlt.w	r2, r2, #2
 8009182:	9307      	strge	r3, [sp, #28]
 8009184:	9307      	strlt	r3, [sp, #28]
 8009186:	bfb8      	it	lt
 8009188:	9204      	strlt	r2, [sp, #16]
 800918a:	7823      	ldrb	r3, [r4, #0]
 800918c:	2b2e      	cmp	r3, #46	; 0x2e
 800918e:	d10c      	bne.n	80091aa <_vfiprintf_r+0x176>
 8009190:	7863      	ldrb	r3, [r4, #1]
 8009192:	2b2a      	cmp	r3, #42	; 0x2a
 8009194:	d135      	bne.n	8009202 <_vfiprintf_r+0x1ce>
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	3402      	adds	r4, #2
 800919a:	1d1a      	adds	r2, r3, #4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	9203      	str	r2, [sp, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	bfb8      	it	lt
 80091a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80091a8:	9305      	str	r3, [sp, #20]
 80091aa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009284 <_vfiprintf_r+0x250>
 80091ae:	2203      	movs	r2, #3
 80091b0:	4650      	mov	r0, sl
 80091b2:	7821      	ldrb	r1, [r4, #0]
 80091b4:	f7ff f886 	bl	80082c4 <memchr>
 80091b8:	b140      	cbz	r0, 80091cc <_vfiprintf_r+0x198>
 80091ba:	2340      	movs	r3, #64	; 0x40
 80091bc:	eba0 000a 	sub.w	r0, r0, sl
 80091c0:	fa03 f000 	lsl.w	r0, r3, r0
 80091c4:	9b04      	ldr	r3, [sp, #16]
 80091c6:	3401      	adds	r4, #1
 80091c8:	4303      	orrs	r3, r0
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d0:	2206      	movs	r2, #6
 80091d2:	482d      	ldr	r0, [pc, #180]	; (8009288 <_vfiprintf_r+0x254>)
 80091d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091d8:	f7ff f874 	bl	80082c4 <memchr>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d03f      	beq.n	8009260 <_vfiprintf_r+0x22c>
 80091e0:	4b2a      	ldr	r3, [pc, #168]	; (800928c <_vfiprintf_r+0x258>)
 80091e2:	bb1b      	cbnz	r3, 800922c <_vfiprintf_r+0x1f8>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	3307      	adds	r3, #7
 80091e8:	f023 0307 	bic.w	r3, r3, #7
 80091ec:	3308      	adds	r3, #8
 80091ee:	9303      	str	r3, [sp, #12]
 80091f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f2:	443b      	add	r3, r7
 80091f4:	9309      	str	r3, [sp, #36]	; 0x24
 80091f6:	e767      	b.n	80090c8 <_vfiprintf_r+0x94>
 80091f8:	460c      	mov	r4, r1
 80091fa:	2001      	movs	r0, #1
 80091fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009200:	e7a5      	b.n	800914e <_vfiprintf_r+0x11a>
 8009202:	2300      	movs	r3, #0
 8009204:	f04f 0c0a 	mov.w	ip, #10
 8009208:	4619      	mov	r1, r3
 800920a:	3401      	adds	r4, #1
 800920c:	9305      	str	r3, [sp, #20]
 800920e:	4620      	mov	r0, r4
 8009210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009214:	3a30      	subs	r2, #48	; 0x30
 8009216:	2a09      	cmp	r2, #9
 8009218:	d903      	bls.n	8009222 <_vfiprintf_r+0x1ee>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0c5      	beq.n	80091aa <_vfiprintf_r+0x176>
 800921e:	9105      	str	r1, [sp, #20]
 8009220:	e7c3      	b.n	80091aa <_vfiprintf_r+0x176>
 8009222:	4604      	mov	r4, r0
 8009224:	2301      	movs	r3, #1
 8009226:	fb0c 2101 	mla	r1, ip, r1, r2
 800922a:	e7f0      	b.n	800920e <_vfiprintf_r+0x1da>
 800922c:	ab03      	add	r3, sp, #12
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	462a      	mov	r2, r5
 8009232:	4630      	mov	r0, r6
 8009234:	4b16      	ldr	r3, [pc, #88]	; (8009290 <_vfiprintf_r+0x25c>)
 8009236:	a904      	add	r1, sp, #16
 8009238:	f7fd fddc 	bl	8006df4 <_printf_float>
 800923c:	4607      	mov	r7, r0
 800923e:	1c78      	adds	r0, r7, #1
 8009240:	d1d6      	bne.n	80091f0 <_vfiprintf_r+0x1bc>
 8009242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009244:	07d9      	lsls	r1, r3, #31
 8009246:	d405      	bmi.n	8009254 <_vfiprintf_r+0x220>
 8009248:	89ab      	ldrh	r3, [r5, #12]
 800924a:	059a      	lsls	r2, r3, #22
 800924c:	d402      	bmi.n	8009254 <_vfiprintf_r+0x220>
 800924e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009250:	f000 faab 	bl	80097aa <__retarget_lock_release_recursive>
 8009254:	89ab      	ldrh	r3, [r5, #12]
 8009256:	065b      	lsls	r3, r3, #25
 8009258:	f53f af12 	bmi.w	8009080 <_vfiprintf_r+0x4c>
 800925c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800925e:	e711      	b.n	8009084 <_vfiprintf_r+0x50>
 8009260:	ab03      	add	r3, sp, #12
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	462a      	mov	r2, r5
 8009266:	4630      	mov	r0, r6
 8009268:	4b09      	ldr	r3, [pc, #36]	; (8009290 <_vfiprintf_r+0x25c>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	f7fe f85e 	bl	800732c <_printf_i>
 8009270:	e7e4      	b.n	800923c <_vfiprintf_r+0x208>
 8009272:	bf00      	nop
 8009274:	0800a0dc 	.word	0x0800a0dc
 8009278:	0800a0fc 	.word	0x0800a0fc
 800927c:	0800a0bc 	.word	0x0800a0bc
 8009280:	08009f64 	.word	0x08009f64
 8009284:	08009f6a 	.word	0x08009f6a
 8009288:	08009f6e 	.word	0x08009f6e
 800928c:	08006df5 	.word	0x08006df5
 8009290:	08009011 	.word	0x08009011

08009294 <__swbuf_r>:
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009296:	460e      	mov	r6, r1
 8009298:	4614      	mov	r4, r2
 800929a:	4605      	mov	r5, r0
 800929c:	b118      	cbz	r0, 80092a6 <__swbuf_r+0x12>
 800929e:	6983      	ldr	r3, [r0, #24]
 80092a0:	b90b      	cbnz	r3, 80092a6 <__swbuf_r+0x12>
 80092a2:	f000 f9e3 	bl	800966c <__sinit>
 80092a6:	4b21      	ldr	r3, [pc, #132]	; (800932c <__swbuf_r+0x98>)
 80092a8:	429c      	cmp	r4, r3
 80092aa:	d12b      	bne.n	8009304 <__swbuf_r+0x70>
 80092ac:	686c      	ldr	r4, [r5, #4]
 80092ae:	69a3      	ldr	r3, [r4, #24]
 80092b0:	60a3      	str	r3, [r4, #8]
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	071a      	lsls	r2, r3, #28
 80092b6:	d52f      	bpl.n	8009318 <__swbuf_r+0x84>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	b36b      	cbz	r3, 8009318 <__swbuf_r+0x84>
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	6820      	ldr	r0, [r4, #0]
 80092c0:	b2f6      	uxtb	r6, r6
 80092c2:	1ac0      	subs	r0, r0, r3
 80092c4:	6963      	ldr	r3, [r4, #20]
 80092c6:	4637      	mov	r7, r6
 80092c8:	4283      	cmp	r3, r0
 80092ca:	dc04      	bgt.n	80092d6 <__swbuf_r+0x42>
 80092cc:	4621      	mov	r1, r4
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 f938 	bl	8009544 <_fflush_r>
 80092d4:	bb30      	cbnz	r0, 8009324 <__swbuf_r+0x90>
 80092d6:	68a3      	ldr	r3, [r4, #8]
 80092d8:	3001      	adds	r0, #1
 80092da:	3b01      	subs	r3, #1
 80092dc:	60a3      	str	r3, [r4, #8]
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	6022      	str	r2, [r4, #0]
 80092e4:	701e      	strb	r6, [r3, #0]
 80092e6:	6963      	ldr	r3, [r4, #20]
 80092e8:	4283      	cmp	r3, r0
 80092ea:	d004      	beq.n	80092f6 <__swbuf_r+0x62>
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	07db      	lsls	r3, r3, #31
 80092f0:	d506      	bpl.n	8009300 <__swbuf_r+0x6c>
 80092f2:	2e0a      	cmp	r6, #10
 80092f4:	d104      	bne.n	8009300 <__swbuf_r+0x6c>
 80092f6:	4621      	mov	r1, r4
 80092f8:	4628      	mov	r0, r5
 80092fa:	f000 f923 	bl	8009544 <_fflush_r>
 80092fe:	b988      	cbnz	r0, 8009324 <__swbuf_r+0x90>
 8009300:	4638      	mov	r0, r7
 8009302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009304:	4b0a      	ldr	r3, [pc, #40]	; (8009330 <__swbuf_r+0x9c>)
 8009306:	429c      	cmp	r4, r3
 8009308:	d101      	bne.n	800930e <__swbuf_r+0x7a>
 800930a:	68ac      	ldr	r4, [r5, #8]
 800930c:	e7cf      	b.n	80092ae <__swbuf_r+0x1a>
 800930e:	4b09      	ldr	r3, [pc, #36]	; (8009334 <__swbuf_r+0xa0>)
 8009310:	429c      	cmp	r4, r3
 8009312:	bf08      	it	eq
 8009314:	68ec      	ldreq	r4, [r5, #12]
 8009316:	e7ca      	b.n	80092ae <__swbuf_r+0x1a>
 8009318:	4621      	mov	r1, r4
 800931a:	4628      	mov	r0, r5
 800931c:	f000 f81a 	bl	8009354 <__swsetup_r>
 8009320:	2800      	cmp	r0, #0
 8009322:	d0cb      	beq.n	80092bc <__swbuf_r+0x28>
 8009324:	f04f 37ff 	mov.w	r7, #4294967295
 8009328:	e7ea      	b.n	8009300 <__swbuf_r+0x6c>
 800932a:	bf00      	nop
 800932c:	0800a0dc 	.word	0x0800a0dc
 8009330:	0800a0fc 	.word	0x0800a0fc
 8009334:	0800a0bc 	.word	0x0800a0bc

08009338 <__ascii_wctomb>:
 8009338:	4603      	mov	r3, r0
 800933a:	4608      	mov	r0, r1
 800933c:	b141      	cbz	r1, 8009350 <__ascii_wctomb+0x18>
 800933e:	2aff      	cmp	r2, #255	; 0xff
 8009340:	d904      	bls.n	800934c <__ascii_wctomb+0x14>
 8009342:	228a      	movs	r2, #138	; 0x8a
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	4770      	bx	lr
 800934c:	2001      	movs	r0, #1
 800934e:	700a      	strb	r2, [r1, #0]
 8009350:	4770      	bx	lr
	...

08009354 <__swsetup_r>:
 8009354:	4b32      	ldr	r3, [pc, #200]	; (8009420 <__swsetup_r+0xcc>)
 8009356:	b570      	push	{r4, r5, r6, lr}
 8009358:	681d      	ldr	r5, [r3, #0]
 800935a:	4606      	mov	r6, r0
 800935c:	460c      	mov	r4, r1
 800935e:	b125      	cbz	r5, 800936a <__swsetup_r+0x16>
 8009360:	69ab      	ldr	r3, [r5, #24]
 8009362:	b913      	cbnz	r3, 800936a <__swsetup_r+0x16>
 8009364:	4628      	mov	r0, r5
 8009366:	f000 f981 	bl	800966c <__sinit>
 800936a:	4b2e      	ldr	r3, [pc, #184]	; (8009424 <__swsetup_r+0xd0>)
 800936c:	429c      	cmp	r4, r3
 800936e:	d10f      	bne.n	8009390 <__swsetup_r+0x3c>
 8009370:	686c      	ldr	r4, [r5, #4]
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009378:	0719      	lsls	r1, r3, #28
 800937a:	d42c      	bmi.n	80093d6 <__swsetup_r+0x82>
 800937c:	06dd      	lsls	r5, r3, #27
 800937e:	d411      	bmi.n	80093a4 <__swsetup_r+0x50>
 8009380:	2309      	movs	r3, #9
 8009382:	6033      	str	r3, [r6, #0]
 8009384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009388:	f04f 30ff 	mov.w	r0, #4294967295
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	e03e      	b.n	800940e <__swsetup_r+0xba>
 8009390:	4b25      	ldr	r3, [pc, #148]	; (8009428 <__swsetup_r+0xd4>)
 8009392:	429c      	cmp	r4, r3
 8009394:	d101      	bne.n	800939a <__swsetup_r+0x46>
 8009396:	68ac      	ldr	r4, [r5, #8]
 8009398:	e7eb      	b.n	8009372 <__swsetup_r+0x1e>
 800939a:	4b24      	ldr	r3, [pc, #144]	; (800942c <__swsetup_r+0xd8>)
 800939c:	429c      	cmp	r4, r3
 800939e:	bf08      	it	eq
 80093a0:	68ec      	ldreq	r4, [r5, #12]
 80093a2:	e7e6      	b.n	8009372 <__swsetup_r+0x1e>
 80093a4:	0758      	lsls	r0, r3, #29
 80093a6:	d512      	bpl.n	80093ce <__swsetup_r+0x7a>
 80093a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093aa:	b141      	cbz	r1, 80093be <__swsetup_r+0x6a>
 80093ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b0:	4299      	cmp	r1, r3
 80093b2:	d002      	beq.n	80093ba <__swsetup_r+0x66>
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7ff fb37 	bl	8008a28 <_free_r>
 80093ba:	2300      	movs	r3, #0
 80093bc:	6363      	str	r3, [r4, #52]	; 0x34
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	2300      	movs	r3, #0
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	6923      	ldr	r3, [r4, #16]
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f043 0308 	orr.w	r3, r3, #8
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	6923      	ldr	r3, [r4, #16]
 80093d8:	b94b      	cbnz	r3, 80093ee <__swsetup_r+0x9a>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e4:	d003      	beq.n	80093ee <__swsetup_r+0x9a>
 80093e6:	4621      	mov	r1, r4
 80093e8:	4630      	mov	r0, r6
 80093ea:	f000 fa05 	bl	80097f8 <__smakebuf_r>
 80093ee:	89a0      	ldrh	r0, [r4, #12]
 80093f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f4:	f010 0301 	ands.w	r3, r0, #1
 80093f8:	d00a      	beq.n	8009410 <__swsetup_r+0xbc>
 80093fa:	2300      	movs	r3, #0
 80093fc:	60a3      	str	r3, [r4, #8]
 80093fe:	6963      	ldr	r3, [r4, #20]
 8009400:	425b      	negs	r3, r3
 8009402:	61a3      	str	r3, [r4, #24]
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	b943      	cbnz	r3, 800941a <__swsetup_r+0xc6>
 8009408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800940c:	d1ba      	bne.n	8009384 <__swsetup_r+0x30>
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	0781      	lsls	r1, r0, #30
 8009412:	bf58      	it	pl
 8009414:	6963      	ldrpl	r3, [r4, #20]
 8009416:	60a3      	str	r3, [r4, #8]
 8009418:	e7f4      	b.n	8009404 <__swsetup_r+0xb0>
 800941a:	2000      	movs	r0, #0
 800941c:	e7f7      	b.n	800940e <__swsetup_r+0xba>
 800941e:	bf00      	nop
 8009420:	20000014 	.word	0x20000014
 8009424:	0800a0dc 	.word	0x0800a0dc
 8009428:	0800a0fc 	.word	0x0800a0fc
 800942c:	0800a0bc 	.word	0x0800a0bc

08009430 <abort>:
 8009430:	2006      	movs	r0, #6
 8009432:	b508      	push	{r3, lr}
 8009434:	f000 fa50 	bl	80098d8 <raise>
 8009438:	2001      	movs	r0, #1
 800943a:	f7f9 fae4 	bl	8002a06 <_exit>
	...

08009440 <__sflush_r>:
 8009440:	898a      	ldrh	r2, [r1, #12]
 8009442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009444:	4605      	mov	r5, r0
 8009446:	0710      	lsls	r0, r2, #28
 8009448:	460c      	mov	r4, r1
 800944a:	d457      	bmi.n	80094fc <__sflush_r+0xbc>
 800944c:	684b      	ldr	r3, [r1, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	dc04      	bgt.n	800945c <__sflush_r+0x1c>
 8009452:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	dc01      	bgt.n	800945c <__sflush_r+0x1c>
 8009458:	2000      	movs	r0, #0
 800945a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800945c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800945e:	2e00      	cmp	r6, #0
 8009460:	d0fa      	beq.n	8009458 <__sflush_r+0x18>
 8009462:	2300      	movs	r3, #0
 8009464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009468:	682f      	ldr	r7, [r5, #0]
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	d032      	beq.n	80094d4 <__sflush_r+0x94>
 800946e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	075a      	lsls	r2, r3, #29
 8009474:	d505      	bpl.n	8009482 <__sflush_r+0x42>
 8009476:	6863      	ldr	r3, [r4, #4]
 8009478:	1ac0      	subs	r0, r0, r3
 800947a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800947c:	b10b      	cbz	r3, 8009482 <__sflush_r+0x42>
 800947e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009480:	1ac0      	subs	r0, r0, r3
 8009482:	2300      	movs	r3, #0
 8009484:	4602      	mov	r2, r0
 8009486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009488:	4628      	mov	r0, r5
 800948a:	6a21      	ldr	r1, [r4, #32]
 800948c:	47b0      	blx	r6
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	d106      	bne.n	80094a2 <__sflush_r+0x62>
 8009494:	6829      	ldr	r1, [r5, #0]
 8009496:	291d      	cmp	r1, #29
 8009498:	d82c      	bhi.n	80094f4 <__sflush_r+0xb4>
 800949a:	4a29      	ldr	r2, [pc, #164]	; (8009540 <__sflush_r+0x100>)
 800949c:	40ca      	lsrs	r2, r1
 800949e:	07d6      	lsls	r6, r2, #31
 80094a0:	d528      	bpl.n	80094f4 <__sflush_r+0xb4>
 80094a2:	2200      	movs	r2, #0
 80094a4:	6062      	str	r2, [r4, #4]
 80094a6:	6922      	ldr	r2, [r4, #16]
 80094a8:	04d9      	lsls	r1, r3, #19
 80094aa:	6022      	str	r2, [r4, #0]
 80094ac:	d504      	bpl.n	80094b8 <__sflush_r+0x78>
 80094ae:	1c42      	adds	r2, r0, #1
 80094b0:	d101      	bne.n	80094b6 <__sflush_r+0x76>
 80094b2:	682b      	ldr	r3, [r5, #0]
 80094b4:	b903      	cbnz	r3, 80094b8 <__sflush_r+0x78>
 80094b6:	6560      	str	r0, [r4, #84]	; 0x54
 80094b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ba:	602f      	str	r7, [r5, #0]
 80094bc:	2900      	cmp	r1, #0
 80094be:	d0cb      	beq.n	8009458 <__sflush_r+0x18>
 80094c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c4:	4299      	cmp	r1, r3
 80094c6:	d002      	beq.n	80094ce <__sflush_r+0x8e>
 80094c8:	4628      	mov	r0, r5
 80094ca:	f7ff faad 	bl	8008a28 <_free_r>
 80094ce:	2000      	movs	r0, #0
 80094d0:	6360      	str	r0, [r4, #52]	; 0x34
 80094d2:	e7c2      	b.n	800945a <__sflush_r+0x1a>
 80094d4:	6a21      	ldr	r1, [r4, #32]
 80094d6:	2301      	movs	r3, #1
 80094d8:	4628      	mov	r0, r5
 80094da:	47b0      	blx	r6
 80094dc:	1c41      	adds	r1, r0, #1
 80094de:	d1c7      	bne.n	8009470 <__sflush_r+0x30>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0c4      	beq.n	8009470 <__sflush_r+0x30>
 80094e6:	2b1d      	cmp	r3, #29
 80094e8:	d001      	beq.n	80094ee <__sflush_r+0xae>
 80094ea:	2b16      	cmp	r3, #22
 80094ec:	d101      	bne.n	80094f2 <__sflush_r+0xb2>
 80094ee:	602f      	str	r7, [r5, #0]
 80094f0:	e7b2      	b.n	8009458 <__sflush_r+0x18>
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	e7ae      	b.n	800945a <__sflush_r+0x1a>
 80094fc:	690f      	ldr	r7, [r1, #16]
 80094fe:	2f00      	cmp	r7, #0
 8009500:	d0aa      	beq.n	8009458 <__sflush_r+0x18>
 8009502:	0793      	lsls	r3, r2, #30
 8009504:	bf18      	it	ne
 8009506:	2300      	movne	r3, #0
 8009508:	680e      	ldr	r6, [r1, #0]
 800950a:	bf08      	it	eq
 800950c:	694b      	ldreq	r3, [r1, #20]
 800950e:	1bf6      	subs	r6, r6, r7
 8009510:	600f      	str	r7, [r1, #0]
 8009512:	608b      	str	r3, [r1, #8]
 8009514:	2e00      	cmp	r6, #0
 8009516:	dd9f      	ble.n	8009458 <__sflush_r+0x18>
 8009518:	4633      	mov	r3, r6
 800951a:	463a      	mov	r2, r7
 800951c:	4628      	mov	r0, r5
 800951e:	6a21      	ldr	r1, [r4, #32]
 8009520:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009524:	47e0      	blx	ip
 8009526:	2800      	cmp	r0, #0
 8009528:	dc06      	bgt.n	8009538 <__sflush_r+0xf8>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	e790      	b.n	800945a <__sflush_r+0x1a>
 8009538:	4407      	add	r7, r0
 800953a:	1a36      	subs	r6, r6, r0
 800953c:	e7ea      	b.n	8009514 <__sflush_r+0xd4>
 800953e:	bf00      	nop
 8009540:	20400001 	.word	0x20400001

08009544 <_fflush_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	690b      	ldr	r3, [r1, #16]
 8009548:	4605      	mov	r5, r0
 800954a:	460c      	mov	r4, r1
 800954c:	b913      	cbnz	r3, 8009554 <_fflush_r+0x10>
 800954e:	2500      	movs	r5, #0
 8009550:	4628      	mov	r0, r5
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	b118      	cbz	r0, 800955e <_fflush_r+0x1a>
 8009556:	6983      	ldr	r3, [r0, #24]
 8009558:	b90b      	cbnz	r3, 800955e <_fflush_r+0x1a>
 800955a:	f000 f887 	bl	800966c <__sinit>
 800955e:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <_fflush_r+0x6c>)
 8009560:	429c      	cmp	r4, r3
 8009562:	d11b      	bne.n	800959c <_fflush_r+0x58>
 8009564:	686c      	ldr	r4, [r5, #4]
 8009566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0ef      	beq.n	800954e <_fflush_r+0xa>
 800956e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009570:	07d0      	lsls	r0, r2, #31
 8009572:	d404      	bmi.n	800957e <_fflush_r+0x3a>
 8009574:	0599      	lsls	r1, r3, #22
 8009576:	d402      	bmi.n	800957e <_fflush_r+0x3a>
 8009578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800957a:	f000 f915 	bl	80097a8 <__retarget_lock_acquire_recursive>
 800957e:	4628      	mov	r0, r5
 8009580:	4621      	mov	r1, r4
 8009582:	f7ff ff5d 	bl	8009440 <__sflush_r>
 8009586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009588:	4605      	mov	r5, r0
 800958a:	07da      	lsls	r2, r3, #31
 800958c:	d4e0      	bmi.n	8009550 <_fflush_r+0xc>
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	059b      	lsls	r3, r3, #22
 8009592:	d4dd      	bmi.n	8009550 <_fflush_r+0xc>
 8009594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009596:	f000 f908 	bl	80097aa <__retarget_lock_release_recursive>
 800959a:	e7d9      	b.n	8009550 <_fflush_r+0xc>
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <_fflush_r+0x70>)
 800959e:	429c      	cmp	r4, r3
 80095a0:	d101      	bne.n	80095a6 <_fflush_r+0x62>
 80095a2:	68ac      	ldr	r4, [r5, #8]
 80095a4:	e7df      	b.n	8009566 <_fflush_r+0x22>
 80095a6:	4b04      	ldr	r3, [pc, #16]	; (80095b8 <_fflush_r+0x74>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	bf08      	it	eq
 80095ac:	68ec      	ldreq	r4, [r5, #12]
 80095ae:	e7da      	b.n	8009566 <_fflush_r+0x22>
 80095b0:	0800a0dc 	.word	0x0800a0dc
 80095b4:	0800a0fc 	.word	0x0800a0fc
 80095b8:	0800a0bc 	.word	0x0800a0bc

080095bc <std>:
 80095bc:	2300      	movs	r3, #0
 80095be:	b510      	push	{r4, lr}
 80095c0:	4604      	mov	r4, r0
 80095c2:	e9c0 3300 	strd	r3, r3, [r0]
 80095c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ca:	6083      	str	r3, [r0, #8]
 80095cc:	8181      	strh	r1, [r0, #12]
 80095ce:	6643      	str	r3, [r0, #100]	; 0x64
 80095d0:	81c2      	strh	r2, [r0, #14]
 80095d2:	6183      	str	r3, [r0, #24]
 80095d4:	4619      	mov	r1, r3
 80095d6:	2208      	movs	r2, #8
 80095d8:	305c      	adds	r0, #92	; 0x5c
 80095da:	f7fd fb65 	bl	8006ca8 <memset>
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <std+0x38>)
 80095e0:	6224      	str	r4, [r4, #32]
 80095e2:	6263      	str	r3, [r4, #36]	; 0x24
 80095e4:	4b04      	ldr	r3, [pc, #16]	; (80095f8 <std+0x3c>)
 80095e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80095e8:	4b04      	ldr	r3, [pc, #16]	; (80095fc <std+0x40>)
 80095ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095ec:	4b04      	ldr	r3, [pc, #16]	; (8009600 <std+0x44>)
 80095ee:	6323      	str	r3, [r4, #48]	; 0x30
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	bf00      	nop
 80095f4:	08009911 	.word	0x08009911
 80095f8:	08009933 	.word	0x08009933
 80095fc:	0800996b 	.word	0x0800996b
 8009600:	0800998f 	.word	0x0800998f

08009604 <_cleanup_r>:
 8009604:	4901      	ldr	r1, [pc, #4]	; (800960c <_cleanup_r+0x8>)
 8009606:	f000 b8af 	b.w	8009768 <_fwalk_reent>
 800960a:	bf00      	nop
 800960c:	08009545 	.word	0x08009545

08009610 <__sfmoreglue>:
 8009610:	2268      	movs	r2, #104	; 0x68
 8009612:	b570      	push	{r4, r5, r6, lr}
 8009614:	1e4d      	subs	r5, r1, #1
 8009616:	4355      	muls	r5, r2
 8009618:	460e      	mov	r6, r1
 800961a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800961e:	f7ff fa6b 	bl	8008af8 <_malloc_r>
 8009622:	4604      	mov	r4, r0
 8009624:	b140      	cbz	r0, 8009638 <__sfmoreglue+0x28>
 8009626:	2100      	movs	r1, #0
 8009628:	e9c0 1600 	strd	r1, r6, [r0]
 800962c:	300c      	adds	r0, #12
 800962e:	60a0      	str	r0, [r4, #8]
 8009630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009634:	f7fd fb38 	bl	8006ca8 <memset>
 8009638:	4620      	mov	r0, r4
 800963a:	bd70      	pop	{r4, r5, r6, pc}

0800963c <__sfp_lock_acquire>:
 800963c:	4801      	ldr	r0, [pc, #4]	; (8009644 <__sfp_lock_acquire+0x8>)
 800963e:	f000 b8b3 	b.w	80097a8 <__retarget_lock_acquire_recursive>
 8009642:	bf00      	nop
 8009644:	2000033d 	.word	0x2000033d

08009648 <__sfp_lock_release>:
 8009648:	4801      	ldr	r0, [pc, #4]	; (8009650 <__sfp_lock_release+0x8>)
 800964a:	f000 b8ae 	b.w	80097aa <__retarget_lock_release_recursive>
 800964e:	bf00      	nop
 8009650:	2000033d 	.word	0x2000033d

08009654 <__sinit_lock_acquire>:
 8009654:	4801      	ldr	r0, [pc, #4]	; (800965c <__sinit_lock_acquire+0x8>)
 8009656:	f000 b8a7 	b.w	80097a8 <__retarget_lock_acquire_recursive>
 800965a:	bf00      	nop
 800965c:	2000033e 	.word	0x2000033e

08009660 <__sinit_lock_release>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__sinit_lock_release+0x8>)
 8009662:	f000 b8a2 	b.w	80097aa <__retarget_lock_release_recursive>
 8009666:	bf00      	nop
 8009668:	2000033e 	.word	0x2000033e

0800966c <__sinit>:
 800966c:	b510      	push	{r4, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	f7ff fff0 	bl	8009654 <__sinit_lock_acquire>
 8009674:	69a3      	ldr	r3, [r4, #24]
 8009676:	b11b      	cbz	r3, 8009680 <__sinit+0x14>
 8009678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800967c:	f7ff bff0 	b.w	8009660 <__sinit_lock_release>
 8009680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009684:	6523      	str	r3, [r4, #80]	; 0x50
 8009686:	4b13      	ldr	r3, [pc, #76]	; (80096d4 <__sinit+0x68>)
 8009688:	4a13      	ldr	r2, [pc, #76]	; (80096d8 <__sinit+0x6c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	62a2      	str	r2, [r4, #40]	; 0x28
 800968e:	42a3      	cmp	r3, r4
 8009690:	bf08      	it	eq
 8009692:	2301      	moveq	r3, #1
 8009694:	4620      	mov	r0, r4
 8009696:	bf08      	it	eq
 8009698:	61a3      	streq	r3, [r4, #24]
 800969a:	f000 f81f 	bl	80096dc <__sfp>
 800969e:	6060      	str	r0, [r4, #4]
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 f81b 	bl	80096dc <__sfp>
 80096a6:	60a0      	str	r0, [r4, #8]
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 f817 	bl	80096dc <__sfp>
 80096ae:	2200      	movs	r2, #0
 80096b0:	2104      	movs	r1, #4
 80096b2:	60e0      	str	r0, [r4, #12]
 80096b4:	6860      	ldr	r0, [r4, #4]
 80096b6:	f7ff ff81 	bl	80095bc <std>
 80096ba:	2201      	movs	r2, #1
 80096bc:	2109      	movs	r1, #9
 80096be:	68a0      	ldr	r0, [r4, #8]
 80096c0:	f7ff ff7c 	bl	80095bc <std>
 80096c4:	2202      	movs	r2, #2
 80096c6:	2112      	movs	r1, #18
 80096c8:	68e0      	ldr	r0, [r4, #12]
 80096ca:	f7ff ff77 	bl	80095bc <std>
 80096ce:	2301      	movs	r3, #1
 80096d0:	61a3      	str	r3, [r4, #24]
 80096d2:	e7d1      	b.n	8009678 <__sinit+0xc>
 80096d4:	08009d40 	.word	0x08009d40
 80096d8:	08009605 	.word	0x08009605

080096dc <__sfp>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	4607      	mov	r7, r0
 80096e0:	f7ff ffac 	bl	800963c <__sfp_lock_acquire>
 80096e4:	4b1e      	ldr	r3, [pc, #120]	; (8009760 <__sfp+0x84>)
 80096e6:	681e      	ldr	r6, [r3, #0]
 80096e8:	69b3      	ldr	r3, [r6, #24]
 80096ea:	b913      	cbnz	r3, 80096f2 <__sfp+0x16>
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7ff ffbd 	bl	800966c <__sinit>
 80096f2:	3648      	adds	r6, #72	; 0x48
 80096f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	d503      	bpl.n	8009704 <__sfp+0x28>
 80096fc:	6833      	ldr	r3, [r6, #0]
 80096fe:	b30b      	cbz	r3, 8009744 <__sfp+0x68>
 8009700:	6836      	ldr	r6, [r6, #0]
 8009702:	e7f7      	b.n	80096f4 <__sfp+0x18>
 8009704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009708:	b9d5      	cbnz	r5, 8009740 <__sfp+0x64>
 800970a:	4b16      	ldr	r3, [pc, #88]	; (8009764 <__sfp+0x88>)
 800970c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009710:	60e3      	str	r3, [r4, #12]
 8009712:	6665      	str	r5, [r4, #100]	; 0x64
 8009714:	f000 f847 	bl	80097a6 <__retarget_lock_init_recursive>
 8009718:	f7ff ff96 	bl	8009648 <__sfp_lock_release>
 800971c:	2208      	movs	r2, #8
 800971e:	4629      	mov	r1, r5
 8009720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009728:	6025      	str	r5, [r4, #0]
 800972a:	61a5      	str	r5, [r4, #24]
 800972c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009730:	f7fd faba 	bl	8006ca8 <memset>
 8009734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800973c:	4620      	mov	r0, r4
 800973e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009740:	3468      	adds	r4, #104	; 0x68
 8009742:	e7d9      	b.n	80096f8 <__sfp+0x1c>
 8009744:	2104      	movs	r1, #4
 8009746:	4638      	mov	r0, r7
 8009748:	f7ff ff62 	bl	8009610 <__sfmoreglue>
 800974c:	4604      	mov	r4, r0
 800974e:	6030      	str	r0, [r6, #0]
 8009750:	2800      	cmp	r0, #0
 8009752:	d1d5      	bne.n	8009700 <__sfp+0x24>
 8009754:	f7ff ff78 	bl	8009648 <__sfp_lock_release>
 8009758:	230c      	movs	r3, #12
 800975a:	603b      	str	r3, [r7, #0]
 800975c:	e7ee      	b.n	800973c <__sfp+0x60>
 800975e:	bf00      	nop
 8009760:	08009d40 	.word	0x08009d40
 8009764:	ffff0001 	.word	0xffff0001

08009768 <_fwalk_reent>:
 8009768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800976c:	4606      	mov	r6, r0
 800976e:	4688      	mov	r8, r1
 8009770:	2700      	movs	r7, #0
 8009772:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800977a:	f1b9 0901 	subs.w	r9, r9, #1
 800977e:	d505      	bpl.n	800978c <_fwalk_reent+0x24>
 8009780:	6824      	ldr	r4, [r4, #0]
 8009782:	2c00      	cmp	r4, #0
 8009784:	d1f7      	bne.n	8009776 <_fwalk_reent+0xe>
 8009786:	4638      	mov	r0, r7
 8009788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978c:	89ab      	ldrh	r3, [r5, #12]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d907      	bls.n	80097a2 <_fwalk_reent+0x3a>
 8009792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009796:	3301      	adds	r3, #1
 8009798:	d003      	beq.n	80097a2 <_fwalk_reent+0x3a>
 800979a:	4629      	mov	r1, r5
 800979c:	4630      	mov	r0, r6
 800979e:	47c0      	blx	r8
 80097a0:	4307      	orrs	r7, r0
 80097a2:	3568      	adds	r5, #104	; 0x68
 80097a4:	e7e9      	b.n	800977a <_fwalk_reent+0x12>

080097a6 <__retarget_lock_init_recursive>:
 80097a6:	4770      	bx	lr

080097a8 <__retarget_lock_acquire_recursive>:
 80097a8:	4770      	bx	lr

080097aa <__retarget_lock_release_recursive>:
 80097aa:	4770      	bx	lr

080097ac <__swhatbuf_r>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	460e      	mov	r6, r1
 80097b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b4:	4614      	mov	r4, r2
 80097b6:	2900      	cmp	r1, #0
 80097b8:	461d      	mov	r5, r3
 80097ba:	b096      	sub	sp, #88	; 0x58
 80097bc:	da08      	bge.n	80097d0 <__swhatbuf_r+0x24>
 80097be:	2200      	movs	r2, #0
 80097c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097c4:	602a      	str	r2, [r5, #0]
 80097c6:	061a      	lsls	r2, r3, #24
 80097c8:	d410      	bmi.n	80097ec <__swhatbuf_r+0x40>
 80097ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ce:	e00e      	b.n	80097ee <__swhatbuf_r+0x42>
 80097d0:	466a      	mov	r2, sp
 80097d2:	f000 f903 	bl	80099dc <_fstat_r>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	dbf1      	blt.n	80097be <__swhatbuf_r+0x12>
 80097da:	9a01      	ldr	r2, [sp, #4]
 80097dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097e4:	425a      	negs	r2, r3
 80097e6:	415a      	adcs	r2, r3
 80097e8:	602a      	str	r2, [r5, #0]
 80097ea:	e7ee      	b.n	80097ca <__swhatbuf_r+0x1e>
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	2000      	movs	r0, #0
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	b016      	add	sp, #88	; 0x58
 80097f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080097f8 <__smakebuf_r>:
 80097f8:	898b      	ldrh	r3, [r1, #12]
 80097fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097fc:	079d      	lsls	r5, r3, #30
 80097fe:	4606      	mov	r6, r0
 8009800:	460c      	mov	r4, r1
 8009802:	d507      	bpl.n	8009814 <__smakebuf_r+0x1c>
 8009804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	6123      	str	r3, [r4, #16]
 800980c:	2301      	movs	r3, #1
 800980e:	6163      	str	r3, [r4, #20]
 8009810:	b002      	add	sp, #8
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	466a      	mov	r2, sp
 8009816:	ab01      	add	r3, sp, #4
 8009818:	f7ff ffc8 	bl	80097ac <__swhatbuf_r>
 800981c:	9900      	ldr	r1, [sp, #0]
 800981e:	4605      	mov	r5, r0
 8009820:	4630      	mov	r0, r6
 8009822:	f7ff f969 	bl	8008af8 <_malloc_r>
 8009826:	b948      	cbnz	r0, 800983c <__smakebuf_r+0x44>
 8009828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800982c:	059a      	lsls	r2, r3, #22
 800982e:	d4ef      	bmi.n	8009810 <__smakebuf_r+0x18>
 8009830:	f023 0303 	bic.w	r3, r3, #3
 8009834:	f043 0302 	orr.w	r3, r3, #2
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	e7e3      	b.n	8009804 <__smakebuf_r+0xc>
 800983c:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <__smakebuf_r+0x7c>)
 800983e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	6020      	str	r0, [r4, #0]
 8009844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	9b00      	ldr	r3, [sp, #0]
 800984c:	6120      	str	r0, [r4, #16]
 800984e:	6163      	str	r3, [r4, #20]
 8009850:	9b01      	ldr	r3, [sp, #4]
 8009852:	b15b      	cbz	r3, 800986c <__smakebuf_r+0x74>
 8009854:	4630      	mov	r0, r6
 8009856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800985a:	f000 f8d1 	bl	8009a00 <_isatty_r>
 800985e:	b128      	cbz	r0, 800986c <__smakebuf_r+0x74>
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f023 0303 	bic.w	r3, r3, #3
 8009866:	f043 0301 	orr.w	r3, r3, #1
 800986a:	81a3      	strh	r3, [r4, #12]
 800986c:	89a0      	ldrh	r0, [r4, #12]
 800986e:	4305      	orrs	r5, r0
 8009870:	81a5      	strh	r5, [r4, #12]
 8009872:	e7cd      	b.n	8009810 <__smakebuf_r+0x18>
 8009874:	08009605 	.word	0x08009605

08009878 <_malloc_usable_size_r>:
 8009878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800987c:	1f18      	subs	r0, r3, #4
 800987e:	2b00      	cmp	r3, #0
 8009880:	bfbc      	itt	lt
 8009882:	580b      	ldrlt	r3, [r1, r0]
 8009884:	18c0      	addlt	r0, r0, r3
 8009886:	4770      	bx	lr

08009888 <_raise_r>:
 8009888:	291f      	cmp	r1, #31
 800988a:	b538      	push	{r3, r4, r5, lr}
 800988c:	4604      	mov	r4, r0
 800988e:	460d      	mov	r5, r1
 8009890:	d904      	bls.n	800989c <_raise_r+0x14>
 8009892:	2316      	movs	r3, #22
 8009894:	6003      	str	r3, [r0, #0]
 8009896:	f04f 30ff 	mov.w	r0, #4294967295
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800989e:	b112      	cbz	r2, 80098a6 <_raise_r+0x1e>
 80098a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098a4:	b94b      	cbnz	r3, 80098ba <_raise_r+0x32>
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 f830 	bl	800990c <_getpid_r>
 80098ac:	462a      	mov	r2, r5
 80098ae:	4601      	mov	r1, r0
 80098b0:	4620      	mov	r0, r4
 80098b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098b6:	f000 b817 	b.w	80098e8 <_kill_r>
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d00a      	beq.n	80098d4 <_raise_r+0x4c>
 80098be:	1c59      	adds	r1, r3, #1
 80098c0:	d103      	bne.n	80098ca <_raise_r+0x42>
 80098c2:	2316      	movs	r3, #22
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	2001      	movs	r0, #1
 80098c8:	e7e7      	b.n	800989a <_raise_r+0x12>
 80098ca:	2400      	movs	r4, #0
 80098cc:	4628      	mov	r0, r5
 80098ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098d2:	4798      	blx	r3
 80098d4:	2000      	movs	r0, #0
 80098d6:	e7e0      	b.n	800989a <_raise_r+0x12>

080098d8 <raise>:
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <raise+0xc>)
 80098da:	4601      	mov	r1, r0
 80098dc:	6818      	ldr	r0, [r3, #0]
 80098de:	f7ff bfd3 	b.w	8009888 <_raise_r>
 80098e2:	bf00      	nop
 80098e4:	20000014 	.word	0x20000014

080098e8 <_kill_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	2300      	movs	r3, #0
 80098ec:	4d06      	ldr	r5, [pc, #24]	; (8009908 <_kill_r+0x20>)
 80098ee:	4604      	mov	r4, r0
 80098f0:	4608      	mov	r0, r1
 80098f2:	4611      	mov	r1, r2
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	f7f9 f876 	bl	80029e6 <_kill>
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	d102      	bne.n	8009904 <_kill_r+0x1c>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	b103      	cbz	r3, 8009904 <_kill_r+0x1c>
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	20000338 	.word	0x20000338

0800990c <_getpid_r>:
 800990c:	f7f9 b864 	b.w	80029d8 <_getpid>

08009910 <__sread>:
 8009910:	b510      	push	{r4, lr}
 8009912:	460c      	mov	r4, r1
 8009914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009918:	f000 f894 	bl	8009a44 <_read_r>
 800991c:	2800      	cmp	r0, #0
 800991e:	bfab      	itete	ge
 8009920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009922:	89a3      	ldrhlt	r3, [r4, #12]
 8009924:	181b      	addge	r3, r3, r0
 8009926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800992a:	bfac      	ite	ge
 800992c:	6563      	strge	r3, [r4, #84]	; 0x54
 800992e:	81a3      	strhlt	r3, [r4, #12]
 8009930:	bd10      	pop	{r4, pc}

08009932 <__swrite>:
 8009932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009936:	461f      	mov	r7, r3
 8009938:	898b      	ldrh	r3, [r1, #12]
 800993a:	4605      	mov	r5, r0
 800993c:	05db      	lsls	r3, r3, #23
 800993e:	460c      	mov	r4, r1
 8009940:	4616      	mov	r6, r2
 8009942:	d505      	bpl.n	8009950 <__swrite+0x1e>
 8009944:	2302      	movs	r3, #2
 8009946:	2200      	movs	r2, #0
 8009948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994c:	f000 f868 	bl	8009a20 <_lseek_r>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	4632      	mov	r2, r6
 8009954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	4628      	mov	r0, r5
 800995c:	463b      	mov	r3, r7
 800995e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009966:	f000 b817 	b.w	8009998 <_write_r>

0800996a <__sseek>:
 800996a:	b510      	push	{r4, lr}
 800996c:	460c      	mov	r4, r1
 800996e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009972:	f000 f855 	bl	8009a20 <_lseek_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	bf15      	itete	ne
 800997c:	6560      	strne	r0, [r4, #84]	; 0x54
 800997e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009986:	81a3      	strheq	r3, [r4, #12]
 8009988:	bf18      	it	ne
 800998a:	81a3      	strhne	r3, [r4, #12]
 800998c:	bd10      	pop	{r4, pc}

0800998e <__sclose>:
 800998e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009992:	f000 b813 	b.w	80099bc <_close_r>
	...

08009998 <_write_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	4611      	mov	r1, r2
 80099a0:	2200      	movs	r2, #0
 80099a2:	4d05      	ldr	r5, [pc, #20]	; (80099b8 <_write_r+0x20>)
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f9 f854 	bl	8002a54 <_write>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_write_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_write_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	20000338 	.word	0x20000338

080099bc <_close_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	2300      	movs	r3, #0
 80099c0:	4d05      	ldr	r5, [pc, #20]	; (80099d8 <_close_r+0x1c>)
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	f7f9 f860 	bl	8002a8c <_close>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_close_r+0x1a>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_close_r+0x1a>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20000338 	.word	0x20000338

080099dc <_fstat_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	2300      	movs	r3, #0
 80099e0:	4d06      	ldr	r5, [pc, #24]	; (80099fc <_fstat_r+0x20>)
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	f7f9 f85a 	bl	8002aa2 <_fstat>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d102      	bne.n	80099f8 <_fstat_r+0x1c>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	b103      	cbz	r3, 80099f8 <_fstat_r+0x1c>
 80099f6:	6023      	str	r3, [r4, #0]
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	bf00      	nop
 80099fc:	20000338 	.word	0x20000338

08009a00 <_isatty_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	2300      	movs	r3, #0
 8009a04:	4d05      	ldr	r5, [pc, #20]	; (8009a1c <_isatty_r+0x1c>)
 8009a06:	4604      	mov	r4, r0
 8009a08:	4608      	mov	r0, r1
 8009a0a:	602b      	str	r3, [r5, #0]
 8009a0c:	f7f9 f858 	bl	8002ac0 <_isatty>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d102      	bne.n	8009a1a <_isatty_r+0x1a>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	b103      	cbz	r3, 8009a1a <_isatty_r+0x1a>
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	20000338 	.word	0x20000338

08009a20 <_lseek_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4d05      	ldr	r5, [pc, #20]	; (8009a40 <_lseek_r+0x20>)
 8009a2c:	602a      	str	r2, [r5, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f7f9 f850 	bl	8002ad4 <_lseek>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_lseek_r+0x1e>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_lseek_r+0x1e>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	20000338 	.word	0x20000338

08009a44 <_read_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4d05      	ldr	r5, [pc, #20]	; (8009a64 <_read_r+0x20>)
 8009a50:	602a      	str	r2, [r5, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	f7f8 ffe1 	bl	8002a1a <_read>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d102      	bne.n	8009a62 <_read_r+0x1e>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	b103      	cbz	r3, 8009a62 <_read_r+0x1e>
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	20000338 	.word	0x20000338

08009a68 <_init>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr

08009a74 <_fini>:
 8009a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a76:	bf00      	nop
 8009a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7a:	bc08      	pop	{r3}
 8009a7c:	469e      	mov	lr, r3
 8009a7e:	4770      	bx	lr
